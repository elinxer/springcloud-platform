// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataUploader.proto

package com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body;

public final class DataUploaderProtoc {
  private DataUploaderProtoc() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationType}
   */
  public enum CalibrationType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>TYPE_NULL = 0;</code>
     */
    TYPE_NULL(0),
    /**
     * <pre>
     * GNSS天线校准
     * </pre>
     *
     * <code>TYPE_GNSS_ANT = 1;</code>
     */
    TYPE_GNSS_ANT(1),
    /**
     * <pre>
     * 轮角校准
     * </pre>
     *
     * <code>TYPE_WHEEL_ANGLE = 2;</code>
     */
    TYPE_WHEEL_ANGLE(2),
    /**
     * <pre>
     * 转向电机校准
     * </pre>
     *
     * <code>TYPE_STEER_MOTOR = 3;</code>
     */
    TYPE_STEER_MOTOR(3),
    /**
     * <pre>
     * 液压转向校准
     * </pre>
     *
     * <code>TYPE_HYDRAULIC_STEER = 4;</code>
     */
    TYPE_HYDRAULIC_STEER(4),
    /**
     * <pre>
     * </pre>
     *
     * <code>TYPE_IMU = 5;</code>
     */
    TYPE_IMU(5),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>TYPE_NULL = 0;</code>
     */
    public static final int TYPE_NULL_VALUE = 0;
    /**
     * <pre>
     * GNSS天线校准
     * </pre>
     *
     * <code>TYPE_GNSS_ANT = 1;</code>
     */
    public static final int TYPE_GNSS_ANT_VALUE = 1;
    /**
     * <pre>
     * 轮角校准
     * </pre>
     *
     * <code>TYPE_WHEEL_ANGLE = 2;</code>
     */
    public static final int TYPE_WHEEL_ANGLE_VALUE = 2;
    /**
     * <pre>
     * 转向电机校准
     * </pre>
     *
     * <code>TYPE_STEER_MOTOR = 3;</code>
     */
    public static final int TYPE_STEER_MOTOR_VALUE = 3;
    /**
     * <pre>
     * 液压转向校准
     * </pre>
     *
     * <code>TYPE_HYDRAULIC_STEER = 4;</code>
     */
    public static final int TYPE_HYDRAULIC_STEER_VALUE = 4;
    /**
     * <pre>
     * </pre>
     *
     * <code>TYPE_IMU = 5;</code>
     */
    public static final int TYPE_IMU_VALUE = 5;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CalibrationType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static CalibrationType forNumber(int value) {
      switch (value) {
        case 0: return TYPE_NULL;
        case 1: return TYPE_GNSS_ANT;
        case 2: return TYPE_WHEEL_ANGLE;
        case 3: return TYPE_STEER_MOTOR;
        case 4: return TYPE_HYDRAULIC_STEER;
        case 5: return TYPE_IMU;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CalibrationType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        CalibrationType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CalibrationType>() {
            public CalibrationType findValueByNumber(int number) {
              return CalibrationType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.getDescriptor().getEnumTypes().get(0);
    }

    private static final CalibrationType[] VALUES = values();

    public static CalibrationType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private CalibrationType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationType)
  }

  public interface DataUploaderOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Header header = 1;</code>
     * @return Whether the header field is set.
     */
    boolean hasHeader();
    /**
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Header header = 1;</code>
     * @return The header.
     */
    com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header getHeader();
    /**
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Header header = 1;</code>
     */
    com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.HeaderOrBuilder getHeaderOrBuilder();

    /**
     * <pre>
     *显示路径 选用    实时信息 1s上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Path display_path = 2;</code>
     * @return Whether the displayPath field is set.
     */
    boolean hasDisplayPath();
    /**
     * <pre>
     *显示路径 选用    实时信息 1s上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Path display_path = 2;</code>
     * @return The displayPath.
     */
    com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path getDisplayPath();
    /**
     * <pre>
     *显示路径 选用    实时信息 1s上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Path display_path = 2;</code>
     */
    com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PathOrBuilder getDisplayPathOrBuilder();

    /**
     * <pre>
     *位置信息         实时信息 1s上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.LocalizationInfo localization_info = 3;</code>
     * @return Whether the localizationInfo field is set.
     */
    boolean hasLocalizationInfo();
    /**
     * <pre>
     *位置信息         实时信息 1s上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.LocalizationInfo localization_info = 3;</code>
     * @return The localizationInfo.
     */
    com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo getLocalizationInfo();
    /**
     * <pre>
     *位置信息         实时信息 1s上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.LocalizationInfo localization_info = 3;</code>
     */
    com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfoOrBuilder getLocalizationInfoOrBuilder();

    /**
     * <pre>
     *控制信息         实时信息 1s上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ControlInfo control_info = 4;</code>
     * @return Whether the controlInfo field is set.
     */
    boolean hasControlInfo();
    /**
     * <pre>
     *控制信息         实时信息 1s上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ControlInfo control_info = 4;</code>
     * @return The controlInfo.
     */
    com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo getControlInfo();
    /**
     * <pre>
     *控制信息         实时信息 1s上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ControlInfo control_info = 4;</code>
     */
    com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfoOrBuilder getControlInfoOrBuilder();

    /**
     * <pre>
     *底盘信息         实时信息 1s上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo chassis_info = 5;</code>
     * @return Whether the chassisInfo field is set.
     */
    boolean hasChassisInfo();
    /**
     * <pre>
     *底盘信息         实时信息 1s上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo chassis_info = 5;</code>
     * @return The chassisInfo.
     */
    com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo getChassisInfo();
    /**
     * <pre>
     *底盘信息         实时信息 1s上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo chassis_info = 5;</code>
     */
    com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfoOrBuilder getChassisInfoOrBuilder();

    /**
     * <pre>
     *规划信息         实时信息 1s上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.PlanningInfo planning_info = 6;</code>
     * @return Whether the planningInfo field is set.
     */
    boolean hasPlanningInfo();
    /**
     * <pre>
     *规划信息         实时信息 1s上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.PlanningInfo planning_info = 6;</code>
     * @return The planningInfo.
     */
    com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo getPlanningInfo();
    /**
     * <pre>
     *规划信息         实时信息 1s上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.PlanningInfo planning_info = 6;</code>
     */
    com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfoOrBuilder getPlanningInfoOrBuilder();

    /**
     * <pre>
     *TBOX扩展状态信息 实时信息 1s上报
     * </pre>
     *
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.statusKv status = 7;</code>
     */
    java.util.List<com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv> 
        getStatusList();
    /**
     * <pre>
     *TBOX扩展状态信息 实时信息 1s上报
     * </pre>
     *
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.statusKv status = 7;</code>
     */
    com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv getStatus(int index);
    /**
     * <pre>
     *TBOX扩展状态信息 实时信息 1s上报
     * </pre>
     *
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.statusKv status = 7;</code>
     */
    int getStatusCount();
    /**
     * <pre>
     *TBOX扩展状态信息 实时信息 1s上报
     * </pre>
     *
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.statusKv status = 7;</code>
     */
    java.util.List<? extends com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKvOrBuilder> 
        getStatusOrBuilderList();
    /**
     * <pre>
     *TBOX扩展状态信息 实时信息 1s上报
     * </pre>
     *
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.statusKv status = 7;</code>
     */
    com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKvOrBuilder getStatusOrBuilder(
        int index);

    /**
     * <pre>
     *多重协同信息     需要和事件发生时上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.MultiControlInfo multi_ctrl_info = 8;</code>
     * @return Whether the multiCtrlInfo field is set.
     */
    boolean hasMultiCtrlInfo();
    /**
     * <pre>
     *多重协同信息     需要和事件发生时上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.MultiControlInfo multi_ctrl_info = 8;</code>
     * @return The multiCtrlInfo.
     */
    com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo getMultiCtrlInfo();
    /**
     * <pre>
     *多重协同信息     需要和事件发生时上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.MultiControlInfo multi_ctrl_info = 8;</code>
     */
    com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfoOrBuilder getMultiCtrlInfoOrBuilder();

    /**
     * <pre>
     *底盘故障信息     需要和事件发生时上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisALarmInfo chassis_alarm_info = 9;</code>
     * @return Whether the chassisAlarmInfo field is set.
     */
    boolean hasChassisAlarmInfo();
    /**
     * <pre>
     *底盘故障信息     需要和事件发生时上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisALarmInfo chassis_alarm_info = 9;</code>
     * @return The chassisAlarmInfo.
     */
    com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo getChassisAlarmInfo();
    /**
     * <pre>
     *底盘故障信息     需要和事件发生时上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisALarmInfo chassis_alarm_info = 9;</code>
     */
    com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfoOrBuilder getChassisAlarmInfoOrBuilder();

    /**
     * <pre>
     *校准结果         需要和事件发生时上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationResult calibration_result = 10;</code>
     * @return Whether the calibrationResult field is set.
     */
    boolean hasCalibrationResult();
    /**
     * <pre>
     *校准结果         需要和事件发生时上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationResult calibration_result = 10;</code>
     * @return The calibrationResult.
     */
    com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult getCalibrationResult();
    /**
     * <pre>
     *校准结果         需要和事件发生时上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationResult calibration_result = 10;</code>
     */
    com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResultOrBuilder getCalibrationResultOrBuilder();

    /**
     * <pre>
     *存放车辆配件描述或字符信息   30s一次
     * </pre>
     *
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.InfoKv info = 12;</code>
     */
    java.util.List<com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv> 
        getInfoList();
    /**
     * <pre>
     *存放车辆配件描述或字符信息   30s一次
     * </pre>
     *
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.InfoKv info = 12;</code>
     */
    com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv getInfo(int index);
    /**
     * <pre>
     *存放车辆配件描述或字符信息   30s一次
     * </pre>
     *
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.InfoKv info = 12;</code>
     */
    int getInfoCount();
    /**
     * <pre>
     *存放车辆配件描述或字符信息   30s一次
     * </pre>
     *
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.InfoKv info = 12;</code>
     */
    java.util.List<? extends com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKvOrBuilder> 
        getInfoOrBuilderList();
    /**
     * <pre>
     *存放车辆配件描述或字符信息   30s一次
     * </pre>
     *
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.InfoKv info = 12;</code>
     */
    com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKvOrBuilder getInfoOrBuilder(
        int index);
  }
  /**
   * <pre>
   *############################################################################
   * </pre>
   *
   * Protobuf type {@code com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader}
   */
  public static final class DataUploader extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader)
      DataUploaderOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use DataUploader.newBuilder() to construct.
    private DataUploader(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DataUploader() {
      status_ = java.util.Collections.emptyList();
      info_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new DataUploader();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private DataUploader(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header.Builder subBuilder = null;
              if (header_ != null) {
                subBuilder = header_.toBuilder();
              }
              header_ = input.readMessage(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(header_);
                header_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path.Builder subBuilder = null;
              if (displayPath_ != null) {
                subBuilder = displayPath_.toBuilder();
              }
              displayPath_ = input.readMessage(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(displayPath_);
                displayPath_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo.Builder subBuilder = null;
              if (localizationInfo_ != null) {
                subBuilder = localizationInfo_.toBuilder();
              }
              localizationInfo_ = input.readMessage(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(localizationInfo_);
                localizationInfo_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo.Builder subBuilder = null;
              if (controlInfo_ != null) {
                subBuilder = controlInfo_.toBuilder();
              }
              controlInfo_ = input.readMessage(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(controlInfo_);
                controlInfo_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.Builder subBuilder = null;
              if (chassisInfo_ != null) {
                subBuilder = chassisInfo_.toBuilder();
              }
              chassisInfo_ = input.readMessage(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(chassisInfo_);
                chassisInfo_ = subBuilder.buildPartial();
              }

              break;
            }
            case 50: {
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo.Builder subBuilder = null;
              if (planningInfo_ != null) {
                subBuilder = planningInfo_.toBuilder();
              }
              planningInfo_ = input.readMessage(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(planningInfo_);
                planningInfo_ = subBuilder.buildPartial();
              }

              break;
            }
            case 58: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                status_ = new java.util.ArrayList<com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv>();
                mutable_bitField0_ |= 0x00000001;
              }
              status_.add(
                  input.readMessage(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv.parser(), extensionRegistry));
              break;
            }
            case 66: {
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo.Builder subBuilder = null;
              if (multiCtrlInfo_ != null) {
                subBuilder = multiCtrlInfo_.toBuilder();
              }
              multiCtrlInfo_ = input.readMessage(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(multiCtrlInfo_);
                multiCtrlInfo_ = subBuilder.buildPartial();
              }

              break;
            }
            case 74: {
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo.Builder subBuilder = null;
              if (chassisAlarmInfo_ != null) {
                subBuilder = chassisAlarmInfo_.toBuilder();
              }
              chassisAlarmInfo_ = input.readMessage(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(chassisAlarmInfo_);
                chassisAlarmInfo_ = subBuilder.buildPartial();
              }

              break;
            }
            case 82: {
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult.Builder subBuilder = null;
              if (calibrationResult_ != null) {
                subBuilder = calibrationResult_.toBuilder();
              }
              calibrationResult_ = input.readMessage(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(calibrationResult_);
                calibrationResult_ = subBuilder.buildPartial();
              }

              break;
            }
            case 98: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                info_ = new java.util.ArrayList<com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv>();
                mutable_bitField0_ |= 0x00000002;
              }
              info_.add(
                  input.readMessage(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          status_ = java.util.Collections.unmodifiableList(status_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          info_ = java.util.Collections.unmodifiableList(info_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_DataUploader_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_DataUploader_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.class, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.Builder.class);
    }

    public interface statusKvOrBuilder extends
        // @@protoc_insertion_point(interface_extends:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.statusKv)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>uint64 key = 1;</code>
       * @return The key.
       */
      long getKey();

      /**
       * <code>double value = 2;</code>
       * @return The value.
       */
      double getValue();
    }
    /**
     * Protobuf type {@code com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.statusKv}
     */
    public static final class statusKv extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.statusKv)
        statusKvOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use statusKv.newBuilder() to construct.
      private statusKv(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private statusKv() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new statusKv();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private statusKv(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {

                key_ = input.readUInt64();
                break;
              }
              case 17: {

                value_ = input.readDouble();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_DataUploader_statusKv_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_DataUploader_statusKv_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv.class, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv.Builder.class);
      }

      public static final int KEY_FIELD_NUMBER = 1;
      private long key_;
      /**
       * <code>uint64 key = 1;</code>
       * @return The key.
       */
      @java.lang.Override
      public long getKey() {
        return key_;
      }

      public static final int VALUE_FIELD_NUMBER = 2;
      private double value_;
      /**
       * <code>double value = 2;</code>
       * @return The value.
       */
      @java.lang.Override
      public double getValue() {
        return value_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (key_ != 0L) {
          output.writeUInt64(1, key_);
        }
        if (value_ != 0D) {
          output.writeDouble(2, value_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (key_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(1, key_);
        }
        if (value_ != 0D) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(2, value_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv)) {
          return super.equals(obj);
        }
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv other = (com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv) obj;

        if (getKey()
            != other.getKey()) return false;
        if (java.lang.Double.doubleToLongBits(getValue())
            != java.lang.Double.doubleToLongBits(
                other.getValue())) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + KEY_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getKey());
        hash = (37 * hash) + VALUE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getValue()));
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.statusKv}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.statusKv)
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKvOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_DataUploader_statusKv_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_DataUploader_statusKv_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv.class, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv.Builder.class);
        }

        // Construct using com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          key_ = 0L;

          value_ = 0D;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_DataUploader_statusKv_descriptor;
        }

        @java.lang.Override
        public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv getDefaultInstanceForType() {
          return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv.getDefaultInstance();
        }

        @java.lang.Override
        public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv build() {
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv buildPartial() {
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv result = new com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv(this);
          result.key_ = key_;
          result.value_ = value_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv) {
            return mergeFrom((com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv other) {
          if (other == com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv.getDefaultInstance()) return this;
          if (other.getKey() != 0L) {
            setKey(other.getKey());
          }
          if (other.getValue() != 0D) {
            setValue(other.getValue());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private long key_ ;
        /**
         * <code>uint64 key = 1;</code>
         * @return The key.
         */
        @java.lang.Override
        public long getKey() {
          return key_;
        }
        /**
         * <code>uint64 key = 1;</code>
         * @param value The key to set.
         * @return This builder for chaining.
         */
        public Builder setKey(long value) {
          
          key_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>uint64 key = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearKey() {
          
          key_ = 0L;
          onChanged();
          return this;
        }

        private double value_ ;
        /**
         * <code>double value = 2;</code>
         * @return The value.
         */
        @java.lang.Override
        public double getValue() {
          return value_;
        }
        /**
         * <code>double value = 2;</code>
         * @param value The value to set.
         * @return This builder for chaining.
         */
        public Builder setValue(double value) {
          
          value_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>double value = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearValue() {
          
          value_ = 0D;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.statusKv)
      }

      // @@protoc_insertion_point(class_scope:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.statusKv)
      private static final com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv();
      }

      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<statusKv>
          PARSER = new com.google.protobuf.AbstractParser<statusKv>() {
        @java.lang.Override
        public statusKv parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new statusKv(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<statusKv> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<statusKv> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface InfoKvOrBuilder extends
        // @@protoc_insertion_point(interface_extends:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.InfoKv)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>uint64 key = 1;</code>
       * @return The key.
       */
      long getKey();

      /**
       * <code>string value = 2;</code>
       * @return The value.
       */
      java.lang.String getValue();
      /**
       * <code>string value = 2;</code>
       * @return The bytes for value.
       */
      com.google.protobuf.ByteString
          getValueBytes();
    }
    /**
     * Protobuf type {@code com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.InfoKv}
     */
    public static final class InfoKv extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.InfoKv)
        InfoKvOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use InfoKv.newBuilder() to construct.
      private InfoKv(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private InfoKv() {
        value_ = "";
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new InfoKv();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private InfoKv(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {

                key_ = input.readUInt64();
                break;
              }
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();

                value_ = s;
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_DataUploader_InfoKv_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_DataUploader_InfoKv_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv.class, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv.Builder.class);
      }

      public static final int KEY_FIELD_NUMBER = 1;
      private long key_;
      /**
       * <code>uint64 key = 1;</code>
       * @return The key.
       */
      @java.lang.Override
      public long getKey() {
        return key_;
      }

      public static final int VALUE_FIELD_NUMBER = 2;
      private volatile java.lang.Object value_;
      /**
       * <code>string value = 2;</code>
       * @return The value.
       */
      @java.lang.Override
      public java.lang.String getValue() {
        java.lang.Object ref = value_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          value_ = s;
          return s;
        }
      }
      /**
       * <code>string value = 2;</code>
       * @return The bytes for value.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getValueBytes() {
        java.lang.Object ref = value_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          value_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (key_ != 0L) {
          output.writeUInt64(1, key_);
        }
        if (!getValueBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, value_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (key_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(1, key_);
        }
        if (!getValueBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, value_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv)) {
          return super.equals(obj);
        }
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv other = (com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv) obj;

        if (getKey()
            != other.getKey()) return false;
        if (!getValue()
            .equals(other.getValue())) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + KEY_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getKey());
        hash = (37 * hash) + VALUE_FIELD_NUMBER;
        hash = (53 * hash) + getValue().hashCode();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.InfoKv}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.InfoKv)
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKvOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_DataUploader_InfoKv_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_DataUploader_InfoKv_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv.class, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv.Builder.class);
        }

        // Construct using com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          key_ = 0L;

          value_ = "";

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_DataUploader_InfoKv_descriptor;
        }

        @java.lang.Override
        public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv getDefaultInstanceForType() {
          return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv.getDefaultInstance();
        }

        @java.lang.Override
        public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv build() {
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv buildPartial() {
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv result = new com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv(this);
          result.key_ = key_;
          result.value_ = value_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv) {
            return mergeFrom((com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv other) {
          if (other == com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv.getDefaultInstance()) return this;
          if (other.getKey() != 0L) {
            setKey(other.getKey());
          }
          if (!other.getValue().isEmpty()) {
            value_ = other.value_;
            onChanged();
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private long key_ ;
        /**
         * <code>uint64 key = 1;</code>
         * @return The key.
         */
        @java.lang.Override
        public long getKey() {
          return key_;
        }
        /**
         * <code>uint64 key = 1;</code>
         * @param value The key to set.
         * @return This builder for chaining.
         */
        public Builder setKey(long value) {
          
          key_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>uint64 key = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearKey() {
          
          key_ = 0L;
          onChanged();
          return this;
        }

        private java.lang.Object value_ = "";
        /**
         * <code>string value = 2;</code>
         * @return The value.
         */
        public java.lang.String getValue() {
          java.lang.Object ref = value_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            value_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string value = 2;</code>
         * @return The bytes for value.
         */
        public com.google.protobuf.ByteString
            getValueBytes() {
          java.lang.Object ref = value_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            value_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string value = 2;</code>
         * @param value The value to set.
         * @return This builder for chaining.
         */
        public Builder setValue(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          value_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string value = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearValue() {
          
          value_ = getDefaultInstance().getValue();
          onChanged();
          return this;
        }
        /**
         * <code>string value = 2;</code>
         * @param value The bytes for value to set.
         * @return This builder for chaining.
         */
        public Builder setValueBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          value_ = value;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.InfoKv)
      }

      // @@protoc_insertion_point(class_scope:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.InfoKv)
      private static final com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv();
      }

      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<InfoKv>
          PARSER = new com.google.protobuf.AbstractParser<InfoKv>() {
        @java.lang.Override
        public InfoKv parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new InfoKv(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<InfoKv> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<InfoKv> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int HEADER_FIELD_NUMBER = 1;
    private com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header header_;
    /**
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Header header = 1;</code>
     * @return Whether the header field is set.
     */
    @java.lang.Override
    public boolean hasHeader() {
      return header_ != null;
    }
    /**
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Header header = 1;</code>
     * @return The header.
     */
    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header getHeader() {
      return header_ == null ? com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header.getDefaultInstance() : header_;
    }
    /**
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Header header = 1;</code>
     */
    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.HeaderOrBuilder getHeaderOrBuilder() {
      return getHeader();
    }

    public static final int DISPLAY_PATH_FIELD_NUMBER = 2;
    private com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path displayPath_;
    /**
     * <pre>
     *显示路径 选用    实时信息 1s上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Path display_path = 2;</code>
     * @return Whether the displayPath field is set.
     */
    @java.lang.Override
    public boolean hasDisplayPath() {
      return displayPath_ != null;
    }
    /**
     * <pre>
     *显示路径 选用    实时信息 1s上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Path display_path = 2;</code>
     * @return The displayPath.
     */
    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path getDisplayPath() {
      return displayPath_ == null ? com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path.getDefaultInstance() : displayPath_;
    }
    /**
     * <pre>
     *显示路径 选用    实时信息 1s上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Path display_path = 2;</code>
     */
    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PathOrBuilder getDisplayPathOrBuilder() {
      return getDisplayPath();
    }

    public static final int LOCALIZATION_INFO_FIELD_NUMBER = 3;
    private com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo localizationInfo_;
    /**
     * <pre>
     *位置信息         实时信息 1s上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.LocalizationInfo localization_info = 3;</code>
     * @return Whether the localizationInfo field is set.
     */
    @java.lang.Override
    public boolean hasLocalizationInfo() {
      return localizationInfo_ != null;
    }
    /**
     * <pre>
     *位置信息         实时信息 1s上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.LocalizationInfo localization_info = 3;</code>
     * @return The localizationInfo.
     */
    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo getLocalizationInfo() {
      return localizationInfo_ == null ? com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo.getDefaultInstance() : localizationInfo_;
    }
    /**
     * <pre>
     *位置信息         实时信息 1s上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.LocalizationInfo localization_info = 3;</code>
     */
    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfoOrBuilder getLocalizationInfoOrBuilder() {
      return getLocalizationInfo();
    }

    public static final int CONTROL_INFO_FIELD_NUMBER = 4;
    private com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo controlInfo_;
    /**
     * <pre>
     *控制信息         实时信息 1s上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ControlInfo control_info = 4;</code>
     * @return Whether the controlInfo field is set.
     */
    @java.lang.Override
    public boolean hasControlInfo() {
      return controlInfo_ != null;
    }
    /**
     * <pre>
     *控制信息         实时信息 1s上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ControlInfo control_info = 4;</code>
     * @return The controlInfo.
     */
    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo getControlInfo() {
      return controlInfo_ == null ? com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo.getDefaultInstance() : controlInfo_;
    }
    /**
     * <pre>
     *控制信息         实时信息 1s上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ControlInfo control_info = 4;</code>
     */
    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfoOrBuilder getControlInfoOrBuilder() {
      return getControlInfo();
    }

    public static final int CHASSIS_INFO_FIELD_NUMBER = 5;
    private com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo chassisInfo_;
    /**
     * <pre>
     *底盘信息         实时信息 1s上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo chassis_info = 5;</code>
     * @return Whether the chassisInfo field is set.
     */
    @java.lang.Override
    public boolean hasChassisInfo() {
      return chassisInfo_ != null;
    }
    /**
     * <pre>
     *底盘信息         实时信息 1s上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo chassis_info = 5;</code>
     * @return The chassisInfo.
     */
    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo getChassisInfo() {
      return chassisInfo_ == null ? com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.getDefaultInstance() : chassisInfo_;
    }
    /**
     * <pre>
     *底盘信息         实时信息 1s上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo chassis_info = 5;</code>
     */
    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfoOrBuilder getChassisInfoOrBuilder() {
      return getChassisInfo();
    }

    public static final int PLANNING_INFO_FIELD_NUMBER = 6;
    private com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo planningInfo_;
    /**
     * <pre>
     *规划信息         实时信息 1s上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.PlanningInfo planning_info = 6;</code>
     * @return Whether the planningInfo field is set.
     */
    @java.lang.Override
    public boolean hasPlanningInfo() {
      return planningInfo_ != null;
    }
    /**
     * <pre>
     *规划信息         实时信息 1s上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.PlanningInfo planning_info = 6;</code>
     * @return The planningInfo.
     */
    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo getPlanningInfo() {
      return planningInfo_ == null ? com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo.getDefaultInstance() : planningInfo_;
    }
    /**
     * <pre>
     *规划信息         实时信息 1s上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.PlanningInfo planning_info = 6;</code>
     */
    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfoOrBuilder getPlanningInfoOrBuilder() {
      return getPlanningInfo();
    }

    public static final int STATUS_FIELD_NUMBER = 7;
    private java.util.List<com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv> status_;
    /**
     * <pre>
     *TBOX扩展状态信息 实时信息 1s上报
     * </pre>
     *
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.statusKv status = 7;</code>
     */
    @java.lang.Override
    public java.util.List<com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv> getStatusList() {
      return status_;
    }
    /**
     * <pre>
     *TBOX扩展状态信息 实时信息 1s上报
     * </pre>
     *
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.statusKv status = 7;</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKvOrBuilder> 
        getStatusOrBuilderList() {
      return status_;
    }
    /**
     * <pre>
     *TBOX扩展状态信息 实时信息 1s上报
     * </pre>
     *
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.statusKv status = 7;</code>
     */
    @java.lang.Override
    public int getStatusCount() {
      return status_.size();
    }
    /**
     * <pre>
     *TBOX扩展状态信息 实时信息 1s上报
     * </pre>
     *
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.statusKv status = 7;</code>
     */
    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv getStatus(int index) {
      return status_.get(index);
    }
    /**
     * <pre>
     *TBOX扩展状态信息 实时信息 1s上报
     * </pre>
     *
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.statusKv status = 7;</code>
     */
    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKvOrBuilder getStatusOrBuilder(
        int index) {
      return status_.get(index);
    }

    public static final int MULTI_CTRL_INFO_FIELD_NUMBER = 8;
    private com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo multiCtrlInfo_;
    /**
     * <pre>
     *多重协同信息     需要和事件发生时上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.MultiControlInfo multi_ctrl_info = 8;</code>
     * @return Whether the multiCtrlInfo field is set.
     */
    @java.lang.Override
    public boolean hasMultiCtrlInfo() {
      return multiCtrlInfo_ != null;
    }
    /**
     * <pre>
     *多重协同信息     需要和事件发生时上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.MultiControlInfo multi_ctrl_info = 8;</code>
     * @return The multiCtrlInfo.
     */
    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo getMultiCtrlInfo() {
      return multiCtrlInfo_ == null ? com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo.getDefaultInstance() : multiCtrlInfo_;
    }
    /**
     * <pre>
     *多重协同信息     需要和事件发生时上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.MultiControlInfo multi_ctrl_info = 8;</code>
     */
    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfoOrBuilder getMultiCtrlInfoOrBuilder() {
      return getMultiCtrlInfo();
    }

    public static final int CHASSIS_ALARM_INFO_FIELD_NUMBER = 9;
    private com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo chassisAlarmInfo_;
    /**
     * <pre>
     *底盘故障信息     需要和事件发生时上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisALarmInfo chassis_alarm_info = 9;</code>
     * @return Whether the chassisAlarmInfo field is set.
     */
    @java.lang.Override
    public boolean hasChassisAlarmInfo() {
      return chassisAlarmInfo_ != null;
    }
    /**
     * <pre>
     *底盘故障信息     需要和事件发生时上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisALarmInfo chassis_alarm_info = 9;</code>
     * @return The chassisAlarmInfo.
     */
    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo getChassisAlarmInfo() {
      return chassisAlarmInfo_ == null ? com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo.getDefaultInstance() : chassisAlarmInfo_;
    }
    /**
     * <pre>
     *底盘故障信息     需要和事件发生时上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisALarmInfo chassis_alarm_info = 9;</code>
     */
    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfoOrBuilder getChassisAlarmInfoOrBuilder() {
      return getChassisAlarmInfo();
    }

    public static final int CALIBRATION_RESULT_FIELD_NUMBER = 10;
    private com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult calibrationResult_;
    /**
     * <pre>
     *校准结果         需要和事件发生时上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationResult calibration_result = 10;</code>
     * @return Whether the calibrationResult field is set.
     */
    @java.lang.Override
    public boolean hasCalibrationResult() {
      return calibrationResult_ != null;
    }
    /**
     * <pre>
     *校准结果         需要和事件发生时上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationResult calibration_result = 10;</code>
     * @return The calibrationResult.
     */
    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult getCalibrationResult() {
      return calibrationResult_ == null ? com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult.getDefaultInstance() : calibrationResult_;
    }
    /**
     * <pre>
     *校准结果         需要和事件发生时上报
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationResult calibration_result = 10;</code>
     */
    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResultOrBuilder getCalibrationResultOrBuilder() {
      return getCalibrationResult();
    }

    public static final int INFO_FIELD_NUMBER = 12;
    private java.util.List<com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv> info_;
    /**
     * <pre>
     *存放车辆配件描述或字符信息   30s一次
     * </pre>
     *
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.InfoKv info = 12;</code>
     */
    @java.lang.Override
    public java.util.List<com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv> getInfoList() {
      return info_;
    }
    /**
     * <pre>
     *存放车辆配件描述或字符信息   30s一次
     * </pre>
     *
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.InfoKv info = 12;</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKvOrBuilder> 
        getInfoOrBuilderList() {
      return info_;
    }
    /**
     * <pre>
     *存放车辆配件描述或字符信息   30s一次
     * </pre>
     *
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.InfoKv info = 12;</code>
     */
    @java.lang.Override
    public int getInfoCount() {
      return info_.size();
    }
    /**
     * <pre>
     *存放车辆配件描述或字符信息   30s一次
     * </pre>
     *
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.InfoKv info = 12;</code>
     */
    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv getInfo(int index) {
      return info_.get(index);
    }
    /**
     * <pre>
     *存放车辆配件描述或字符信息   30s一次
     * </pre>
     *
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.InfoKv info = 12;</code>
     */
    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKvOrBuilder getInfoOrBuilder(
        int index) {
      return info_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (header_ != null) {
        output.writeMessage(1, getHeader());
      }
      if (displayPath_ != null) {
        output.writeMessage(2, getDisplayPath());
      }
      if (localizationInfo_ != null) {
        output.writeMessage(3, getLocalizationInfo());
      }
      if (controlInfo_ != null) {
        output.writeMessage(4, getControlInfo());
      }
      if (chassisInfo_ != null) {
        output.writeMessage(5, getChassisInfo());
      }
      if (planningInfo_ != null) {
        output.writeMessage(6, getPlanningInfo());
      }
      for (int i = 0; i < status_.size(); i++) {
        output.writeMessage(7, status_.get(i));
      }
      if (multiCtrlInfo_ != null) {
        output.writeMessage(8, getMultiCtrlInfo());
      }
      if (chassisAlarmInfo_ != null) {
        output.writeMessage(9, getChassisAlarmInfo());
      }
      if (calibrationResult_ != null) {
        output.writeMessage(10, getCalibrationResult());
      }
      for (int i = 0; i < info_.size(); i++) {
        output.writeMessage(12, info_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (header_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHeader());
      }
      if (displayPath_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getDisplayPath());
      }
      if (localizationInfo_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getLocalizationInfo());
      }
      if (controlInfo_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getControlInfo());
      }
      if (chassisInfo_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getChassisInfo());
      }
      if (planningInfo_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getPlanningInfo());
      }
      for (int i = 0; i < status_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, status_.get(i));
      }
      if (multiCtrlInfo_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getMultiCtrlInfo());
      }
      if (chassisAlarmInfo_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, getChassisAlarmInfo());
      }
      if (calibrationResult_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, getCalibrationResult());
      }
      for (int i = 0; i < info_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, info_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader)) {
        return super.equals(obj);
      }
      com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader other = (com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader) obj;

      if (hasHeader() != other.hasHeader()) return false;
      if (hasHeader()) {
        if (!getHeader()
            .equals(other.getHeader())) return false;
      }
      if (hasDisplayPath() != other.hasDisplayPath()) return false;
      if (hasDisplayPath()) {
        if (!getDisplayPath()
            .equals(other.getDisplayPath())) return false;
      }
      if (hasLocalizationInfo() != other.hasLocalizationInfo()) return false;
      if (hasLocalizationInfo()) {
        if (!getLocalizationInfo()
            .equals(other.getLocalizationInfo())) return false;
      }
      if (hasControlInfo() != other.hasControlInfo()) return false;
      if (hasControlInfo()) {
        if (!getControlInfo()
            .equals(other.getControlInfo())) return false;
      }
      if (hasChassisInfo() != other.hasChassisInfo()) return false;
      if (hasChassisInfo()) {
        if (!getChassisInfo()
            .equals(other.getChassisInfo())) return false;
      }
      if (hasPlanningInfo() != other.hasPlanningInfo()) return false;
      if (hasPlanningInfo()) {
        if (!getPlanningInfo()
            .equals(other.getPlanningInfo())) return false;
      }
      if (!getStatusList()
          .equals(other.getStatusList())) return false;
      if (hasMultiCtrlInfo() != other.hasMultiCtrlInfo()) return false;
      if (hasMultiCtrlInfo()) {
        if (!getMultiCtrlInfo()
            .equals(other.getMultiCtrlInfo())) return false;
      }
      if (hasChassisAlarmInfo() != other.hasChassisAlarmInfo()) return false;
      if (hasChassisAlarmInfo()) {
        if (!getChassisAlarmInfo()
            .equals(other.getChassisAlarmInfo())) return false;
      }
      if (hasCalibrationResult() != other.hasCalibrationResult()) return false;
      if (hasCalibrationResult()) {
        if (!getCalibrationResult()
            .equals(other.getCalibrationResult())) return false;
      }
      if (!getInfoList()
          .equals(other.getInfoList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasHeader()) {
        hash = (37 * hash) + HEADER_FIELD_NUMBER;
        hash = (53 * hash) + getHeader().hashCode();
      }
      if (hasDisplayPath()) {
        hash = (37 * hash) + DISPLAY_PATH_FIELD_NUMBER;
        hash = (53 * hash) + getDisplayPath().hashCode();
      }
      if (hasLocalizationInfo()) {
        hash = (37 * hash) + LOCALIZATION_INFO_FIELD_NUMBER;
        hash = (53 * hash) + getLocalizationInfo().hashCode();
      }
      if (hasControlInfo()) {
        hash = (37 * hash) + CONTROL_INFO_FIELD_NUMBER;
        hash = (53 * hash) + getControlInfo().hashCode();
      }
      if (hasChassisInfo()) {
        hash = (37 * hash) + CHASSIS_INFO_FIELD_NUMBER;
        hash = (53 * hash) + getChassisInfo().hashCode();
      }
      if (hasPlanningInfo()) {
        hash = (37 * hash) + PLANNING_INFO_FIELD_NUMBER;
        hash = (53 * hash) + getPlanningInfo().hashCode();
      }
      if (getStatusCount() > 0) {
        hash = (37 * hash) + STATUS_FIELD_NUMBER;
        hash = (53 * hash) + getStatusList().hashCode();
      }
      if (hasMultiCtrlInfo()) {
        hash = (37 * hash) + MULTI_CTRL_INFO_FIELD_NUMBER;
        hash = (53 * hash) + getMultiCtrlInfo().hashCode();
      }
      if (hasChassisAlarmInfo()) {
        hash = (37 * hash) + CHASSIS_ALARM_INFO_FIELD_NUMBER;
        hash = (53 * hash) + getChassisAlarmInfo().hashCode();
      }
      if (hasCalibrationResult()) {
        hash = (37 * hash) + CALIBRATION_RESULT_FIELD_NUMBER;
        hash = (53 * hash) + getCalibrationResult().hashCode();
      }
      if (getInfoCount() > 0) {
        hash = (37 * hash) + INFO_FIELD_NUMBER;
        hash = (53 * hash) + getInfoList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *############################################################################
     * </pre>
     *
     * Protobuf type {@code com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader)
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploaderOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_DataUploader_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_DataUploader_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.class, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.Builder.class);
      }

      // Construct using com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getStatusFieldBuilder();
          getInfoFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (headerBuilder_ == null) {
          header_ = null;
        } else {
          header_ = null;
          headerBuilder_ = null;
        }
        if (displayPathBuilder_ == null) {
          displayPath_ = null;
        } else {
          displayPath_ = null;
          displayPathBuilder_ = null;
        }
        if (localizationInfoBuilder_ == null) {
          localizationInfo_ = null;
        } else {
          localizationInfo_ = null;
          localizationInfoBuilder_ = null;
        }
        if (controlInfoBuilder_ == null) {
          controlInfo_ = null;
        } else {
          controlInfo_ = null;
          controlInfoBuilder_ = null;
        }
        if (chassisInfoBuilder_ == null) {
          chassisInfo_ = null;
        } else {
          chassisInfo_ = null;
          chassisInfoBuilder_ = null;
        }
        if (planningInfoBuilder_ == null) {
          planningInfo_ = null;
        } else {
          planningInfo_ = null;
          planningInfoBuilder_ = null;
        }
        if (statusBuilder_ == null) {
          status_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          statusBuilder_.clear();
        }
        if (multiCtrlInfoBuilder_ == null) {
          multiCtrlInfo_ = null;
        } else {
          multiCtrlInfo_ = null;
          multiCtrlInfoBuilder_ = null;
        }
        if (chassisAlarmInfoBuilder_ == null) {
          chassisAlarmInfo_ = null;
        } else {
          chassisAlarmInfo_ = null;
          chassisAlarmInfoBuilder_ = null;
        }
        if (calibrationResultBuilder_ == null) {
          calibrationResult_ = null;
        } else {
          calibrationResult_ = null;
          calibrationResultBuilder_ = null;
        }
        if (infoBuilder_ == null) {
          info_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          infoBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_DataUploader_descriptor;
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader getDefaultInstanceForType() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.getDefaultInstance();
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader build() {
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader buildPartial() {
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader result = new com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader(this);
        int from_bitField0_ = bitField0_;
        if (headerBuilder_ == null) {
          result.header_ = header_;
        } else {
          result.header_ = headerBuilder_.build();
        }
        if (displayPathBuilder_ == null) {
          result.displayPath_ = displayPath_;
        } else {
          result.displayPath_ = displayPathBuilder_.build();
        }
        if (localizationInfoBuilder_ == null) {
          result.localizationInfo_ = localizationInfo_;
        } else {
          result.localizationInfo_ = localizationInfoBuilder_.build();
        }
        if (controlInfoBuilder_ == null) {
          result.controlInfo_ = controlInfo_;
        } else {
          result.controlInfo_ = controlInfoBuilder_.build();
        }
        if (chassisInfoBuilder_ == null) {
          result.chassisInfo_ = chassisInfo_;
        } else {
          result.chassisInfo_ = chassisInfoBuilder_.build();
        }
        if (planningInfoBuilder_ == null) {
          result.planningInfo_ = planningInfo_;
        } else {
          result.planningInfo_ = planningInfoBuilder_.build();
        }
        if (statusBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            status_ = java.util.Collections.unmodifiableList(status_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.status_ = status_;
        } else {
          result.status_ = statusBuilder_.build();
        }
        if (multiCtrlInfoBuilder_ == null) {
          result.multiCtrlInfo_ = multiCtrlInfo_;
        } else {
          result.multiCtrlInfo_ = multiCtrlInfoBuilder_.build();
        }
        if (chassisAlarmInfoBuilder_ == null) {
          result.chassisAlarmInfo_ = chassisAlarmInfo_;
        } else {
          result.chassisAlarmInfo_ = chassisAlarmInfoBuilder_.build();
        }
        if (calibrationResultBuilder_ == null) {
          result.calibrationResult_ = calibrationResult_;
        } else {
          result.calibrationResult_ = calibrationResultBuilder_.build();
        }
        if (infoBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            info_ = java.util.Collections.unmodifiableList(info_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.info_ = info_;
        } else {
          result.info_ = infoBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader) {
          return mergeFrom((com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader other) {
        if (other == com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.getDefaultInstance()) return this;
        if (other.hasHeader()) {
          mergeHeader(other.getHeader());
        }
        if (other.hasDisplayPath()) {
          mergeDisplayPath(other.getDisplayPath());
        }
        if (other.hasLocalizationInfo()) {
          mergeLocalizationInfo(other.getLocalizationInfo());
        }
        if (other.hasControlInfo()) {
          mergeControlInfo(other.getControlInfo());
        }
        if (other.hasChassisInfo()) {
          mergeChassisInfo(other.getChassisInfo());
        }
        if (other.hasPlanningInfo()) {
          mergePlanningInfo(other.getPlanningInfo());
        }
        if (statusBuilder_ == null) {
          if (!other.status_.isEmpty()) {
            if (status_.isEmpty()) {
              status_ = other.status_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureStatusIsMutable();
              status_.addAll(other.status_);
            }
            onChanged();
          }
        } else {
          if (!other.status_.isEmpty()) {
            if (statusBuilder_.isEmpty()) {
              statusBuilder_.dispose();
              statusBuilder_ = null;
              status_ = other.status_;
              bitField0_ = (bitField0_ & ~0x00000001);
              statusBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getStatusFieldBuilder() : null;
            } else {
              statusBuilder_.addAllMessages(other.status_);
            }
          }
        }
        if (other.hasMultiCtrlInfo()) {
          mergeMultiCtrlInfo(other.getMultiCtrlInfo());
        }
        if (other.hasChassisAlarmInfo()) {
          mergeChassisAlarmInfo(other.getChassisAlarmInfo());
        }
        if (other.hasCalibrationResult()) {
          mergeCalibrationResult(other.getCalibrationResult());
        }
        if (infoBuilder_ == null) {
          if (!other.info_.isEmpty()) {
            if (info_.isEmpty()) {
              info_ = other.info_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureInfoIsMutable();
              info_.addAll(other.info_);
            }
            onChanged();
          }
        } else {
          if (!other.info_.isEmpty()) {
            if (infoBuilder_.isEmpty()) {
              infoBuilder_.dispose();
              infoBuilder_ = null;
              info_ = other.info_;
              bitField0_ = (bitField0_ & ~0x00000002);
              infoBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getInfoFieldBuilder() : null;
            } else {
              infoBuilder_.addAllMessages(other.info_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header header_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.HeaderOrBuilder> headerBuilder_;
      /**
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Header header = 1;</code>
       * @return Whether the header field is set.
       */
      public boolean hasHeader() {
        return headerBuilder_ != null || header_ != null;
      }
      /**
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Header header = 1;</code>
       * @return The header.
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header getHeader() {
        if (headerBuilder_ == null) {
          return header_ == null ? com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header.getDefaultInstance() : header_;
        } else {
          return headerBuilder_.getMessage();
        }
      }
      /**
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Header header = 1;</code>
       */
      public Builder setHeader(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header value) {
        if (headerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          header_ = value;
          onChanged();
        } else {
          headerBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Header header = 1;</code>
       */
      public Builder setHeader(
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header.Builder builderForValue) {
        if (headerBuilder_ == null) {
          header_ = builderForValue.build();
          onChanged();
        } else {
          headerBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Header header = 1;</code>
       */
      public Builder mergeHeader(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header value) {
        if (headerBuilder_ == null) {
          if (header_ != null) {
            header_ =
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header.newBuilder(header_).mergeFrom(value).buildPartial();
          } else {
            header_ = value;
          }
          onChanged();
        } else {
          headerBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Header header = 1;</code>
       */
      public Builder clearHeader() {
        if (headerBuilder_ == null) {
          header_ = null;
          onChanged();
        } else {
          header_ = null;
          headerBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Header header = 1;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header.Builder getHeaderBuilder() {
        
        onChanged();
        return getHeaderFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Header header = 1;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.HeaderOrBuilder getHeaderOrBuilder() {
        if (headerBuilder_ != null) {
          return headerBuilder_.getMessageOrBuilder();
        } else {
          return header_ == null ?
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header.getDefaultInstance() : header_;
        }
      }
      /**
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Header header = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.HeaderOrBuilder> 
          getHeaderFieldBuilder() {
        if (headerBuilder_ == null) {
          headerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.HeaderOrBuilder>(
                  getHeader(),
                  getParentForChildren(),
                  isClean());
          header_ = null;
        }
        return headerBuilder_;
      }

      private com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path displayPath_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PathOrBuilder> displayPathBuilder_;
      /**
       * <pre>
       *显示路径 选用    实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Path display_path = 2;</code>
       * @return Whether the displayPath field is set.
       */
      public boolean hasDisplayPath() {
        return displayPathBuilder_ != null || displayPath_ != null;
      }
      /**
       * <pre>
       *显示路径 选用    实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Path display_path = 2;</code>
       * @return The displayPath.
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path getDisplayPath() {
        if (displayPathBuilder_ == null) {
          return displayPath_ == null ? com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path.getDefaultInstance() : displayPath_;
        } else {
          return displayPathBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *显示路径 选用    实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Path display_path = 2;</code>
       */
      public Builder setDisplayPath(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path value) {
        if (displayPathBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          displayPath_ = value;
          onChanged();
        } else {
          displayPathBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *显示路径 选用    实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Path display_path = 2;</code>
       */
      public Builder setDisplayPath(
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path.Builder builderForValue) {
        if (displayPathBuilder_ == null) {
          displayPath_ = builderForValue.build();
          onChanged();
        } else {
          displayPathBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *显示路径 选用    实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Path display_path = 2;</code>
       */
      public Builder mergeDisplayPath(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path value) {
        if (displayPathBuilder_ == null) {
          if (displayPath_ != null) {
            displayPath_ =
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path.newBuilder(displayPath_).mergeFrom(value).buildPartial();
          } else {
            displayPath_ = value;
          }
          onChanged();
        } else {
          displayPathBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *显示路径 选用    实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Path display_path = 2;</code>
       */
      public Builder clearDisplayPath() {
        if (displayPathBuilder_ == null) {
          displayPath_ = null;
          onChanged();
        } else {
          displayPath_ = null;
          displayPathBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *显示路径 选用    实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Path display_path = 2;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path.Builder getDisplayPathBuilder() {
        
        onChanged();
        return getDisplayPathFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *显示路径 选用    实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Path display_path = 2;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PathOrBuilder getDisplayPathOrBuilder() {
        if (displayPathBuilder_ != null) {
          return displayPathBuilder_.getMessageOrBuilder();
        } else {
          return displayPath_ == null ?
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path.getDefaultInstance() : displayPath_;
        }
      }
      /**
       * <pre>
       *显示路径 选用    实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Path display_path = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PathOrBuilder> 
          getDisplayPathFieldBuilder() {
        if (displayPathBuilder_ == null) {
          displayPathBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PathOrBuilder>(
                  getDisplayPath(),
                  getParentForChildren(),
                  isClean());
          displayPath_ = null;
        }
        return displayPathBuilder_;
      }

      private com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo localizationInfo_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfoOrBuilder> localizationInfoBuilder_;
      /**
       * <pre>
       *位置信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.LocalizationInfo localization_info = 3;</code>
       * @return Whether the localizationInfo field is set.
       */
      public boolean hasLocalizationInfo() {
        return localizationInfoBuilder_ != null || localizationInfo_ != null;
      }
      /**
       * <pre>
       *位置信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.LocalizationInfo localization_info = 3;</code>
       * @return The localizationInfo.
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo getLocalizationInfo() {
        if (localizationInfoBuilder_ == null) {
          return localizationInfo_ == null ? com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo.getDefaultInstance() : localizationInfo_;
        } else {
          return localizationInfoBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *位置信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.LocalizationInfo localization_info = 3;</code>
       */
      public Builder setLocalizationInfo(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo value) {
        if (localizationInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          localizationInfo_ = value;
          onChanged();
        } else {
          localizationInfoBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *位置信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.LocalizationInfo localization_info = 3;</code>
       */
      public Builder setLocalizationInfo(
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo.Builder builderForValue) {
        if (localizationInfoBuilder_ == null) {
          localizationInfo_ = builderForValue.build();
          onChanged();
        } else {
          localizationInfoBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *位置信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.LocalizationInfo localization_info = 3;</code>
       */
      public Builder mergeLocalizationInfo(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo value) {
        if (localizationInfoBuilder_ == null) {
          if (localizationInfo_ != null) {
            localizationInfo_ =
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo.newBuilder(localizationInfo_).mergeFrom(value).buildPartial();
          } else {
            localizationInfo_ = value;
          }
          onChanged();
        } else {
          localizationInfoBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *位置信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.LocalizationInfo localization_info = 3;</code>
       */
      public Builder clearLocalizationInfo() {
        if (localizationInfoBuilder_ == null) {
          localizationInfo_ = null;
          onChanged();
        } else {
          localizationInfo_ = null;
          localizationInfoBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *位置信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.LocalizationInfo localization_info = 3;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo.Builder getLocalizationInfoBuilder() {
        
        onChanged();
        return getLocalizationInfoFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *位置信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.LocalizationInfo localization_info = 3;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfoOrBuilder getLocalizationInfoOrBuilder() {
        if (localizationInfoBuilder_ != null) {
          return localizationInfoBuilder_.getMessageOrBuilder();
        } else {
          return localizationInfo_ == null ?
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo.getDefaultInstance() : localizationInfo_;
        }
      }
      /**
       * <pre>
       *位置信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.LocalizationInfo localization_info = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfoOrBuilder> 
          getLocalizationInfoFieldBuilder() {
        if (localizationInfoBuilder_ == null) {
          localizationInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfoOrBuilder>(
                  getLocalizationInfo(),
                  getParentForChildren(),
                  isClean());
          localizationInfo_ = null;
        }
        return localizationInfoBuilder_;
      }

      private com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo controlInfo_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfoOrBuilder> controlInfoBuilder_;
      /**
       * <pre>
       *控制信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ControlInfo control_info = 4;</code>
       * @return Whether the controlInfo field is set.
       */
      public boolean hasControlInfo() {
        return controlInfoBuilder_ != null || controlInfo_ != null;
      }
      /**
       * <pre>
       *控制信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ControlInfo control_info = 4;</code>
       * @return The controlInfo.
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo getControlInfo() {
        if (controlInfoBuilder_ == null) {
          return controlInfo_ == null ? com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo.getDefaultInstance() : controlInfo_;
        } else {
          return controlInfoBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *控制信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ControlInfo control_info = 4;</code>
       */
      public Builder setControlInfo(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo value) {
        if (controlInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          controlInfo_ = value;
          onChanged();
        } else {
          controlInfoBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *控制信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ControlInfo control_info = 4;</code>
       */
      public Builder setControlInfo(
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo.Builder builderForValue) {
        if (controlInfoBuilder_ == null) {
          controlInfo_ = builderForValue.build();
          onChanged();
        } else {
          controlInfoBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *控制信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ControlInfo control_info = 4;</code>
       */
      public Builder mergeControlInfo(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo value) {
        if (controlInfoBuilder_ == null) {
          if (controlInfo_ != null) {
            controlInfo_ =
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo.newBuilder(controlInfo_).mergeFrom(value).buildPartial();
          } else {
            controlInfo_ = value;
          }
          onChanged();
        } else {
          controlInfoBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *控制信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ControlInfo control_info = 4;</code>
       */
      public Builder clearControlInfo() {
        if (controlInfoBuilder_ == null) {
          controlInfo_ = null;
          onChanged();
        } else {
          controlInfo_ = null;
          controlInfoBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *控制信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ControlInfo control_info = 4;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo.Builder getControlInfoBuilder() {
        
        onChanged();
        return getControlInfoFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *控制信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ControlInfo control_info = 4;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfoOrBuilder getControlInfoOrBuilder() {
        if (controlInfoBuilder_ != null) {
          return controlInfoBuilder_.getMessageOrBuilder();
        } else {
          return controlInfo_ == null ?
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo.getDefaultInstance() : controlInfo_;
        }
      }
      /**
       * <pre>
       *控制信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ControlInfo control_info = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfoOrBuilder> 
          getControlInfoFieldBuilder() {
        if (controlInfoBuilder_ == null) {
          controlInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfoOrBuilder>(
                  getControlInfo(),
                  getParentForChildren(),
                  isClean());
          controlInfo_ = null;
        }
        return controlInfoBuilder_;
      }

      private com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo chassisInfo_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfoOrBuilder> chassisInfoBuilder_;
      /**
       * <pre>
       *底盘信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo chassis_info = 5;</code>
       * @return Whether the chassisInfo field is set.
       */
      public boolean hasChassisInfo() {
        return chassisInfoBuilder_ != null || chassisInfo_ != null;
      }
      /**
       * <pre>
       *底盘信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo chassis_info = 5;</code>
       * @return The chassisInfo.
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo getChassisInfo() {
        if (chassisInfoBuilder_ == null) {
          return chassisInfo_ == null ? com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.getDefaultInstance() : chassisInfo_;
        } else {
          return chassisInfoBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *底盘信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo chassis_info = 5;</code>
       */
      public Builder setChassisInfo(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo value) {
        if (chassisInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          chassisInfo_ = value;
          onChanged();
        } else {
          chassisInfoBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *底盘信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo chassis_info = 5;</code>
       */
      public Builder setChassisInfo(
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.Builder builderForValue) {
        if (chassisInfoBuilder_ == null) {
          chassisInfo_ = builderForValue.build();
          onChanged();
        } else {
          chassisInfoBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *底盘信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo chassis_info = 5;</code>
       */
      public Builder mergeChassisInfo(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo value) {
        if (chassisInfoBuilder_ == null) {
          if (chassisInfo_ != null) {
            chassisInfo_ =
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.newBuilder(chassisInfo_).mergeFrom(value).buildPartial();
          } else {
            chassisInfo_ = value;
          }
          onChanged();
        } else {
          chassisInfoBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *底盘信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo chassis_info = 5;</code>
       */
      public Builder clearChassisInfo() {
        if (chassisInfoBuilder_ == null) {
          chassisInfo_ = null;
          onChanged();
        } else {
          chassisInfo_ = null;
          chassisInfoBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *底盘信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo chassis_info = 5;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.Builder getChassisInfoBuilder() {
        
        onChanged();
        return getChassisInfoFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *底盘信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo chassis_info = 5;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfoOrBuilder getChassisInfoOrBuilder() {
        if (chassisInfoBuilder_ != null) {
          return chassisInfoBuilder_.getMessageOrBuilder();
        } else {
          return chassisInfo_ == null ?
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.getDefaultInstance() : chassisInfo_;
        }
      }
      /**
       * <pre>
       *底盘信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo chassis_info = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfoOrBuilder> 
          getChassisInfoFieldBuilder() {
        if (chassisInfoBuilder_ == null) {
          chassisInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfoOrBuilder>(
                  getChassisInfo(),
                  getParentForChildren(),
                  isClean());
          chassisInfo_ = null;
        }
        return chassisInfoBuilder_;
      }

      private com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo planningInfo_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfoOrBuilder> planningInfoBuilder_;
      /**
       * <pre>
       *规划信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.PlanningInfo planning_info = 6;</code>
       * @return Whether the planningInfo field is set.
       */
      public boolean hasPlanningInfo() {
        return planningInfoBuilder_ != null || planningInfo_ != null;
      }
      /**
       * <pre>
       *规划信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.PlanningInfo planning_info = 6;</code>
       * @return The planningInfo.
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo getPlanningInfo() {
        if (planningInfoBuilder_ == null) {
          return planningInfo_ == null ? com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo.getDefaultInstance() : planningInfo_;
        } else {
          return planningInfoBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *规划信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.PlanningInfo planning_info = 6;</code>
       */
      public Builder setPlanningInfo(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo value) {
        if (planningInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          planningInfo_ = value;
          onChanged();
        } else {
          planningInfoBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *规划信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.PlanningInfo planning_info = 6;</code>
       */
      public Builder setPlanningInfo(
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo.Builder builderForValue) {
        if (planningInfoBuilder_ == null) {
          planningInfo_ = builderForValue.build();
          onChanged();
        } else {
          planningInfoBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *规划信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.PlanningInfo planning_info = 6;</code>
       */
      public Builder mergePlanningInfo(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo value) {
        if (planningInfoBuilder_ == null) {
          if (planningInfo_ != null) {
            planningInfo_ =
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo.newBuilder(planningInfo_).mergeFrom(value).buildPartial();
          } else {
            planningInfo_ = value;
          }
          onChanged();
        } else {
          planningInfoBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *规划信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.PlanningInfo planning_info = 6;</code>
       */
      public Builder clearPlanningInfo() {
        if (planningInfoBuilder_ == null) {
          planningInfo_ = null;
          onChanged();
        } else {
          planningInfo_ = null;
          planningInfoBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *规划信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.PlanningInfo planning_info = 6;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo.Builder getPlanningInfoBuilder() {
        
        onChanged();
        return getPlanningInfoFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *规划信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.PlanningInfo planning_info = 6;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfoOrBuilder getPlanningInfoOrBuilder() {
        if (planningInfoBuilder_ != null) {
          return planningInfoBuilder_.getMessageOrBuilder();
        } else {
          return planningInfo_ == null ?
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo.getDefaultInstance() : planningInfo_;
        }
      }
      /**
       * <pre>
       *规划信息         实时信息 1s上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.PlanningInfo planning_info = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfoOrBuilder> 
          getPlanningInfoFieldBuilder() {
        if (planningInfoBuilder_ == null) {
          planningInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfoOrBuilder>(
                  getPlanningInfo(),
                  getParentForChildren(),
                  isClean());
          planningInfo_ = null;
        }
        return planningInfoBuilder_;
      }

      private java.util.List<com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv> status_ =
        java.util.Collections.emptyList();
      private void ensureStatusIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          status_ = new java.util.ArrayList<com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv>(status_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKvOrBuilder> statusBuilder_;

      /**
       * <pre>
       *TBOX扩展状态信息 实时信息 1s上报
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.statusKv status = 7;</code>
       */
      public java.util.List<com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv> getStatusList() {
        if (statusBuilder_ == null) {
          return java.util.Collections.unmodifiableList(status_);
        } else {
          return statusBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       *TBOX扩展状态信息 实时信息 1s上报
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.statusKv status = 7;</code>
       */
      public int getStatusCount() {
        if (statusBuilder_ == null) {
          return status_.size();
        } else {
          return statusBuilder_.getCount();
        }
      }
      /**
       * <pre>
       *TBOX扩展状态信息 实时信息 1s上报
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.statusKv status = 7;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv getStatus(int index) {
        if (statusBuilder_ == null) {
          return status_.get(index);
        } else {
          return statusBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       *TBOX扩展状态信息 实时信息 1s上报
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.statusKv status = 7;</code>
       */
      public Builder setStatus(
          int index, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv value) {
        if (statusBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatusIsMutable();
          status_.set(index, value);
          onChanged();
        } else {
          statusBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *TBOX扩展状态信息 实时信息 1s上报
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.statusKv status = 7;</code>
       */
      public Builder setStatus(
          int index, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv.Builder builderForValue) {
        if (statusBuilder_ == null) {
          ensureStatusIsMutable();
          status_.set(index, builderForValue.build());
          onChanged();
        } else {
          statusBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *TBOX扩展状态信息 实时信息 1s上报
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.statusKv status = 7;</code>
       */
      public Builder addStatus(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv value) {
        if (statusBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatusIsMutable();
          status_.add(value);
          onChanged();
        } else {
          statusBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       *TBOX扩展状态信息 实时信息 1s上报
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.statusKv status = 7;</code>
       */
      public Builder addStatus(
          int index, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv value) {
        if (statusBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatusIsMutable();
          status_.add(index, value);
          onChanged();
        } else {
          statusBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *TBOX扩展状态信息 实时信息 1s上报
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.statusKv status = 7;</code>
       */
      public Builder addStatus(
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv.Builder builderForValue) {
        if (statusBuilder_ == null) {
          ensureStatusIsMutable();
          status_.add(builderForValue.build());
          onChanged();
        } else {
          statusBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *TBOX扩展状态信息 实时信息 1s上报
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.statusKv status = 7;</code>
       */
      public Builder addStatus(
          int index, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv.Builder builderForValue) {
        if (statusBuilder_ == null) {
          ensureStatusIsMutable();
          status_.add(index, builderForValue.build());
          onChanged();
        } else {
          statusBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *TBOX扩展状态信息 实时信息 1s上报
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.statusKv status = 7;</code>
       */
      public Builder addAllStatus(
          java.lang.Iterable<? extends com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv> values) {
        if (statusBuilder_ == null) {
          ensureStatusIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, status_);
          onChanged();
        } else {
          statusBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       *TBOX扩展状态信息 实时信息 1s上报
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.statusKv status = 7;</code>
       */
      public Builder clearStatus() {
        if (statusBuilder_ == null) {
          status_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          statusBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       *TBOX扩展状态信息 实时信息 1s上报
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.statusKv status = 7;</code>
       */
      public Builder removeStatus(int index) {
        if (statusBuilder_ == null) {
          ensureStatusIsMutable();
          status_.remove(index);
          onChanged();
        } else {
          statusBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       *TBOX扩展状态信息 实时信息 1s上报
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.statusKv status = 7;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv.Builder getStatusBuilder(
          int index) {
        return getStatusFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       *TBOX扩展状态信息 实时信息 1s上报
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.statusKv status = 7;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKvOrBuilder getStatusOrBuilder(
          int index) {
        if (statusBuilder_ == null) {
          return status_.get(index);  } else {
          return statusBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       *TBOX扩展状态信息 实时信息 1s上报
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.statusKv status = 7;</code>
       */
      public java.util.List<? extends com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKvOrBuilder> 
           getStatusOrBuilderList() {
        if (statusBuilder_ != null) {
          return statusBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(status_);
        }
      }
      /**
       * <pre>
       *TBOX扩展状态信息 实时信息 1s上报
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.statusKv status = 7;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv.Builder addStatusBuilder() {
        return getStatusFieldBuilder().addBuilder(
            com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv.getDefaultInstance());
      }
      /**
       * <pre>
       *TBOX扩展状态信息 实时信息 1s上报
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.statusKv status = 7;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv.Builder addStatusBuilder(
          int index) {
        return getStatusFieldBuilder().addBuilder(
            index, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv.getDefaultInstance());
      }
      /**
       * <pre>
       *TBOX扩展状态信息 实时信息 1s上报
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.statusKv status = 7;</code>
       */
      public java.util.List<com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv.Builder> 
           getStatusBuilderList() {
        return getStatusFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKvOrBuilder> 
          getStatusFieldBuilder() {
        if (statusBuilder_ == null) {
          statusBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKv.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.statusKvOrBuilder>(
                  status_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          status_ = null;
        }
        return statusBuilder_;
      }

      private com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo multiCtrlInfo_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfoOrBuilder> multiCtrlInfoBuilder_;
      /**
       * <pre>
       *多重协同信息     需要和事件发生时上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.MultiControlInfo multi_ctrl_info = 8;</code>
       * @return Whether the multiCtrlInfo field is set.
       */
      public boolean hasMultiCtrlInfo() {
        return multiCtrlInfoBuilder_ != null || multiCtrlInfo_ != null;
      }
      /**
       * <pre>
       *多重协同信息     需要和事件发生时上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.MultiControlInfo multi_ctrl_info = 8;</code>
       * @return The multiCtrlInfo.
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo getMultiCtrlInfo() {
        if (multiCtrlInfoBuilder_ == null) {
          return multiCtrlInfo_ == null ? com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo.getDefaultInstance() : multiCtrlInfo_;
        } else {
          return multiCtrlInfoBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *多重协同信息     需要和事件发生时上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.MultiControlInfo multi_ctrl_info = 8;</code>
       */
      public Builder setMultiCtrlInfo(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo value) {
        if (multiCtrlInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          multiCtrlInfo_ = value;
          onChanged();
        } else {
          multiCtrlInfoBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *多重协同信息     需要和事件发生时上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.MultiControlInfo multi_ctrl_info = 8;</code>
       */
      public Builder setMultiCtrlInfo(
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo.Builder builderForValue) {
        if (multiCtrlInfoBuilder_ == null) {
          multiCtrlInfo_ = builderForValue.build();
          onChanged();
        } else {
          multiCtrlInfoBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *多重协同信息     需要和事件发生时上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.MultiControlInfo multi_ctrl_info = 8;</code>
       */
      public Builder mergeMultiCtrlInfo(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo value) {
        if (multiCtrlInfoBuilder_ == null) {
          if (multiCtrlInfo_ != null) {
            multiCtrlInfo_ =
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo.newBuilder(multiCtrlInfo_).mergeFrom(value).buildPartial();
          } else {
            multiCtrlInfo_ = value;
          }
          onChanged();
        } else {
          multiCtrlInfoBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *多重协同信息     需要和事件发生时上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.MultiControlInfo multi_ctrl_info = 8;</code>
       */
      public Builder clearMultiCtrlInfo() {
        if (multiCtrlInfoBuilder_ == null) {
          multiCtrlInfo_ = null;
          onChanged();
        } else {
          multiCtrlInfo_ = null;
          multiCtrlInfoBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *多重协同信息     需要和事件发生时上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.MultiControlInfo multi_ctrl_info = 8;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo.Builder getMultiCtrlInfoBuilder() {
        
        onChanged();
        return getMultiCtrlInfoFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *多重协同信息     需要和事件发生时上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.MultiControlInfo multi_ctrl_info = 8;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfoOrBuilder getMultiCtrlInfoOrBuilder() {
        if (multiCtrlInfoBuilder_ != null) {
          return multiCtrlInfoBuilder_.getMessageOrBuilder();
        } else {
          return multiCtrlInfo_ == null ?
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo.getDefaultInstance() : multiCtrlInfo_;
        }
      }
      /**
       * <pre>
       *多重协同信息     需要和事件发生时上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.MultiControlInfo multi_ctrl_info = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfoOrBuilder> 
          getMultiCtrlInfoFieldBuilder() {
        if (multiCtrlInfoBuilder_ == null) {
          multiCtrlInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfoOrBuilder>(
                  getMultiCtrlInfo(),
                  getParentForChildren(),
                  isClean());
          multiCtrlInfo_ = null;
        }
        return multiCtrlInfoBuilder_;
      }

      private com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo chassisAlarmInfo_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfoOrBuilder> chassisAlarmInfoBuilder_;
      /**
       * <pre>
       *底盘故障信息     需要和事件发生时上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisALarmInfo chassis_alarm_info = 9;</code>
       * @return Whether the chassisAlarmInfo field is set.
       */
      public boolean hasChassisAlarmInfo() {
        return chassisAlarmInfoBuilder_ != null || chassisAlarmInfo_ != null;
      }
      /**
       * <pre>
       *底盘故障信息     需要和事件发生时上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisALarmInfo chassis_alarm_info = 9;</code>
       * @return The chassisAlarmInfo.
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo getChassisAlarmInfo() {
        if (chassisAlarmInfoBuilder_ == null) {
          return chassisAlarmInfo_ == null ? com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo.getDefaultInstance() : chassisAlarmInfo_;
        } else {
          return chassisAlarmInfoBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *底盘故障信息     需要和事件发生时上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisALarmInfo chassis_alarm_info = 9;</code>
       */
      public Builder setChassisAlarmInfo(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo value) {
        if (chassisAlarmInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          chassisAlarmInfo_ = value;
          onChanged();
        } else {
          chassisAlarmInfoBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *底盘故障信息     需要和事件发生时上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisALarmInfo chassis_alarm_info = 9;</code>
       */
      public Builder setChassisAlarmInfo(
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo.Builder builderForValue) {
        if (chassisAlarmInfoBuilder_ == null) {
          chassisAlarmInfo_ = builderForValue.build();
          onChanged();
        } else {
          chassisAlarmInfoBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *底盘故障信息     需要和事件发生时上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisALarmInfo chassis_alarm_info = 9;</code>
       */
      public Builder mergeChassisAlarmInfo(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo value) {
        if (chassisAlarmInfoBuilder_ == null) {
          if (chassisAlarmInfo_ != null) {
            chassisAlarmInfo_ =
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo.newBuilder(chassisAlarmInfo_).mergeFrom(value).buildPartial();
          } else {
            chassisAlarmInfo_ = value;
          }
          onChanged();
        } else {
          chassisAlarmInfoBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *底盘故障信息     需要和事件发生时上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisALarmInfo chassis_alarm_info = 9;</code>
       */
      public Builder clearChassisAlarmInfo() {
        if (chassisAlarmInfoBuilder_ == null) {
          chassisAlarmInfo_ = null;
          onChanged();
        } else {
          chassisAlarmInfo_ = null;
          chassisAlarmInfoBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *底盘故障信息     需要和事件发生时上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisALarmInfo chassis_alarm_info = 9;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo.Builder getChassisAlarmInfoBuilder() {
        
        onChanged();
        return getChassisAlarmInfoFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *底盘故障信息     需要和事件发生时上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisALarmInfo chassis_alarm_info = 9;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfoOrBuilder getChassisAlarmInfoOrBuilder() {
        if (chassisAlarmInfoBuilder_ != null) {
          return chassisAlarmInfoBuilder_.getMessageOrBuilder();
        } else {
          return chassisAlarmInfo_ == null ?
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo.getDefaultInstance() : chassisAlarmInfo_;
        }
      }
      /**
       * <pre>
       *底盘故障信息     需要和事件发生时上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisALarmInfo chassis_alarm_info = 9;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfoOrBuilder> 
          getChassisAlarmInfoFieldBuilder() {
        if (chassisAlarmInfoBuilder_ == null) {
          chassisAlarmInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfoOrBuilder>(
                  getChassisAlarmInfo(),
                  getParentForChildren(),
                  isClean());
          chassisAlarmInfo_ = null;
        }
        return chassisAlarmInfoBuilder_;
      }

      private com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult calibrationResult_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResultOrBuilder> calibrationResultBuilder_;
      /**
       * <pre>
       *校准结果         需要和事件发生时上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationResult calibration_result = 10;</code>
       * @return Whether the calibrationResult field is set.
       */
      public boolean hasCalibrationResult() {
        return calibrationResultBuilder_ != null || calibrationResult_ != null;
      }
      /**
       * <pre>
       *校准结果         需要和事件发生时上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationResult calibration_result = 10;</code>
       * @return The calibrationResult.
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult getCalibrationResult() {
        if (calibrationResultBuilder_ == null) {
          return calibrationResult_ == null ? com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult.getDefaultInstance() : calibrationResult_;
        } else {
          return calibrationResultBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *校准结果         需要和事件发生时上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationResult calibration_result = 10;</code>
       */
      public Builder setCalibrationResult(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult value) {
        if (calibrationResultBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          calibrationResult_ = value;
          onChanged();
        } else {
          calibrationResultBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *校准结果         需要和事件发生时上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationResult calibration_result = 10;</code>
       */
      public Builder setCalibrationResult(
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult.Builder builderForValue) {
        if (calibrationResultBuilder_ == null) {
          calibrationResult_ = builderForValue.build();
          onChanged();
        } else {
          calibrationResultBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *校准结果         需要和事件发生时上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationResult calibration_result = 10;</code>
       */
      public Builder mergeCalibrationResult(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult value) {
        if (calibrationResultBuilder_ == null) {
          if (calibrationResult_ != null) {
            calibrationResult_ =
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult.newBuilder(calibrationResult_).mergeFrom(value).buildPartial();
          } else {
            calibrationResult_ = value;
          }
          onChanged();
        } else {
          calibrationResultBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *校准结果         需要和事件发生时上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationResult calibration_result = 10;</code>
       */
      public Builder clearCalibrationResult() {
        if (calibrationResultBuilder_ == null) {
          calibrationResult_ = null;
          onChanged();
        } else {
          calibrationResult_ = null;
          calibrationResultBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *校准结果         需要和事件发生时上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationResult calibration_result = 10;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult.Builder getCalibrationResultBuilder() {
        
        onChanged();
        return getCalibrationResultFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *校准结果         需要和事件发生时上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationResult calibration_result = 10;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResultOrBuilder getCalibrationResultOrBuilder() {
        if (calibrationResultBuilder_ != null) {
          return calibrationResultBuilder_.getMessageOrBuilder();
        } else {
          return calibrationResult_ == null ?
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult.getDefaultInstance() : calibrationResult_;
        }
      }
      /**
       * <pre>
       *校准结果         需要和事件发生时上报
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationResult calibration_result = 10;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResultOrBuilder> 
          getCalibrationResultFieldBuilder() {
        if (calibrationResultBuilder_ == null) {
          calibrationResultBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResultOrBuilder>(
                  getCalibrationResult(),
                  getParentForChildren(),
                  isClean());
          calibrationResult_ = null;
        }
        return calibrationResultBuilder_;
      }

      private java.util.List<com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv> info_ =
        java.util.Collections.emptyList();
      private void ensureInfoIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          info_ = new java.util.ArrayList<com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv>(info_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKvOrBuilder> infoBuilder_;

      /**
       * <pre>
       *存放车辆配件描述或字符信息   30s一次
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.InfoKv info = 12;</code>
       */
      public java.util.List<com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv> getInfoList() {
        if (infoBuilder_ == null) {
          return java.util.Collections.unmodifiableList(info_);
        } else {
          return infoBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       *存放车辆配件描述或字符信息   30s一次
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.InfoKv info = 12;</code>
       */
      public int getInfoCount() {
        if (infoBuilder_ == null) {
          return info_.size();
        } else {
          return infoBuilder_.getCount();
        }
      }
      /**
       * <pre>
       *存放车辆配件描述或字符信息   30s一次
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.InfoKv info = 12;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv getInfo(int index) {
        if (infoBuilder_ == null) {
          return info_.get(index);
        } else {
          return infoBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       *存放车辆配件描述或字符信息   30s一次
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.InfoKv info = 12;</code>
       */
      public Builder setInfo(
          int index, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv value) {
        if (infoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInfoIsMutable();
          info_.set(index, value);
          onChanged();
        } else {
          infoBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *存放车辆配件描述或字符信息   30s一次
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.InfoKv info = 12;</code>
       */
      public Builder setInfo(
          int index, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv.Builder builderForValue) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.set(index, builderForValue.build());
          onChanged();
        } else {
          infoBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *存放车辆配件描述或字符信息   30s一次
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.InfoKv info = 12;</code>
       */
      public Builder addInfo(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv value) {
        if (infoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInfoIsMutable();
          info_.add(value);
          onChanged();
        } else {
          infoBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       *存放车辆配件描述或字符信息   30s一次
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.InfoKv info = 12;</code>
       */
      public Builder addInfo(
          int index, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv value) {
        if (infoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInfoIsMutable();
          info_.add(index, value);
          onChanged();
        } else {
          infoBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *存放车辆配件描述或字符信息   30s一次
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.InfoKv info = 12;</code>
       */
      public Builder addInfo(
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv.Builder builderForValue) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.add(builderForValue.build());
          onChanged();
        } else {
          infoBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *存放车辆配件描述或字符信息   30s一次
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.InfoKv info = 12;</code>
       */
      public Builder addInfo(
          int index, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv.Builder builderForValue) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.add(index, builderForValue.build());
          onChanged();
        } else {
          infoBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *存放车辆配件描述或字符信息   30s一次
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.InfoKv info = 12;</code>
       */
      public Builder addAllInfo(
          java.lang.Iterable<? extends com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv> values) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, info_);
          onChanged();
        } else {
          infoBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       *存放车辆配件描述或字符信息   30s一次
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.InfoKv info = 12;</code>
       */
      public Builder clearInfo() {
        if (infoBuilder_ == null) {
          info_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          infoBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       *存放车辆配件描述或字符信息   30s一次
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.InfoKv info = 12;</code>
       */
      public Builder removeInfo(int index) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.remove(index);
          onChanged();
        } else {
          infoBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       *存放车辆配件描述或字符信息   30s一次
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.InfoKv info = 12;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv.Builder getInfoBuilder(
          int index) {
        return getInfoFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       *存放车辆配件描述或字符信息   30s一次
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.InfoKv info = 12;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKvOrBuilder getInfoOrBuilder(
          int index) {
        if (infoBuilder_ == null) {
          return info_.get(index);  } else {
          return infoBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       *存放车辆配件描述或字符信息   30s一次
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.InfoKv info = 12;</code>
       */
      public java.util.List<? extends com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKvOrBuilder> 
           getInfoOrBuilderList() {
        if (infoBuilder_ != null) {
          return infoBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(info_);
        }
      }
      /**
       * <pre>
       *存放车辆配件描述或字符信息   30s一次
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.InfoKv info = 12;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv.Builder addInfoBuilder() {
        return getInfoFieldBuilder().addBuilder(
            com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv.getDefaultInstance());
      }
      /**
       * <pre>
       *存放车辆配件描述或字符信息   30s一次
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.InfoKv info = 12;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv.Builder addInfoBuilder(
          int index) {
        return getInfoFieldBuilder().addBuilder(
            index, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv.getDefaultInstance());
      }
      /**
       * <pre>
       *存放车辆配件描述或字符信息   30s一次
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader.InfoKv info = 12;</code>
       */
      public java.util.List<com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv.Builder> 
           getInfoBuilderList() {
        return getInfoFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKvOrBuilder> 
          getInfoFieldBuilder() {
        if (infoBuilder_ == null) {
          infoBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKv.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader.InfoKvOrBuilder>(
                  info_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          info_ = null;
        }
        return infoBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader)
    }

    // @@protoc_insertion_point(class_scope:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploader)
    private static final com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader();
    }

    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DataUploader>
        PARSER = new com.google.protobuf.AbstractParser<DataUploader>() {
      @java.lang.Override
      public DataUploader parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DataUploader(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DataUploader> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DataUploader> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.DataUploader getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface HeaderOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Header)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *数据上报协议版本信息
     * </pre>
     *
     * <code>uint32 version = 1;</code>
     * @return The version.
     */
    int getVersion();

    /**
     * <pre>
     *时间戳，精确到ms
     * </pre>
     *
     * <code>uint64 unix_timestamp = 2;</code>
     * @return The unixTimestamp.
     */
    long getUnixTimestamp();

    /**
     * <pre>
     *消息序列号
     * </pre>
     *
     * <code>int32 seq = 3;</code>
     * @return The seq.
     */
    int getSeq();

    /**
     * <code>int32 session_id = 4;</code>
     * @return The sessionId.
     */
    int getSessionId();

    /**
     * <code>string task_id = 5;</code>
     * @return The taskId.
     */
    java.lang.String getTaskId();
    /**
     * <code>string task_id = 5;</code>
     * @return The bytes for taskId.
     */
    com.google.protobuf.ByteString
        getTaskIdBytes();

    /**
     * <code>string message_id = 6;</code>
     * @return The messageId.
     */
    java.lang.String getMessageId();
    /**
     * <code>string message_id = 6;</code>
     * @return The bytes for messageId.
     */
    com.google.protobuf.ByteString
        getMessageIdBytes();

    /**
     * <code>string operate_id = 7;</code>
     * @return The operateId.
     */
    java.lang.String getOperateId();
    /**
     * <code>string operate_id = 7;</code>
     * @return The bytes for operateId.
     */
    com.google.protobuf.ByteString
        getOperateIdBytes();
  }
  /**
   * Protobuf type {@code com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Header}
   */
  public static final class Header extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Header)
      HeaderOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Header.newBuilder() to construct.
    private Header(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Header() {
      taskId_ = "";
      messageId_ = "";
      operateId_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Header();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Header(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              version_ = input.readUInt32();
              break;
            }
            case 16: {

              unixTimestamp_ = input.readUInt64();
              break;
            }
            case 24: {

              seq_ = input.readInt32();
              break;
            }
            case 32: {

              sessionId_ = input.readInt32();
              break;
            }
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();

              taskId_ = s;
              break;
            }
            case 50: {
              java.lang.String s = input.readStringRequireUtf8();

              messageId_ = s;
              break;
            }
            case 58: {
              java.lang.String s = input.readStringRequireUtf8();

              operateId_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_Header_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_Header_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header.class, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header.Builder.class);
    }

    public static final int VERSION_FIELD_NUMBER = 1;
    private int version_;
    /**
     * <pre>
     *数据上报协议版本信息
     * </pre>
     *
     * <code>uint32 version = 1;</code>
     * @return The version.
     */
    @java.lang.Override
    public int getVersion() {
      return version_;
    }

    public static final int UNIX_TIMESTAMP_FIELD_NUMBER = 2;
    private long unixTimestamp_;
    /**
     * <pre>
     *时间戳，精确到ms
     * </pre>
     *
     * <code>uint64 unix_timestamp = 2;</code>
     * @return The unixTimestamp.
     */
    @java.lang.Override
    public long getUnixTimestamp() {
      return unixTimestamp_;
    }

    public static final int SEQ_FIELD_NUMBER = 3;
    private int seq_;
    /**
     * <pre>
     *消息序列号
     * </pre>
     *
     * <code>int32 seq = 3;</code>
     * @return The seq.
     */
    @java.lang.Override
    public int getSeq() {
      return seq_;
    }

    public static final int SESSION_ID_FIELD_NUMBER = 4;
    private int sessionId_;
    /**
     * <code>int32 session_id = 4;</code>
     * @return The sessionId.
     */
    @java.lang.Override
    public int getSessionId() {
      return sessionId_;
    }

    public static final int TASK_ID_FIELD_NUMBER = 5;
    private volatile java.lang.Object taskId_;
    /**
     * <code>string task_id = 5;</code>
     * @return The taskId.
     */
    @java.lang.Override
    public java.lang.String getTaskId() {
      java.lang.Object ref = taskId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        taskId_ = s;
        return s;
      }
    }
    /**
     * <code>string task_id = 5;</code>
     * @return The bytes for taskId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTaskIdBytes() {
      java.lang.Object ref = taskId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        taskId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int MESSAGE_ID_FIELD_NUMBER = 6;
    private volatile java.lang.Object messageId_;
    /**
     * <code>string message_id = 6;</code>
     * @return The messageId.
     */
    @java.lang.Override
    public java.lang.String getMessageId() {
      java.lang.Object ref = messageId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        messageId_ = s;
        return s;
      }
    }
    /**
     * <code>string message_id = 6;</code>
     * @return The bytes for messageId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getMessageIdBytes() {
      java.lang.Object ref = messageId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        messageId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int OPERATE_ID_FIELD_NUMBER = 7;
    private volatile java.lang.Object operateId_;
    /**
     * <code>string operate_id = 7;</code>
     * @return The operateId.
     */
    @java.lang.Override
    public java.lang.String getOperateId() {
      java.lang.Object ref = operateId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        operateId_ = s;
        return s;
      }
    }
    /**
     * <code>string operate_id = 7;</code>
     * @return The bytes for operateId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getOperateIdBytes() {
      java.lang.Object ref = operateId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        operateId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (version_ != 0) {
        output.writeUInt32(1, version_);
      }
      if (unixTimestamp_ != 0L) {
        output.writeUInt64(2, unixTimestamp_);
      }
      if (seq_ != 0) {
        output.writeInt32(3, seq_);
      }
      if (sessionId_ != 0) {
        output.writeInt32(4, sessionId_);
      }
      if (!getTaskIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, taskId_);
      }
      if (!getMessageIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 6, messageId_);
      }
      if (!getOperateIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 7, operateId_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (version_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, version_);
      }
      if (unixTimestamp_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, unixTimestamp_);
      }
      if (seq_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, seq_);
      }
      if (sessionId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, sessionId_);
      }
      if (!getTaskIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, taskId_);
      }
      if (!getMessageIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, messageId_);
      }
      if (!getOperateIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, operateId_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header)) {
        return super.equals(obj);
      }
      com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header other = (com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header) obj;

      if (getVersion()
          != other.getVersion()) return false;
      if (getUnixTimestamp()
          != other.getUnixTimestamp()) return false;
      if (getSeq()
          != other.getSeq()) return false;
      if (getSessionId()
          != other.getSessionId()) return false;
      if (!getTaskId()
          .equals(other.getTaskId())) return false;
      if (!getMessageId()
          .equals(other.getMessageId())) return false;
      if (!getOperateId()
          .equals(other.getOperateId())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + VERSION_FIELD_NUMBER;
      hash = (53 * hash) + getVersion();
      hash = (37 * hash) + UNIX_TIMESTAMP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getUnixTimestamp());
      hash = (37 * hash) + SEQ_FIELD_NUMBER;
      hash = (53 * hash) + getSeq();
      hash = (37 * hash) + SESSION_ID_FIELD_NUMBER;
      hash = (53 * hash) + getSessionId();
      hash = (37 * hash) + TASK_ID_FIELD_NUMBER;
      hash = (53 * hash) + getTaskId().hashCode();
      hash = (37 * hash) + MESSAGE_ID_FIELD_NUMBER;
      hash = (53 * hash) + getMessageId().hashCode();
      hash = (37 * hash) + OPERATE_ID_FIELD_NUMBER;
      hash = (53 * hash) + getOperateId().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Header}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Header)
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.HeaderOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_Header_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_Header_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header.class, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header.Builder.class);
      }

      // Construct using com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        version_ = 0;

        unixTimestamp_ = 0L;

        seq_ = 0;

        sessionId_ = 0;

        taskId_ = "";

        messageId_ = "";

        operateId_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_Header_descriptor;
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header getDefaultInstanceForType() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header.getDefaultInstance();
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header build() {
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header buildPartial() {
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header result = new com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header(this);
        result.version_ = version_;
        result.unixTimestamp_ = unixTimestamp_;
        result.seq_ = seq_;
        result.sessionId_ = sessionId_;
        result.taskId_ = taskId_;
        result.messageId_ = messageId_;
        result.operateId_ = operateId_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header) {
          return mergeFrom((com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header other) {
        if (other == com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header.getDefaultInstance()) return this;
        if (other.getVersion() != 0) {
          setVersion(other.getVersion());
        }
        if (other.getUnixTimestamp() != 0L) {
          setUnixTimestamp(other.getUnixTimestamp());
        }
        if (other.getSeq() != 0) {
          setSeq(other.getSeq());
        }
        if (other.getSessionId() != 0) {
          setSessionId(other.getSessionId());
        }
        if (!other.getTaskId().isEmpty()) {
          taskId_ = other.taskId_;
          onChanged();
        }
        if (!other.getMessageId().isEmpty()) {
          messageId_ = other.messageId_;
          onChanged();
        }
        if (!other.getOperateId().isEmpty()) {
          operateId_ = other.operateId_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int version_ ;
      /**
       * <pre>
       *数据上报协议版本信息
       * </pre>
       *
       * <code>uint32 version = 1;</code>
       * @return The version.
       */
      @java.lang.Override
      public int getVersion() {
        return version_;
      }
      /**
       * <pre>
       *数据上报协议版本信息
       * </pre>
       *
       * <code>uint32 version = 1;</code>
       * @param value The version to set.
       * @return This builder for chaining.
       */
      public Builder setVersion(int value) {
        
        version_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *数据上报协议版本信息
       * </pre>
       *
       * <code>uint32 version = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearVersion() {
        
        version_ = 0;
        onChanged();
        return this;
      }

      private long unixTimestamp_ ;
      /**
       * <pre>
       *时间戳，精确到ms
       * </pre>
       *
       * <code>uint64 unix_timestamp = 2;</code>
       * @return The unixTimestamp.
       */
      @java.lang.Override
      public long getUnixTimestamp() {
        return unixTimestamp_;
      }
      /**
       * <pre>
       *时间戳，精确到ms
       * </pre>
       *
       * <code>uint64 unix_timestamp = 2;</code>
       * @param value The unixTimestamp to set.
       * @return This builder for chaining.
       */
      public Builder setUnixTimestamp(long value) {
        
        unixTimestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *时间戳，精确到ms
       * </pre>
       *
       * <code>uint64 unix_timestamp = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearUnixTimestamp() {
        
        unixTimestamp_ = 0L;
        onChanged();
        return this;
      }

      private int seq_ ;
      /**
       * <pre>
       *消息序列号
       * </pre>
       *
       * <code>int32 seq = 3;</code>
       * @return The seq.
       */
      @java.lang.Override
      public int getSeq() {
        return seq_;
      }
      /**
       * <pre>
       *消息序列号
       * </pre>
       *
       * <code>int32 seq = 3;</code>
       * @param value The seq to set.
       * @return This builder for chaining.
       */
      public Builder setSeq(int value) {
        
        seq_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *消息序列号
       * </pre>
       *
       * <code>int32 seq = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearSeq() {
        
        seq_ = 0;
        onChanged();
        return this;
      }

      private int sessionId_ ;
      /**
       * <code>int32 session_id = 4;</code>
       * @return The sessionId.
       */
      @java.lang.Override
      public int getSessionId() {
        return sessionId_;
      }
      /**
       * <code>int32 session_id = 4;</code>
       * @param value The sessionId to set.
       * @return This builder for chaining.
       */
      public Builder setSessionId(int value) {
        
        sessionId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 session_id = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearSessionId() {
        
        sessionId_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object taskId_ = "";
      /**
       * <code>string task_id = 5;</code>
       * @return The taskId.
       */
      public java.lang.String getTaskId() {
        java.lang.Object ref = taskId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          taskId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string task_id = 5;</code>
       * @return The bytes for taskId.
       */
      public com.google.protobuf.ByteString
          getTaskIdBytes() {
        java.lang.Object ref = taskId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          taskId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string task_id = 5;</code>
       * @param value The taskId to set.
       * @return This builder for chaining.
       */
      public Builder setTaskId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        taskId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string task_id = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearTaskId() {
        
        taskId_ = getDefaultInstance().getTaskId();
        onChanged();
        return this;
      }
      /**
       * <code>string task_id = 5;</code>
       * @param value The bytes for taskId to set.
       * @return This builder for chaining.
       */
      public Builder setTaskIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        taskId_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object messageId_ = "";
      /**
       * <code>string message_id = 6;</code>
       * @return The messageId.
       */
      public java.lang.String getMessageId() {
        java.lang.Object ref = messageId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          messageId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string message_id = 6;</code>
       * @return The bytes for messageId.
       */
      public com.google.protobuf.ByteString
          getMessageIdBytes() {
        java.lang.Object ref = messageId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          messageId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string message_id = 6;</code>
       * @param value The messageId to set.
       * @return This builder for chaining.
       */
      public Builder setMessageId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        messageId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string message_id = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearMessageId() {
        
        messageId_ = getDefaultInstance().getMessageId();
        onChanged();
        return this;
      }
      /**
       * <code>string message_id = 6;</code>
       * @param value The bytes for messageId to set.
       * @return This builder for chaining.
       */
      public Builder setMessageIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        messageId_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object operateId_ = "";
      /**
       * <code>string operate_id = 7;</code>
       * @return The operateId.
       */
      public java.lang.String getOperateId() {
        java.lang.Object ref = operateId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          operateId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string operate_id = 7;</code>
       * @return The bytes for operateId.
       */
      public com.google.protobuf.ByteString
          getOperateIdBytes() {
        java.lang.Object ref = operateId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          operateId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string operate_id = 7;</code>
       * @param value The operateId to set.
       * @return This builder for chaining.
       */
      public Builder setOperateId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        operateId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string operate_id = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearOperateId() {
        
        operateId_ = getDefaultInstance().getOperateId();
        onChanged();
        return this;
      }
      /**
       * <code>string operate_id = 7;</code>
       * @param value The bytes for operateId to set.
       * @return This builder for chaining.
       */
      public Builder setOperateIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        operateId_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Header)
    }

    // @@protoc_insertion_point(class_scope:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Header)
    private static final com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header();
    }

    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Header>
        PARSER = new com.google.protobuf.AbstractParser<Header>() {
      @java.lang.Override
      public Header parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Header(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Header> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Header> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Header getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ChassisALarmInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisALarmInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *一级故障列表 NCU停车处理
     * </pre>
     *
     * <code>repeated int32 chassis_level1_alarm_list = 1;</code>
     * @return A list containing the chassisLevel1AlarmList.
     */
    java.util.List<java.lang.Integer> getChassisLevel1AlarmListList();
    /**
     * <pre>
     *一级故障列表 NCU停车处理
     * </pre>
     *
     * <code>repeated int32 chassis_level1_alarm_list = 1;</code>
     * @return The count of chassisLevel1AlarmList.
     */
    int getChassisLevel1AlarmListCount();
    /**
     * <pre>
     *一级故障列表 NCU停车处理
     * </pre>
     *
     * <code>repeated int32 chassis_level1_alarm_list = 1;</code>
     * @param index The index of the element to return.
     * @return The chassisLevel1AlarmList at the given index.
     */
    int getChassisLevel1AlarmList(int index);

    /**
     * <pre>
     *二级故障列表 交互终端决定是否停止作业
     * </pre>
     *
     * <code>repeated int32 chassis_level2_alarm_list = 2;</code>
     * @return A list containing the chassisLevel2AlarmList.
     */
    java.util.List<java.lang.Integer> getChassisLevel2AlarmListList();
    /**
     * <pre>
     *二级故障列表 交互终端决定是否停止作业
     * </pre>
     *
     * <code>repeated int32 chassis_level2_alarm_list = 2;</code>
     * @return The count of chassisLevel2AlarmList.
     */
    int getChassisLevel2AlarmListCount();
    /**
     * <pre>
     *二级故障列表 交互终端决定是否停止作业
     * </pre>
     *
     * <code>repeated int32 chassis_level2_alarm_list = 2;</code>
     * @param index The index of the element to return.
     * @return The chassisLevel2AlarmList at the given index.
     */
    int getChassisLevel2AlarmList(int index);

    /**
     * <pre>
     *三级故障列表 不影响作业，仅用于上报
     * </pre>
     *
     * <code>repeated int32 chassis_level3_alarm_list = 3;</code>
     * @return A list containing the chassisLevel3AlarmList.
     */
    java.util.List<java.lang.Integer> getChassisLevel3AlarmListList();
    /**
     * <pre>
     *三级故障列表 不影响作业，仅用于上报
     * </pre>
     *
     * <code>repeated int32 chassis_level3_alarm_list = 3;</code>
     * @return The count of chassisLevel3AlarmList.
     */
    int getChassisLevel3AlarmListCount();
    /**
     * <pre>
     *三级故障列表 不影响作业，仅用于上报
     * </pre>
     *
     * <code>repeated int32 chassis_level3_alarm_list = 3;</code>
     * @param index The index of the element to return.
     * @return The chassisLevel3AlarmList at the given index.
     */
    int getChassisLevel3AlarmList(int index);
  }
  /**
   * Protobuf type {@code com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisALarmInfo}
   */
  public static final class ChassisALarmInfo extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisALarmInfo)
      ChassisALarmInfoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ChassisALarmInfo.newBuilder() to construct.
    private ChassisALarmInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ChassisALarmInfo() {
      chassisLevel1AlarmList_ = emptyIntList();
      chassisLevel2AlarmList_ = emptyIntList();
      chassisLevel3AlarmList_ = emptyIntList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ChassisALarmInfo();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ChassisALarmInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                chassisLevel1AlarmList_ = newIntList();
                mutable_bitField0_ |= 0x00000001;
              }
              chassisLevel1AlarmList_.addInt(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) != 0) && input.getBytesUntilLimit() > 0) {
                chassisLevel1AlarmList_ = newIntList();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                chassisLevel1AlarmList_.addInt(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                chassisLevel2AlarmList_ = newIntList();
                mutable_bitField0_ |= 0x00000002;
              }
              chassisLevel2AlarmList_.addInt(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) != 0) && input.getBytesUntilLimit() > 0) {
                chassisLevel2AlarmList_ = newIntList();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                chassisLevel2AlarmList_.addInt(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                chassisLevel3AlarmList_ = newIntList();
                mutable_bitField0_ |= 0x00000004;
              }
              chassisLevel3AlarmList_.addInt(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) != 0) && input.getBytesUntilLimit() > 0) {
                chassisLevel3AlarmList_ = newIntList();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                chassisLevel3AlarmList_.addInt(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          chassisLevel1AlarmList_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          chassisLevel2AlarmList_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          chassisLevel3AlarmList_.makeImmutable(); // C
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_ChassisALarmInfo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_ChassisALarmInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo.class, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo.Builder.class);
    }

    public static final int CHASSIS_LEVEL1_ALARM_LIST_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.IntList chassisLevel1AlarmList_;
    /**
     * <pre>
     *一级故障列表 NCU停车处理
     * </pre>
     *
     * <code>repeated int32 chassis_level1_alarm_list = 1;</code>
     * @return A list containing the chassisLevel1AlarmList.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getChassisLevel1AlarmListList() {
      return chassisLevel1AlarmList_;
    }
    /**
     * <pre>
     *一级故障列表 NCU停车处理
     * </pre>
     *
     * <code>repeated int32 chassis_level1_alarm_list = 1;</code>
     * @return The count of chassisLevel1AlarmList.
     */
    public int getChassisLevel1AlarmListCount() {
      return chassisLevel1AlarmList_.size();
    }
    /**
     * <pre>
     *一级故障列表 NCU停车处理
     * </pre>
     *
     * <code>repeated int32 chassis_level1_alarm_list = 1;</code>
     * @param index The index of the element to return.
     * @return The chassisLevel1AlarmList at the given index.
     */
    public int getChassisLevel1AlarmList(int index) {
      return chassisLevel1AlarmList_.getInt(index);
    }
    private int chassisLevel1AlarmListMemoizedSerializedSize = -1;

    public static final int CHASSIS_LEVEL2_ALARM_LIST_FIELD_NUMBER = 2;
    private com.google.protobuf.Internal.IntList chassisLevel2AlarmList_;
    /**
     * <pre>
     *二级故障列表 交互终端决定是否停止作业
     * </pre>
     *
     * <code>repeated int32 chassis_level2_alarm_list = 2;</code>
     * @return A list containing the chassisLevel2AlarmList.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getChassisLevel2AlarmListList() {
      return chassisLevel2AlarmList_;
    }
    /**
     * <pre>
     *二级故障列表 交互终端决定是否停止作业
     * </pre>
     *
     * <code>repeated int32 chassis_level2_alarm_list = 2;</code>
     * @return The count of chassisLevel2AlarmList.
     */
    public int getChassisLevel2AlarmListCount() {
      return chassisLevel2AlarmList_.size();
    }
    /**
     * <pre>
     *二级故障列表 交互终端决定是否停止作业
     * </pre>
     *
     * <code>repeated int32 chassis_level2_alarm_list = 2;</code>
     * @param index The index of the element to return.
     * @return The chassisLevel2AlarmList at the given index.
     */
    public int getChassisLevel2AlarmList(int index) {
      return chassisLevel2AlarmList_.getInt(index);
    }
    private int chassisLevel2AlarmListMemoizedSerializedSize = -1;

    public static final int CHASSIS_LEVEL3_ALARM_LIST_FIELD_NUMBER = 3;
    private com.google.protobuf.Internal.IntList chassisLevel3AlarmList_;
    /**
     * <pre>
     *三级故障列表 不影响作业，仅用于上报
     * </pre>
     *
     * <code>repeated int32 chassis_level3_alarm_list = 3;</code>
     * @return A list containing the chassisLevel3AlarmList.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getChassisLevel3AlarmListList() {
      return chassisLevel3AlarmList_;
    }
    /**
     * <pre>
     *三级故障列表 不影响作业，仅用于上报
     * </pre>
     *
     * <code>repeated int32 chassis_level3_alarm_list = 3;</code>
     * @return The count of chassisLevel3AlarmList.
     */
    public int getChassisLevel3AlarmListCount() {
      return chassisLevel3AlarmList_.size();
    }
    /**
     * <pre>
     *三级故障列表 不影响作业，仅用于上报
     * </pre>
     *
     * <code>repeated int32 chassis_level3_alarm_list = 3;</code>
     * @param index The index of the element to return.
     * @return The chassisLevel3AlarmList at the given index.
     */
    public int getChassisLevel3AlarmList(int index) {
      return chassisLevel3AlarmList_.getInt(index);
    }
    private int chassisLevel3AlarmListMemoizedSerializedSize = -1;

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (getChassisLevel1AlarmListList().size() > 0) {
        output.writeUInt32NoTag(10);
        output.writeUInt32NoTag(chassisLevel1AlarmListMemoizedSerializedSize);
      }
      for (int i = 0; i < chassisLevel1AlarmList_.size(); i++) {
        output.writeInt32NoTag(chassisLevel1AlarmList_.getInt(i));
      }
      if (getChassisLevel2AlarmListList().size() > 0) {
        output.writeUInt32NoTag(18);
        output.writeUInt32NoTag(chassisLevel2AlarmListMemoizedSerializedSize);
      }
      for (int i = 0; i < chassisLevel2AlarmList_.size(); i++) {
        output.writeInt32NoTag(chassisLevel2AlarmList_.getInt(i));
      }
      if (getChassisLevel3AlarmListList().size() > 0) {
        output.writeUInt32NoTag(26);
        output.writeUInt32NoTag(chassisLevel3AlarmListMemoizedSerializedSize);
      }
      for (int i = 0; i < chassisLevel3AlarmList_.size(); i++) {
        output.writeInt32NoTag(chassisLevel3AlarmList_.getInt(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < chassisLevel1AlarmList_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(chassisLevel1AlarmList_.getInt(i));
        }
        size += dataSize;
        if (!getChassisLevel1AlarmListList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        chassisLevel1AlarmListMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < chassisLevel2AlarmList_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(chassisLevel2AlarmList_.getInt(i));
        }
        size += dataSize;
        if (!getChassisLevel2AlarmListList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        chassisLevel2AlarmListMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < chassisLevel3AlarmList_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(chassisLevel3AlarmList_.getInt(i));
        }
        size += dataSize;
        if (!getChassisLevel3AlarmListList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        chassisLevel3AlarmListMemoizedSerializedSize = dataSize;
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo)) {
        return super.equals(obj);
      }
      com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo other = (com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo) obj;

      if (!getChassisLevel1AlarmListList()
          .equals(other.getChassisLevel1AlarmListList())) return false;
      if (!getChassisLevel2AlarmListList()
          .equals(other.getChassisLevel2AlarmListList())) return false;
      if (!getChassisLevel3AlarmListList()
          .equals(other.getChassisLevel3AlarmListList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getChassisLevel1AlarmListCount() > 0) {
        hash = (37 * hash) + CHASSIS_LEVEL1_ALARM_LIST_FIELD_NUMBER;
        hash = (53 * hash) + getChassisLevel1AlarmListList().hashCode();
      }
      if (getChassisLevel2AlarmListCount() > 0) {
        hash = (37 * hash) + CHASSIS_LEVEL2_ALARM_LIST_FIELD_NUMBER;
        hash = (53 * hash) + getChassisLevel2AlarmListList().hashCode();
      }
      if (getChassisLevel3AlarmListCount() > 0) {
        hash = (37 * hash) + CHASSIS_LEVEL3_ALARM_LIST_FIELD_NUMBER;
        hash = (53 * hash) + getChassisLevel3AlarmListList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisALarmInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisALarmInfo)
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_ChassisALarmInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_ChassisALarmInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo.class, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo.Builder.class);
      }

      // Construct using com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        chassisLevel1AlarmList_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000001);
        chassisLevel2AlarmList_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000002);
        chassisLevel3AlarmList_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_ChassisALarmInfo_descriptor;
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo getDefaultInstanceForType() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo.getDefaultInstance();
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo build() {
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo buildPartial() {
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo result = new com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) != 0)) {
          chassisLevel1AlarmList_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.chassisLevel1AlarmList_ = chassisLevel1AlarmList_;
        if (((bitField0_ & 0x00000002) != 0)) {
          chassisLevel2AlarmList_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.chassisLevel2AlarmList_ = chassisLevel2AlarmList_;
        if (((bitField0_ & 0x00000004) != 0)) {
          chassisLevel3AlarmList_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.chassisLevel3AlarmList_ = chassisLevel3AlarmList_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo) {
          return mergeFrom((com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo other) {
        if (other == com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo.getDefaultInstance()) return this;
        if (!other.chassisLevel1AlarmList_.isEmpty()) {
          if (chassisLevel1AlarmList_.isEmpty()) {
            chassisLevel1AlarmList_ = other.chassisLevel1AlarmList_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureChassisLevel1AlarmListIsMutable();
            chassisLevel1AlarmList_.addAll(other.chassisLevel1AlarmList_);
          }
          onChanged();
        }
        if (!other.chassisLevel2AlarmList_.isEmpty()) {
          if (chassisLevel2AlarmList_.isEmpty()) {
            chassisLevel2AlarmList_ = other.chassisLevel2AlarmList_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureChassisLevel2AlarmListIsMutable();
            chassisLevel2AlarmList_.addAll(other.chassisLevel2AlarmList_);
          }
          onChanged();
        }
        if (!other.chassisLevel3AlarmList_.isEmpty()) {
          if (chassisLevel3AlarmList_.isEmpty()) {
            chassisLevel3AlarmList_ = other.chassisLevel3AlarmList_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureChassisLevel3AlarmListIsMutable();
            chassisLevel3AlarmList_.addAll(other.chassisLevel3AlarmList_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.Internal.IntList chassisLevel1AlarmList_ = emptyIntList();
      private void ensureChassisLevel1AlarmListIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          chassisLevel1AlarmList_ = mutableCopy(chassisLevel1AlarmList_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       *一级故障列表 NCU停车处理
       * </pre>
       *
       * <code>repeated int32 chassis_level1_alarm_list = 1;</code>
       * @return A list containing the chassisLevel1AlarmList.
       */
      public java.util.List<java.lang.Integer>
          getChassisLevel1AlarmListList() {
        return ((bitField0_ & 0x00000001) != 0) ?
                 java.util.Collections.unmodifiableList(chassisLevel1AlarmList_) : chassisLevel1AlarmList_;
      }
      /**
       * <pre>
       *一级故障列表 NCU停车处理
       * </pre>
       *
       * <code>repeated int32 chassis_level1_alarm_list = 1;</code>
       * @return The count of chassisLevel1AlarmList.
       */
      public int getChassisLevel1AlarmListCount() {
        return chassisLevel1AlarmList_.size();
      }
      /**
       * <pre>
       *一级故障列表 NCU停车处理
       * </pre>
       *
       * <code>repeated int32 chassis_level1_alarm_list = 1;</code>
       * @param index The index of the element to return.
       * @return The chassisLevel1AlarmList at the given index.
       */
      public int getChassisLevel1AlarmList(int index) {
        return chassisLevel1AlarmList_.getInt(index);
      }
      /**
       * <pre>
       *一级故障列表 NCU停车处理
       * </pre>
       *
       * <code>repeated int32 chassis_level1_alarm_list = 1;</code>
       * @param index The index to set the value at.
       * @param value The chassisLevel1AlarmList to set.
       * @return This builder for chaining.
       */
      public Builder setChassisLevel1AlarmList(
          int index, int value) {
        ensureChassisLevel1AlarmListIsMutable();
        chassisLevel1AlarmList_.setInt(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *一级故障列表 NCU停车处理
       * </pre>
       *
       * <code>repeated int32 chassis_level1_alarm_list = 1;</code>
       * @param value The chassisLevel1AlarmList to add.
       * @return This builder for chaining.
       */
      public Builder addChassisLevel1AlarmList(int value) {
        ensureChassisLevel1AlarmListIsMutable();
        chassisLevel1AlarmList_.addInt(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *一级故障列表 NCU停车处理
       * </pre>
       *
       * <code>repeated int32 chassis_level1_alarm_list = 1;</code>
       * @param values The chassisLevel1AlarmList to add.
       * @return This builder for chaining.
       */
      public Builder addAllChassisLevel1AlarmList(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureChassisLevel1AlarmListIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, chassisLevel1AlarmList_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *一级故障列表 NCU停车处理
       * </pre>
       *
       * <code>repeated int32 chassis_level1_alarm_list = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearChassisLevel1AlarmList() {
        chassisLevel1AlarmList_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList chassisLevel2AlarmList_ = emptyIntList();
      private void ensureChassisLevel2AlarmListIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          chassisLevel2AlarmList_ = mutableCopy(chassisLevel2AlarmList_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <pre>
       *二级故障列表 交互终端决定是否停止作业
       * </pre>
       *
       * <code>repeated int32 chassis_level2_alarm_list = 2;</code>
       * @return A list containing the chassisLevel2AlarmList.
       */
      public java.util.List<java.lang.Integer>
          getChassisLevel2AlarmListList() {
        return ((bitField0_ & 0x00000002) != 0) ?
                 java.util.Collections.unmodifiableList(chassisLevel2AlarmList_) : chassisLevel2AlarmList_;
      }
      /**
       * <pre>
       *二级故障列表 交互终端决定是否停止作业
       * </pre>
       *
       * <code>repeated int32 chassis_level2_alarm_list = 2;</code>
       * @return The count of chassisLevel2AlarmList.
       */
      public int getChassisLevel2AlarmListCount() {
        return chassisLevel2AlarmList_.size();
      }
      /**
       * <pre>
       *二级故障列表 交互终端决定是否停止作业
       * </pre>
       *
       * <code>repeated int32 chassis_level2_alarm_list = 2;</code>
       * @param index The index of the element to return.
       * @return The chassisLevel2AlarmList at the given index.
       */
      public int getChassisLevel2AlarmList(int index) {
        return chassisLevel2AlarmList_.getInt(index);
      }
      /**
       * <pre>
       *二级故障列表 交互终端决定是否停止作业
       * </pre>
       *
       * <code>repeated int32 chassis_level2_alarm_list = 2;</code>
       * @param index The index to set the value at.
       * @param value The chassisLevel2AlarmList to set.
       * @return This builder for chaining.
       */
      public Builder setChassisLevel2AlarmList(
          int index, int value) {
        ensureChassisLevel2AlarmListIsMutable();
        chassisLevel2AlarmList_.setInt(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *二级故障列表 交互终端决定是否停止作业
       * </pre>
       *
       * <code>repeated int32 chassis_level2_alarm_list = 2;</code>
       * @param value The chassisLevel2AlarmList to add.
       * @return This builder for chaining.
       */
      public Builder addChassisLevel2AlarmList(int value) {
        ensureChassisLevel2AlarmListIsMutable();
        chassisLevel2AlarmList_.addInt(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *二级故障列表 交互终端决定是否停止作业
       * </pre>
       *
       * <code>repeated int32 chassis_level2_alarm_list = 2;</code>
       * @param values The chassisLevel2AlarmList to add.
       * @return This builder for chaining.
       */
      public Builder addAllChassisLevel2AlarmList(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureChassisLevel2AlarmListIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, chassisLevel2AlarmList_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *二级故障列表 交互终端决定是否停止作业
       * </pre>
       *
       * <code>repeated int32 chassis_level2_alarm_list = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearChassisLevel2AlarmList() {
        chassisLevel2AlarmList_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList chassisLevel3AlarmList_ = emptyIntList();
      private void ensureChassisLevel3AlarmListIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          chassisLevel3AlarmList_ = mutableCopy(chassisLevel3AlarmList_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <pre>
       *三级故障列表 不影响作业，仅用于上报
       * </pre>
       *
       * <code>repeated int32 chassis_level3_alarm_list = 3;</code>
       * @return A list containing the chassisLevel3AlarmList.
       */
      public java.util.List<java.lang.Integer>
          getChassisLevel3AlarmListList() {
        return ((bitField0_ & 0x00000004) != 0) ?
                 java.util.Collections.unmodifiableList(chassisLevel3AlarmList_) : chassisLevel3AlarmList_;
      }
      /**
       * <pre>
       *三级故障列表 不影响作业，仅用于上报
       * </pre>
       *
       * <code>repeated int32 chassis_level3_alarm_list = 3;</code>
       * @return The count of chassisLevel3AlarmList.
       */
      public int getChassisLevel3AlarmListCount() {
        return chassisLevel3AlarmList_.size();
      }
      /**
       * <pre>
       *三级故障列表 不影响作业，仅用于上报
       * </pre>
       *
       * <code>repeated int32 chassis_level3_alarm_list = 3;</code>
       * @param index The index of the element to return.
       * @return The chassisLevel3AlarmList at the given index.
       */
      public int getChassisLevel3AlarmList(int index) {
        return chassisLevel3AlarmList_.getInt(index);
      }
      /**
       * <pre>
       *三级故障列表 不影响作业，仅用于上报
       * </pre>
       *
       * <code>repeated int32 chassis_level3_alarm_list = 3;</code>
       * @param index The index to set the value at.
       * @param value The chassisLevel3AlarmList to set.
       * @return This builder for chaining.
       */
      public Builder setChassisLevel3AlarmList(
          int index, int value) {
        ensureChassisLevel3AlarmListIsMutable();
        chassisLevel3AlarmList_.setInt(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *三级故障列表 不影响作业，仅用于上报
       * </pre>
       *
       * <code>repeated int32 chassis_level3_alarm_list = 3;</code>
       * @param value The chassisLevel3AlarmList to add.
       * @return This builder for chaining.
       */
      public Builder addChassisLevel3AlarmList(int value) {
        ensureChassisLevel3AlarmListIsMutable();
        chassisLevel3AlarmList_.addInt(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *三级故障列表 不影响作业，仅用于上报
       * </pre>
       *
       * <code>repeated int32 chassis_level3_alarm_list = 3;</code>
       * @param values The chassisLevel3AlarmList to add.
       * @return This builder for chaining.
       */
      public Builder addAllChassisLevel3AlarmList(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureChassisLevel3AlarmListIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, chassisLevel3AlarmList_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *三级故障列表 不影响作业，仅用于上报
       * </pre>
       *
       * <code>repeated int32 chassis_level3_alarm_list = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearChassisLevel3AlarmList() {
        chassisLevel3AlarmList_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisALarmInfo)
    }

    // @@protoc_insertion_point(class_scope:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisALarmInfo)
    private static final com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo();
    }

    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ChassisALarmInfo>
        PARSER = new com.google.protobuf.AbstractParser<ChassisALarmInfo>() {
      @java.lang.Override
      public ChassisALarmInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ChassisALarmInfo(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ChassisALarmInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ChassisALarmInfo> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisALarmInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PathOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Path)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *总路径数
     * </pre>
     *
     * <code>int32 total_paths_num = 1;</code>
     * @return The totalPathsNum.
     */
    int getTotalPathsNum();

    /**
     * <pre>
     *当前路径编号
     * </pre>
     *
     * <code>int32 cur_paths_num = 2;</code>
     * @return The curPathsNum.
     */
    int getCurPathsNum();

    /**
     * <pre>
     *总点数
     * </pre>
     *
     * <code>int32 total_point_num = 3;</code>
     * @return The totalPointNum.
     */
    int getTotalPointNum();

    /**
     * <pre>
     *POSE
     * </pre>
     *
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Pose path = 4;</code>
     */
    java.util.List<com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose> 
        getPathList();
    /**
     * <pre>
     *POSE
     * </pre>
     *
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Pose path = 4;</code>
     */
    com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose getPath(int index);
    /**
     * <pre>
     *POSE
     * </pre>
     *
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Pose path = 4;</code>
     */
    int getPathCount();
    /**
     * <pre>
     *POSE
     * </pre>
     *
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Pose path = 4;</code>
     */
    java.util.List<? extends com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PoseOrBuilder> 
        getPathOrBuilderList();
    /**
     * <pre>
     *POSE
     * </pre>
     *
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Pose path = 4;</code>
     */
    com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PoseOrBuilder getPathOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Path}
   */
  public static final class Path extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Path)
      PathOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Path.newBuilder() to construct.
    private Path(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Path() {
      path_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Path();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Path(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              totalPathsNum_ = input.readInt32();
              break;
            }
            case 16: {

              curPathsNum_ = input.readInt32();
              break;
            }
            case 24: {

              totalPointNum_ = input.readInt32();
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                path_ = new java.util.ArrayList<com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose>();
                mutable_bitField0_ |= 0x00000001;
              }
              path_.add(
                  input.readMessage(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          path_ = java.util.Collections.unmodifiableList(path_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_Path_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_Path_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path.class, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path.Builder.class);
    }

    public static final int TOTAL_PATHS_NUM_FIELD_NUMBER = 1;
    private int totalPathsNum_;
    /**
     * <pre>
     *总路径数
     * </pre>
     *
     * <code>int32 total_paths_num = 1;</code>
     * @return The totalPathsNum.
     */
    @java.lang.Override
    public int getTotalPathsNum() {
      return totalPathsNum_;
    }

    public static final int CUR_PATHS_NUM_FIELD_NUMBER = 2;
    private int curPathsNum_;
    /**
     * <pre>
     *当前路径编号
     * </pre>
     *
     * <code>int32 cur_paths_num = 2;</code>
     * @return The curPathsNum.
     */
    @java.lang.Override
    public int getCurPathsNum() {
      return curPathsNum_;
    }

    public static final int TOTAL_POINT_NUM_FIELD_NUMBER = 3;
    private int totalPointNum_;
    /**
     * <pre>
     *总点数
     * </pre>
     *
     * <code>int32 total_point_num = 3;</code>
     * @return The totalPointNum.
     */
    @java.lang.Override
    public int getTotalPointNum() {
      return totalPointNum_;
    }

    public static final int PATH_FIELD_NUMBER = 4;
    private java.util.List<com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose> path_;
    /**
     * <pre>
     *POSE
     * </pre>
     *
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Pose path = 4;</code>
     */
    @java.lang.Override
    public java.util.List<com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose> getPathList() {
      return path_;
    }
    /**
     * <pre>
     *POSE
     * </pre>
     *
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Pose path = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PoseOrBuilder> 
        getPathOrBuilderList() {
      return path_;
    }
    /**
     * <pre>
     *POSE
     * </pre>
     *
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Pose path = 4;</code>
     */
    @java.lang.Override
    public int getPathCount() {
      return path_.size();
    }
    /**
     * <pre>
     *POSE
     * </pre>
     *
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Pose path = 4;</code>
     */
    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose getPath(int index) {
      return path_.get(index);
    }
    /**
     * <pre>
     *POSE
     * </pre>
     *
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Pose path = 4;</code>
     */
    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PoseOrBuilder getPathOrBuilder(
        int index) {
      return path_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (totalPathsNum_ != 0) {
        output.writeInt32(1, totalPathsNum_);
      }
      if (curPathsNum_ != 0) {
        output.writeInt32(2, curPathsNum_);
      }
      if (totalPointNum_ != 0) {
        output.writeInt32(3, totalPointNum_);
      }
      for (int i = 0; i < path_.size(); i++) {
        output.writeMessage(4, path_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (totalPathsNum_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, totalPathsNum_);
      }
      if (curPathsNum_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, curPathsNum_);
      }
      if (totalPointNum_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, totalPointNum_);
      }
      for (int i = 0; i < path_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, path_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path)) {
        return super.equals(obj);
      }
      com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path other = (com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path) obj;

      if (getTotalPathsNum()
          != other.getTotalPathsNum()) return false;
      if (getCurPathsNum()
          != other.getCurPathsNum()) return false;
      if (getTotalPointNum()
          != other.getTotalPointNum()) return false;
      if (!getPathList()
          .equals(other.getPathList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TOTAL_PATHS_NUM_FIELD_NUMBER;
      hash = (53 * hash) + getTotalPathsNum();
      hash = (37 * hash) + CUR_PATHS_NUM_FIELD_NUMBER;
      hash = (53 * hash) + getCurPathsNum();
      hash = (37 * hash) + TOTAL_POINT_NUM_FIELD_NUMBER;
      hash = (53 * hash) + getTotalPointNum();
      if (getPathCount() > 0) {
        hash = (37 * hash) + PATH_FIELD_NUMBER;
        hash = (53 * hash) + getPathList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Path}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Path)
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PathOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_Path_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_Path_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path.class, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path.Builder.class);
      }

      // Construct using com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getPathFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        totalPathsNum_ = 0;

        curPathsNum_ = 0;

        totalPointNum_ = 0;

        if (pathBuilder_ == null) {
          path_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          pathBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_Path_descriptor;
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path getDefaultInstanceForType() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path.getDefaultInstance();
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path build() {
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path buildPartial() {
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path result = new com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path(this);
        int from_bitField0_ = bitField0_;
        result.totalPathsNum_ = totalPathsNum_;
        result.curPathsNum_ = curPathsNum_;
        result.totalPointNum_ = totalPointNum_;
        if (pathBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            path_ = java.util.Collections.unmodifiableList(path_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.path_ = path_;
        } else {
          result.path_ = pathBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path) {
          return mergeFrom((com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path other) {
        if (other == com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path.getDefaultInstance()) return this;
        if (other.getTotalPathsNum() != 0) {
          setTotalPathsNum(other.getTotalPathsNum());
        }
        if (other.getCurPathsNum() != 0) {
          setCurPathsNum(other.getCurPathsNum());
        }
        if (other.getTotalPointNum() != 0) {
          setTotalPointNum(other.getTotalPointNum());
        }
        if (pathBuilder_ == null) {
          if (!other.path_.isEmpty()) {
            if (path_.isEmpty()) {
              path_ = other.path_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensurePathIsMutable();
              path_.addAll(other.path_);
            }
            onChanged();
          }
        } else {
          if (!other.path_.isEmpty()) {
            if (pathBuilder_.isEmpty()) {
              pathBuilder_.dispose();
              pathBuilder_ = null;
              path_ = other.path_;
              bitField0_ = (bitField0_ & ~0x00000001);
              pathBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getPathFieldBuilder() : null;
            } else {
              pathBuilder_.addAllMessages(other.path_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int totalPathsNum_ ;
      /**
       * <pre>
       *总路径数
       * </pre>
       *
       * <code>int32 total_paths_num = 1;</code>
       * @return The totalPathsNum.
       */
      @java.lang.Override
      public int getTotalPathsNum() {
        return totalPathsNum_;
      }
      /**
       * <pre>
       *总路径数
       * </pre>
       *
       * <code>int32 total_paths_num = 1;</code>
       * @param value The totalPathsNum to set.
       * @return This builder for chaining.
       */
      public Builder setTotalPathsNum(int value) {
        
        totalPathsNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *总路径数
       * </pre>
       *
       * <code>int32 total_paths_num = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearTotalPathsNum() {
        
        totalPathsNum_ = 0;
        onChanged();
        return this;
      }

      private int curPathsNum_ ;
      /**
       * <pre>
       *当前路径编号
       * </pre>
       *
       * <code>int32 cur_paths_num = 2;</code>
       * @return The curPathsNum.
       */
      @java.lang.Override
      public int getCurPathsNum() {
        return curPathsNum_;
      }
      /**
       * <pre>
       *当前路径编号
       * </pre>
       *
       * <code>int32 cur_paths_num = 2;</code>
       * @param value The curPathsNum to set.
       * @return This builder for chaining.
       */
      public Builder setCurPathsNum(int value) {
        
        curPathsNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *当前路径编号
       * </pre>
       *
       * <code>int32 cur_paths_num = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearCurPathsNum() {
        
        curPathsNum_ = 0;
        onChanged();
        return this;
      }

      private int totalPointNum_ ;
      /**
       * <pre>
       *总点数
       * </pre>
       *
       * <code>int32 total_point_num = 3;</code>
       * @return The totalPointNum.
       */
      @java.lang.Override
      public int getTotalPointNum() {
        return totalPointNum_;
      }
      /**
       * <pre>
       *总点数
       * </pre>
       *
       * <code>int32 total_point_num = 3;</code>
       * @param value The totalPointNum to set.
       * @return This builder for chaining.
       */
      public Builder setTotalPointNum(int value) {
        
        totalPointNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *总点数
       * </pre>
       *
       * <code>int32 total_point_num = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearTotalPointNum() {
        
        totalPointNum_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose> path_ =
        java.util.Collections.emptyList();
      private void ensurePathIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          path_ = new java.util.ArrayList<com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose>(path_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PoseOrBuilder> pathBuilder_;

      /**
       * <pre>
       *POSE
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Pose path = 4;</code>
       */
      public java.util.List<com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose> getPathList() {
        if (pathBuilder_ == null) {
          return java.util.Collections.unmodifiableList(path_);
        } else {
          return pathBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       *POSE
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Pose path = 4;</code>
       */
      public int getPathCount() {
        if (pathBuilder_ == null) {
          return path_.size();
        } else {
          return pathBuilder_.getCount();
        }
      }
      /**
       * <pre>
       *POSE
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Pose path = 4;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose getPath(int index) {
        if (pathBuilder_ == null) {
          return path_.get(index);
        } else {
          return pathBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       *POSE
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Pose path = 4;</code>
       */
      public Builder setPath(
          int index, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose value) {
        if (pathBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePathIsMutable();
          path_.set(index, value);
          onChanged();
        } else {
          pathBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *POSE
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Pose path = 4;</code>
       */
      public Builder setPath(
          int index, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose.Builder builderForValue) {
        if (pathBuilder_ == null) {
          ensurePathIsMutable();
          path_.set(index, builderForValue.build());
          onChanged();
        } else {
          pathBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *POSE
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Pose path = 4;</code>
       */
      public Builder addPath(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose value) {
        if (pathBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePathIsMutable();
          path_.add(value);
          onChanged();
        } else {
          pathBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       *POSE
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Pose path = 4;</code>
       */
      public Builder addPath(
          int index, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose value) {
        if (pathBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePathIsMutable();
          path_.add(index, value);
          onChanged();
        } else {
          pathBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *POSE
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Pose path = 4;</code>
       */
      public Builder addPath(
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose.Builder builderForValue) {
        if (pathBuilder_ == null) {
          ensurePathIsMutable();
          path_.add(builderForValue.build());
          onChanged();
        } else {
          pathBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *POSE
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Pose path = 4;</code>
       */
      public Builder addPath(
          int index, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose.Builder builderForValue) {
        if (pathBuilder_ == null) {
          ensurePathIsMutable();
          path_.add(index, builderForValue.build());
          onChanged();
        } else {
          pathBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *POSE
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Pose path = 4;</code>
       */
      public Builder addAllPath(
          java.lang.Iterable<? extends com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose> values) {
        if (pathBuilder_ == null) {
          ensurePathIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, path_);
          onChanged();
        } else {
          pathBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       *POSE
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Pose path = 4;</code>
       */
      public Builder clearPath() {
        if (pathBuilder_ == null) {
          path_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          pathBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       *POSE
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Pose path = 4;</code>
       */
      public Builder removePath(int index) {
        if (pathBuilder_ == null) {
          ensurePathIsMutable();
          path_.remove(index);
          onChanged();
        } else {
          pathBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       *POSE
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Pose path = 4;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose.Builder getPathBuilder(
          int index) {
        return getPathFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       *POSE
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Pose path = 4;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PoseOrBuilder getPathOrBuilder(
          int index) {
        if (pathBuilder_ == null) {
          return path_.get(index);  } else {
          return pathBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       *POSE
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Pose path = 4;</code>
       */
      public java.util.List<? extends com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PoseOrBuilder> 
           getPathOrBuilderList() {
        if (pathBuilder_ != null) {
          return pathBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(path_);
        }
      }
      /**
       * <pre>
       *POSE
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Pose path = 4;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose.Builder addPathBuilder() {
        return getPathFieldBuilder().addBuilder(
            com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose.getDefaultInstance());
      }
      /**
       * <pre>
       *POSE
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Pose path = 4;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose.Builder addPathBuilder(
          int index) {
        return getPathFieldBuilder().addBuilder(
            index, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose.getDefaultInstance());
      }
      /**
       * <pre>
       *POSE
       * </pre>
       *
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Pose path = 4;</code>
       */
      public java.util.List<com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose.Builder> 
           getPathBuilderList() {
        return getPathFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PoseOrBuilder> 
          getPathFieldBuilder() {
        if (pathBuilder_ == null) {
          pathBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PoseOrBuilder>(
                  path_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          path_ = null;
        }
        return pathBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Path)
    }

    // @@protoc_insertion_point(class_scope:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Path)
    private static final com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path();
    }

    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Path>
        PARSER = new com.google.protobuf.AbstractParser<Path>() {
      @java.lang.Override
      public Path parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Path(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Path> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Path> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Path getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PoseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Pose)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>double px = 1;</code>
     * @return The px.
     */
    double getPx();

    /**
     * <code>double py = 2;</code>
     * @return The py.
     */
    double getPy();

    /**
     * <code>double pz = 3;</code>
     * @return The pz.
     */
    double getPz();

    /**
     * <pre>
     *航向角
     * </pre>
     *
     * <code>double yaw = 4;</code>
     * @return The yaw.
     */
    double getYaw();

    /**
     * <pre>
     *俯仰角
     * </pre>
     *
     * <code>double pitch = 5;</code>
     * @return The pitch.
     */
    double getPitch();

    /**
     * <code>double roll = 6;</code>
     * @return The roll.
     */
    double getRoll();
  }
  /**
   * Protobuf type {@code com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Pose}
   */
  public static final class Pose extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Pose)
      PoseOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Pose.newBuilder() to construct.
    private Pose(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Pose() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Pose();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Pose(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 9: {

              px_ = input.readDouble();
              break;
            }
            case 17: {

              py_ = input.readDouble();
              break;
            }
            case 25: {

              pz_ = input.readDouble();
              break;
            }
            case 33: {

              yaw_ = input.readDouble();
              break;
            }
            case 41: {

              pitch_ = input.readDouble();
              break;
            }
            case 49: {

              roll_ = input.readDouble();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_Pose_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_Pose_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose.class, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose.Builder.class);
    }

    public static final int PX_FIELD_NUMBER = 1;
    private double px_;
    /**
     * <code>double px = 1;</code>
     * @return The px.
     */
    @java.lang.Override
    public double getPx() {
      return px_;
    }

    public static final int PY_FIELD_NUMBER = 2;
    private double py_;
    /**
     * <code>double py = 2;</code>
     * @return The py.
     */
    @java.lang.Override
    public double getPy() {
      return py_;
    }

    public static final int PZ_FIELD_NUMBER = 3;
    private double pz_;
    /**
     * <code>double pz = 3;</code>
     * @return The pz.
     */
    @java.lang.Override
    public double getPz() {
      return pz_;
    }

    public static final int YAW_FIELD_NUMBER = 4;
    private double yaw_;
    /**
     * <pre>
     *航向角
     * </pre>
     *
     * <code>double yaw = 4;</code>
     * @return The yaw.
     */
    @java.lang.Override
    public double getYaw() {
      return yaw_;
    }

    public static final int PITCH_FIELD_NUMBER = 5;
    private double pitch_;
    /**
     * <pre>
     *俯仰角
     * </pre>
     *
     * <code>double pitch = 5;</code>
     * @return The pitch.
     */
    @java.lang.Override
    public double getPitch() {
      return pitch_;
    }

    public static final int ROLL_FIELD_NUMBER = 6;
    private double roll_;
    /**
     * <code>double roll = 6;</code>
     * @return The roll.
     */
    @java.lang.Override
    public double getRoll() {
      return roll_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (px_ != 0D) {
        output.writeDouble(1, px_);
      }
      if (py_ != 0D) {
        output.writeDouble(2, py_);
      }
      if (pz_ != 0D) {
        output.writeDouble(3, pz_);
      }
      if (yaw_ != 0D) {
        output.writeDouble(4, yaw_);
      }
      if (pitch_ != 0D) {
        output.writeDouble(5, pitch_);
      }
      if (roll_ != 0D) {
        output.writeDouble(6, roll_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (px_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, px_);
      }
      if (py_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, py_);
      }
      if (pz_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, pz_);
      }
      if (yaw_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, yaw_);
      }
      if (pitch_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, pitch_);
      }
      if (roll_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, roll_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose)) {
        return super.equals(obj);
      }
      com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose other = (com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose) obj;

      if (java.lang.Double.doubleToLongBits(getPx())
          != java.lang.Double.doubleToLongBits(
              other.getPx())) return false;
      if (java.lang.Double.doubleToLongBits(getPy())
          != java.lang.Double.doubleToLongBits(
              other.getPy())) return false;
      if (java.lang.Double.doubleToLongBits(getPz())
          != java.lang.Double.doubleToLongBits(
              other.getPz())) return false;
      if (java.lang.Double.doubleToLongBits(getYaw())
          != java.lang.Double.doubleToLongBits(
              other.getYaw())) return false;
      if (java.lang.Double.doubleToLongBits(getPitch())
          != java.lang.Double.doubleToLongBits(
              other.getPitch())) return false;
      if (java.lang.Double.doubleToLongBits(getRoll())
          != java.lang.Double.doubleToLongBits(
              other.getRoll())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + PX_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getPx()));
      hash = (37 * hash) + PY_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getPy()));
      hash = (37 * hash) + PZ_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getPz()));
      hash = (37 * hash) + YAW_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getYaw()));
      hash = (37 * hash) + PITCH_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getPitch()));
      hash = (37 * hash) + ROLL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getRoll()));
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Pose}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Pose)
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PoseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_Pose_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_Pose_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose.class, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose.Builder.class);
      }

      // Construct using com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        px_ = 0D;

        py_ = 0D;

        pz_ = 0D;

        yaw_ = 0D;

        pitch_ = 0D;

        roll_ = 0D;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_Pose_descriptor;
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose getDefaultInstanceForType() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose.getDefaultInstance();
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose build() {
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose buildPartial() {
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose result = new com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose(this);
        result.px_ = px_;
        result.py_ = py_;
        result.pz_ = pz_;
        result.yaw_ = yaw_;
        result.pitch_ = pitch_;
        result.roll_ = roll_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose) {
          return mergeFrom((com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose other) {
        if (other == com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose.getDefaultInstance()) return this;
        if (other.getPx() != 0D) {
          setPx(other.getPx());
        }
        if (other.getPy() != 0D) {
          setPy(other.getPy());
        }
        if (other.getPz() != 0D) {
          setPz(other.getPz());
        }
        if (other.getYaw() != 0D) {
          setYaw(other.getYaw());
        }
        if (other.getPitch() != 0D) {
          setPitch(other.getPitch());
        }
        if (other.getRoll() != 0D) {
          setRoll(other.getRoll());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private double px_ ;
      /**
       * <code>double px = 1;</code>
       * @return The px.
       */
      @java.lang.Override
      public double getPx() {
        return px_;
      }
      /**
       * <code>double px = 1;</code>
       * @param value The px to set.
       * @return This builder for chaining.
       */
      public Builder setPx(double value) {
        
        px_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>double px = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearPx() {
        
        px_ = 0D;
        onChanged();
        return this;
      }

      private double py_ ;
      /**
       * <code>double py = 2;</code>
       * @return The py.
       */
      @java.lang.Override
      public double getPy() {
        return py_;
      }
      /**
       * <code>double py = 2;</code>
       * @param value The py to set.
       * @return This builder for chaining.
       */
      public Builder setPy(double value) {
        
        py_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>double py = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearPy() {
        
        py_ = 0D;
        onChanged();
        return this;
      }

      private double pz_ ;
      /**
       * <code>double pz = 3;</code>
       * @return The pz.
       */
      @java.lang.Override
      public double getPz() {
        return pz_;
      }
      /**
       * <code>double pz = 3;</code>
       * @param value The pz to set.
       * @return This builder for chaining.
       */
      public Builder setPz(double value) {
        
        pz_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>double pz = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearPz() {
        
        pz_ = 0D;
        onChanged();
        return this;
      }

      private double yaw_ ;
      /**
       * <pre>
       *航向角
       * </pre>
       *
       * <code>double yaw = 4;</code>
       * @return The yaw.
       */
      @java.lang.Override
      public double getYaw() {
        return yaw_;
      }
      /**
       * <pre>
       *航向角
       * </pre>
       *
       * <code>double yaw = 4;</code>
       * @param value The yaw to set.
       * @return This builder for chaining.
       */
      public Builder setYaw(double value) {
        
        yaw_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *航向角
       * </pre>
       *
       * <code>double yaw = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearYaw() {
        
        yaw_ = 0D;
        onChanged();
        return this;
      }

      private double pitch_ ;
      /**
       * <pre>
       *俯仰角
       * </pre>
       *
       * <code>double pitch = 5;</code>
       * @return The pitch.
       */
      @java.lang.Override
      public double getPitch() {
        return pitch_;
      }
      /**
       * <pre>
       *俯仰角
       * </pre>
       *
       * <code>double pitch = 5;</code>
       * @param value The pitch to set.
       * @return This builder for chaining.
       */
      public Builder setPitch(double value) {
        
        pitch_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *俯仰角
       * </pre>
       *
       * <code>double pitch = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearPitch() {
        
        pitch_ = 0D;
        onChanged();
        return this;
      }

      private double roll_ ;
      /**
       * <code>double roll = 6;</code>
       * @return The roll.
       */
      @java.lang.Override
      public double getRoll() {
        return roll_;
      }
      /**
       * <code>double roll = 6;</code>
       * @param value The roll to set.
       * @return This builder for chaining.
       */
      public Builder setRoll(double value) {
        
        roll_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>double roll = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearRoll() {
        
        roll_ = 0D;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Pose)
    }

    // @@protoc_insertion_point(class_scope:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Pose)
    private static final com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose();
    }

    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Pose>
        PARSER = new com.google.protobuf.AbstractParser<Pose>() {
      @java.lang.Override
      public Pose parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Pose(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Pose> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Pose> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.Pose getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PlanningInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.PlanningInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * 是否可以进行自动驾驶的自检状态 
     * </pre>
     *
     * <code>int32 check_state = 1;</code>
     * @return The checkState.
     */
    int getCheckState();

    /**
     * <pre>
     * 当前交互终端类型
     * </pre>
     *
     * <code>int32 hmi_mode_state = 2;</code>
     * @return The hmiModeState.
     */
    int getHmiModeState();

    /**
     * <pre>
     * 工作模式 单机2 多/主3 多/从4
     * </pre>
     *
     * <code>int32 work_mode_state = 3;</code>
     * @return The workModeState.
     */
    int getWorkModeState();

    /**
     * <pre>
     * 自动驾驶自检状态 1无任务  任务不可用2  3任务可用 4 底盘准备中 ready:5  cancel_task:6
     * </pre>
     *
     * <code>int32 autopilot_check_state = 4;</code>
     * @return The autopilotCheckState.
     */
    int getAutopilotCheckState();

    /**
     * <pre>
     * 自动驾驶状态 start2 stop3 finish4 任务完成后会自动切回无任务状态
     * </pre>
     *
     * <code>int32 autopilot_state = 5;</code>
     * @return The autopilotState.
     */
    int getAutopilotState();

    /**
     * <pre>
     * 移动状态 1静止，底盘未移动 2移动状态  
     * </pre>
     *
     * <code>int32 move_state = 6;</code>
     * @return The moveState.
     */
    int getMoveState();

    /**
     * <pre>
     * 农机具作业状态 1未作业 2正在作业
     * </pre>
     *
     * <code>int32 imple_work_state = 7;</code>
     * @return The impleWorkState.
     */
    int getImpleWorkState();

    /**
     * <pre>
     * 1:auto  2:human
     * </pre>
     *
     * <code>int32 pilot_state = 8;</code>
     * @return The pilotState.
     */
    int getPilotState();

    /**
     * <pre>
     * 当前任务下，地盘行驶的总里程
     * </pre>
     *
     * <code>double curtask_total_mileage = 9;</code>
     * @return The curtaskTotalMileage.
     */
    double getCurtaskTotalMileage();

    /**
     * <pre>
     * 当前任务下，总的已作业面积
     * </pre>
     *
     * <code>double curtask_total_workarea = 10;</code>
     * @return The curtaskTotalWorkarea.
     */
    double getCurtaskTotalWorkarea();

    /**
     * <pre>
     * 当前任务下，已完成任务百分比
     * </pre>
     *
     * <code>double work_completion_percent = 11;</code>
     * @return The workCompletionPercent.
     */
    double getWorkCompletionPercent();

    /**
     * <pre>
     * 当前X坐标在路径点上的映射
     * </pre>
     *
     * <code>double curpose_mapping_x = 12;</code>
     * @return The curposeMappingX.
     */
    double getCurposeMappingX();

    /**
     * <pre>
     * 当前Y坐标在路径点上的映射
     * </pre>
     *
     * <code>double curpose_mapping_y = 13;</code>
     * @return The curposeMappingY.
     */
    double getCurposeMappingY();

    /**
     * <pre>
     * 当前作业路径段标号 
     * </pre>
     *
     * <code>int32 cur_path_num = 14;</code>
     * @return The curPathNum.
     */
    int getCurPathNum();

    /**
     * <pre>
     *作业执行状态  1未执行   2正在执行  3 执行完成 4cancel task
     * </pre>
     *
     * <code>int32 task_state = 15;</code>
     * @return The taskState.
     */
    int getTaskState();
  }
  /**
   * Protobuf type {@code com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.PlanningInfo}
   */
  public static final class PlanningInfo extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.PlanningInfo)
      PlanningInfoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use PlanningInfo.newBuilder() to construct.
    private PlanningInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private PlanningInfo() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new PlanningInfo();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private PlanningInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              checkState_ = input.readInt32();
              break;
            }
            case 16: {

              hmiModeState_ = input.readInt32();
              break;
            }
            case 24: {

              workModeState_ = input.readInt32();
              break;
            }
            case 32: {

              autopilotCheckState_ = input.readInt32();
              break;
            }
            case 40: {

              autopilotState_ = input.readInt32();
              break;
            }
            case 48: {

              moveState_ = input.readInt32();
              break;
            }
            case 56: {

              impleWorkState_ = input.readInt32();
              break;
            }
            case 64: {

              pilotState_ = input.readInt32();
              break;
            }
            case 73: {

              curtaskTotalMileage_ = input.readDouble();
              break;
            }
            case 81: {

              curtaskTotalWorkarea_ = input.readDouble();
              break;
            }
            case 89: {

              workCompletionPercent_ = input.readDouble();
              break;
            }
            case 97: {

              curposeMappingX_ = input.readDouble();
              break;
            }
            case 105: {

              curposeMappingY_ = input.readDouble();
              break;
            }
            case 112: {

              curPathNum_ = input.readInt32();
              break;
            }
            case 120: {

              taskState_ = input.readInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_PlanningInfo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_PlanningInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo.class, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo.Builder.class);
    }

    public static final int CHECK_STATE_FIELD_NUMBER = 1;
    private int checkState_;
    /**
     * <pre>
     * 是否可以进行自动驾驶的自检状态 
     * </pre>
     *
     * <code>int32 check_state = 1;</code>
     * @return The checkState.
     */
    @java.lang.Override
    public int getCheckState() {
      return checkState_;
    }

    public static final int HMI_MODE_STATE_FIELD_NUMBER = 2;
    private int hmiModeState_;
    /**
     * <pre>
     * 当前交互终端类型
     * </pre>
     *
     * <code>int32 hmi_mode_state = 2;</code>
     * @return The hmiModeState.
     */
    @java.lang.Override
    public int getHmiModeState() {
      return hmiModeState_;
    }

    public static final int WORK_MODE_STATE_FIELD_NUMBER = 3;
    private int workModeState_;
    /**
     * <pre>
     * 工作模式 单机2 多/主3 多/从4
     * </pre>
     *
     * <code>int32 work_mode_state = 3;</code>
     * @return The workModeState.
     */
    @java.lang.Override
    public int getWorkModeState() {
      return workModeState_;
    }

    public static final int AUTOPILOT_CHECK_STATE_FIELD_NUMBER = 4;
    private int autopilotCheckState_;
    /**
     * <pre>
     * 自动驾驶自检状态 1无任务  任务不可用2  3任务可用 4 底盘准备中 ready:5  cancel_task:6
     * </pre>
     *
     * <code>int32 autopilot_check_state = 4;</code>
     * @return The autopilotCheckState.
     */
    @java.lang.Override
    public int getAutopilotCheckState() {
      return autopilotCheckState_;
    }

    public static final int AUTOPILOT_STATE_FIELD_NUMBER = 5;
    private int autopilotState_;
    /**
     * <pre>
     * 自动驾驶状态 start2 stop3 finish4 任务完成后会自动切回无任务状态
     * </pre>
     *
     * <code>int32 autopilot_state = 5;</code>
     * @return The autopilotState.
     */
    @java.lang.Override
    public int getAutopilotState() {
      return autopilotState_;
    }

    public static final int MOVE_STATE_FIELD_NUMBER = 6;
    private int moveState_;
    /**
     * <pre>
     * 移动状态 1静止，底盘未移动 2移动状态  
     * </pre>
     *
     * <code>int32 move_state = 6;</code>
     * @return The moveState.
     */
    @java.lang.Override
    public int getMoveState() {
      return moveState_;
    }

    public static final int IMPLE_WORK_STATE_FIELD_NUMBER = 7;
    private int impleWorkState_;
    /**
     * <pre>
     * 农机具作业状态 1未作业 2正在作业
     * </pre>
     *
     * <code>int32 imple_work_state = 7;</code>
     * @return The impleWorkState.
     */
    @java.lang.Override
    public int getImpleWorkState() {
      return impleWorkState_;
    }

    public static final int PILOT_STATE_FIELD_NUMBER = 8;
    private int pilotState_;
    /**
     * <pre>
     * 1:auto  2:human
     * </pre>
     *
     * <code>int32 pilot_state = 8;</code>
     * @return The pilotState.
     */
    @java.lang.Override
    public int getPilotState() {
      return pilotState_;
    }

    public static final int CURTASK_TOTAL_MILEAGE_FIELD_NUMBER = 9;
    private double curtaskTotalMileage_;
    /**
     * <pre>
     * 当前任务下，地盘行驶的总里程
     * </pre>
     *
     * <code>double curtask_total_mileage = 9;</code>
     * @return The curtaskTotalMileage.
     */
    @java.lang.Override
    public double getCurtaskTotalMileage() {
      return curtaskTotalMileage_;
    }

    public static final int CURTASK_TOTAL_WORKAREA_FIELD_NUMBER = 10;
    private double curtaskTotalWorkarea_;
    /**
     * <pre>
     * 当前任务下，总的已作业面积
     * </pre>
     *
     * <code>double curtask_total_workarea = 10;</code>
     * @return The curtaskTotalWorkarea.
     */
    @java.lang.Override
    public double getCurtaskTotalWorkarea() {
      return curtaskTotalWorkarea_;
    }

    public static final int WORK_COMPLETION_PERCENT_FIELD_NUMBER = 11;
    private double workCompletionPercent_;
    /**
     * <pre>
     * 当前任务下，已完成任务百分比
     * </pre>
     *
     * <code>double work_completion_percent = 11;</code>
     * @return The workCompletionPercent.
     */
    @java.lang.Override
    public double getWorkCompletionPercent() {
      return workCompletionPercent_;
    }

    public static final int CURPOSE_MAPPING_X_FIELD_NUMBER = 12;
    private double curposeMappingX_;
    /**
     * <pre>
     * 当前X坐标在路径点上的映射
     * </pre>
     *
     * <code>double curpose_mapping_x = 12;</code>
     * @return The curposeMappingX.
     */
    @java.lang.Override
    public double getCurposeMappingX() {
      return curposeMappingX_;
    }

    public static final int CURPOSE_MAPPING_Y_FIELD_NUMBER = 13;
    private double curposeMappingY_;
    /**
     * <pre>
     * 当前Y坐标在路径点上的映射
     * </pre>
     *
     * <code>double curpose_mapping_y = 13;</code>
     * @return The curposeMappingY.
     */
    @java.lang.Override
    public double getCurposeMappingY() {
      return curposeMappingY_;
    }

    public static final int CUR_PATH_NUM_FIELD_NUMBER = 14;
    private int curPathNum_;
    /**
     * <pre>
     * 当前作业路径段标号 
     * </pre>
     *
     * <code>int32 cur_path_num = 14;</code>
     * @return The curPathNum.
     */
    @java.lang.Override
    public int getCurPathNum() {
      return curPathNum_;
    }

    public static final int TASK_STATE_FIELD_NUMBER = 15;
    private int taskState_;
    /**
     * <pre>
     *作业执行状态  1未执行   2正在执行  3 执行完成 4cancel task
     * </pre>
     *
     * <code>int32 task_state = 15;</code>
     * @return The taskState.
     */
    @java.lang.Override
    public int getTaskState() {
      return taskState_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (checkState_ != 0) {
        output.writeInt32(1, checkState_);
      }
      if (hmiModeState_ != 0) {
        output.writeInt32(2, hmiModeState_);
      }
      if (workModeState_ != 0) {
        output.writeInt32(3, workModeState_);
      }
      if (autopilotCheckState_ != 0) {
        output.writeInt32(4, autopilotCheckState_);
      }
      if (autopilotState_ != 0) {
        output.writeInt32(5, autopilotState_);
      }
      if (moveState_ != 0) {
        output.writeInt32(6, moveState_);
      }
      if (impleWorkState_ != 0) {
        output.writeInt32(7, impleWorkState_);
      }
      if (pilotState_ != 0) {
        output.writeInt32(8, pilotState_);
      }
      if (curtaskTotalMileage_ != 0D) {
        output.writeDouble(9, curtaskTotalMileage_);
      }
      if (curtaskTotalWorkarea_ != 0D) {
        output.writeDouble(10, curtaskTotalWorkarea_);
      }
      if (workCompletionPercent_ != 0D) {
        output.writeDouble(11, workCompletionPercent_);
      }
      if (curposeMappingX_ != 0D) {
        output.writeDouble(12, curposeMappingX_);
      }
      if (curposeMappingY_ != 0D) {
        output.writeDouble(13, curposeMappingY_);
      }
      if (curPathNum_ != 0) {
        output.writeInt32(14, curPathNum_);
      }
      if (taskState_ != 0) {
        output.writeInt32(15, taskState_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (checkState_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, checkState_);
      }
      if (hmiModeState_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, hmiModeState_);
      }
      if (workModeState_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, workModeState_);
      }
      if (autopilotCheckState_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, autopilotCheckState_);
      }
      if (autopilotState_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, autopilotState_);
      }
      if (moveState_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, moveState_);
      }
      if (impleWorkState_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, impleWorkState_);
      }
      if (pilotState_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, pilotState_);
      }
      if (curtaskTotalMileage_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(9, curtaskTotalMileage_);
      }
      if (curtaskTotalWorkarea_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(10, curtaskTotalWorkarea_);
      }
      if (workCompletionPercent_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(11, workCompletionPercent_);
      }
      if (curposeMappingX_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(12, curposeMappingX_);
      }
      if (curposeMappingY_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(13, curposeMappingY_);
      }
      if (curPathNum_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, curPathNum_);
      }
      if (taskState_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, taskState_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo)) {
        return super.equals(obj);
      }
      com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo other = (com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo) obj;

      if (getCheckState()
          != other.getCheckState()) return false;
      if (getHmiModeState()
          != other.getHmiModeState()) return false;
      if (getWorkModeState()
          != other.getWorkModeState()) return false;
      if (getAutopilotCheckState()
          != other.getAutopilotCheckState()) return false;
      if (getAutopilotState()
          != other.getAutopilotState()) return false;
      if (getMoveState()
          != other.getMoveState()) return false;
      if (getImpleWorkState()
          != other.getImpleWorkState()) return false;
      if (getPilotState()
          != other.getPilotState()) return false;
      if (java.lang.Double.doubleToLongBits(getCurtaskTotalMileage())
          != java.lang.Double.doubleToLongBits(
              other.getCurtaskTotalMileage())) return false;
      if (java.lang.Double.doubleToLongBits(getCurtaskTotalWorkarea())
          != java.lang.Double.doubleToLongBits(
              other.getCurtaskTotalWorkarea())) return false;
      if (java.lang.Double.doubleToLongBits(getWorkCompletionPercent())
          != java.lang.Double.doubleToLongBits(
              other.getWorkCompletionPercent())) return false;
      if (java.lang.Double.doubleToLongBits(getCurposeMappingX())
          != java.lang.Double.doubleToLongBits(
              other.getCurposeMappingX())) return false;
      if (java.lang.Double.doubleToLongBits(getCurposeMappingY())
          != java.lang.Double.doubleToLongBits(
              other.getCurposeMappingY())) return false;
      if (getCurPathNum()
          != other.getCurPathNum()) return false;
      if (getTaskState()
          != other.getTaskState()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CHECK_STATE_FIELD_NUMBER;
      hash = (53 * hash) + getCheckState();
      hash = (37 * hash) + HMI_MODE_STATE_FIELD_NUMBER;
      hash = (53 * hash) + getHmiModeState();
      hash = (37 * hash) + WORK_MODE_STATE_FIELD_NUMBER;
      hash = (53 * hash) + getWorkModeState();
      hash = (37 * hash) + AUTOPILOT_CHECK_STATE_FIELD_NUMBER;
      hash = (53 * hash) + getAutopilotCheckState();
      hash = (37 * hash) + AUTOPILOT_STATE_FIELD_NUMBER;
      hash = (53 * hash) + getAutopilotState();
      hash = (37 * hash) + MOVE_STATE_FIELD_NUMBER;
      hash = (53 * hash) + getMoveState();
      hash = (37 * hash) + IMPLE_WORK_STATE_FIELD_NUMBER;
      hash = (53 * hash) + getImpleWorkState();
      hash = (37 * hash) + PILOT_STATE_FIELD_NUMBER;
      hash = (53 * hash) + getPilotState();
      hash = (37 * hash) + CURTASK_TOTAL_MILEAGE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getCurtaskTotalMileage()));
      hash = (37 * hash) + CURTASK_TOTAL_WORKAREA_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getCurtaskTotalWorkarea()));
      hash = (37 * hash) + WORK_COMPLETION_PERCENT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getWorkCompletionPercent()));
      hash = (37 * hash) + CURPOSE_MAPPING_X_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getCurposeMappingX()));
      hash = (37 * hash) + CURPOSE_MAPPING_Y_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getCurposeMappingY()));
      hash = (37 * hash) + CUR_PATH_NUM_FIELD_NUMBER;
      hash = (53 * hash) + getCurPathNum();
      hash = (37 * hash) + TASK_STATE_FIELD_NUMBER;
      hash = (53 * hash) + getTaskState();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.PlanningInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.PlanningInfo)
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_PlanningInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_PlanningInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo.class, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo.Builder.class);
      }

      // Construct using com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        checkState_ = 0;

        hmiModeState_ = 0;

        workModeState_ = 0;

        autopilotCheckState_ = 0;

        autopilotState_ = 0;

        moveState_ = 0;

        impleWorkState_ = 0;

        pilotState_ = 0;

        curtaskTotalMileage_ = 0D;

        curtaskTotalWorkarea_ = 0D;

        workCompletionPercent_ = 0D;

        curposeMappingX_ = 0D;

        curposeMappingY_ = 0D;

        curPathNum_ = 0;

        taskState_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_PlanningInfo_descriptor;
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo getDefaultInstanceForType() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo.getDefaultInstance();
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo build() {
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo buildPartial() {
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo result = new com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo(this);
        result.checkState_ = checkState_;
        result.hmiModeState_ = hmiModeState_;
        result.workModeState_ = workModeState_;
        result.autopilotCheckState_ = autopilotCheckState_;
        result.autopilotState_ = autopilotState_;
        result.moveState_ = moveState_;
        result.impleWorkState_ = impleWorkState_;
        result.pilotState_ = pilotState_;
        result.curtaskTotalMileage_ = curtaskTotalMileage_;
        result.curtaskTotalWorkarea_ = curtaskTotalWorkarea_;
        result.workCompletionPercent_ = workCompletionPercent_;
        result.curposeMappingX_ = curposeMappingX_;
        result.curposeMappingY_ = curposeMappingY_;
        result.curPathNum_ = curPathNum_;
        result.taskState_ = taskState_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo) {
          return mergeFrom((com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo other) {
        if (other == com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo.getDefaultInstance()) return this;
        if (other.getCheckState() != 0) {
          setCheckState(other.getCheckState());
        }
        if (other.getHmiModeState() != 0) {
          setHmiModeState(other.getHmiModeState());
        }
        if (other.getWorkModeState() != 0) {
          setWorkModeState(other.getWorkModeState());
        }
        if (other.getAutopilotCheckState() != 0) {
          setAutopilotCheckState(other.getAutopilotCheckState());
        }
        if (other.getAutopilotState() != 0) {
          setAutopilotState(other.getAutopilotState());
        }
        if (other.getMoveState() != 0) {
          setMoveState(other.getMoveState());
        }
        if (other.getImpleWorkState() != 0) {
          setImpleWorkState(other.getImpleWorkState());
        }
        if (other.getPilotState() != 0) {
          setPilotState(other.getPilotState());
        }
        if (other.getCurtaskTotalMileage() != 0D) {
          setCurtaskTotalMileage(other.getCurtaskTotalMileage());
        }
        if (other.getCurtaskTotalWorkarea() != 0D) {
          setCurtaskTotalWorkarea(other.getCurtaskTotalWorkarea());
        }
        if (other.getWorkCompletionPercent() != 0D) {
          setWorkCompletionPercent(other.getWorkCompletionPercent());
        }
        if (other.getCurposeMappingX() != 0D) {
          setCurposeMappingX(other.getCurposeMappingX());
        }
        if (other.getCurposeMappingY() != 0D) {
          setCurposeMappingY(other.getCurposeMappingY());
        }
        if (other.getCurPathNum() != 0) {
          setCurPathNum(other.getCurPathNum());
        }
        if (other.getTaskState() != 0) {
          setTaskState(other.getTaskState());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int checkState_ ;
      /**
       * <pre>
       * 是否可以进行自动驾驶的自检状态 
       * </pre>
       *
       * <code>int32 check_state = 1;</code>
       * @return The checkState.
       */
      @java.lang.Override
      public int getCheckState() {
        return checkState_;
      }
      /**
       * <pre>
       * 是否可以进行自动驾驶的自检状态 
       * </pre>
       *
       * <code>int32 check_state = 1;</code>
       * @param value The checkState to set.
       * @return This builder for chaining.
       */
      public Builder setCheckState(int value) {
        
        checkState_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 是否可以进行自动驾驶的自检状态 
       * </pre>
       *
       * <code>int32 check_state = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearCheckState() {
        
        checkState_ = 0;
        onChanged();
        return this;
      }

      private int hmiModeState_ ;
      /**
       * <pre>
       * 当前交互终端类型
       * </pre>
       *
       * <code>int32 hmi_mode_state = 2;</code>
       * @return The hmiModeState.
       */
      @java.lang.Override
      public int getHmiModeState() {
        return hmiModeState_;
      }
      /**
       * <pre>
       * 当前交互终端类型
       * </pre>
       *
       * <code>int32 hmi_mode_state = 2;</code>
       * @param value The hmiModeState to set.
       * @return This builder for chaining.
       */
      public Builder setHmiModeState(int value) {
        
        hmiModeState_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 当前交互终端类型
       * </pre>
       *
       * <code>int32 hmi_mode_state = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearHmiModeState() {
        
        hmiModeState_ = 0;
        onChanged();
        return this;
      }

      private int workModeState_ ;
      /**
       * <pre>
       * 工作模式 单机2 多/主3 多/从4
       * </pre>
       *
       * <code>int32 work_mode_state = 3;</code>
       * @return The workModeState.
       */
      @java.lang.Override
      public int getWorkModeState() {
        return workModeState_;
      }
      /**
       * <pre>
       * 工作模式 单机2 多/主3 多/从4
       * </pre>
       *
       * <code>int32 work_mode_state = 3;</code>
       * @param value The workModeState to set.
       * @return This builder for chaining.
       */
      public Builder setWorkModeState(int value) {
        
        workModeState_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 工作模式 单机2 多/主3 多/从4
       * </pre>
       *
       * <code>int32 work_mode_state = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearWorkModeState() {
        
        workModeState_ = 0;
        onChanged();
        return this;
      }

      private int autopilotCheckState_ ;
      /**
       * <pre>
       * 自动驾驶自检状态 1无任务  任务不可用2  3任务可用 4 底盘准备中 ready:5  cancel_task:6
       * </pre>
       *
       * <code>int32 autopilot_check_state = 4;</code>
       * @return The autopilotCheckState.
       */
      @java.lang.Override
      public int getAutopilotCheckState() {
        return autopilotCheckState_;
      }
      /**
       * <pre>
       * 自动驾驶自检状态 1无任务  任务不可用2  3任务可用 4 底盘准备中 ready:5  cancel_task:6
       * </pre>
       *
       * <code>int32 autopilot_check_state = 4;</code>
       * @param value The autopilotCheckState to set.
       * @return This builder for chaining.
       */
      public Builder setAutopilotCheckState(int value) {
        
        autopilotCheckState_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 自动驾驶自检状态 1无任务  任务不可用2  3任务可用 4 底盘准备中 ready:5  cancel_task:6
       * </pre>
       *
       * <code>int32 autopilot_check_state = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearAutopilotCheckState() {
        
        autopilotCheckState_ = 0;
        onChanged();
        return this;
      }

      private int autopilotState_ ;
      /**
       * <pre>
       * 自动驾驶状态 start2 stop3 finish4 任务完成后会自动切回无任务状态
       * </pre>
       *
       * <code>int32 autopilot_state = 5;</code>
       * @return The autopilotState.
       */
      @java.lang.Override
      public int getAutopilotState() {
        return autopilotState_;
      }
      /**
       * <pre>
       * 自动驾驶状态 start2 stop3 finish4 任务完成后会自动切回无任务状态
       * </pre>
       *
       * <code>int32 autopilot_state = 5;</code>
       * @param value The autopilotState to set.
       * @return This builder for chaining.
       */
      public Builder setAutopilotState(int value) {
        
        autopilotState_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 自动驾驶状态 start2 stop3 finish4 任务完成后会自动切回无任务状态
       * </pre>
       *
       * <code>int32 autopilot_state = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearAutopilotState() {
        
        autopilotState_ = 0;
        onChanged();
        return this;
      }

      private int moveState_ ;
      /**
       * <pre>
       * 移动状态 1静止，底盘未移动 2移动状态  
       * </pre>
       *
       * <code>int32 move_state = 6;</code>
       * @return The moveState.
       */
      @java.lang.Override
      public int getMoveState() {
        return moveState_;
      }
      /**
       * <pre>
       * 移动状态 1静止，底盘未移动 2移动状态  
       * </pre>
       *
       * <code>int32 move_state = 6;</code>
       * @param value The moveState to set.
       * @return This builder for chaining.
       */
      public Builder setMoveState(int value) {
        
        moveState_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 移动状态 1静止，底盘未移动 2移动状态  
       * </pre>
       *
       * <code>int32 move_state = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearMoveState() {
        
        moveState_ = 0;
        onChanged();
        return this;
      }

      private int impleWorkState_ ;
      /**
       * <pre>
       * 农机具作业状态 1未作业 2正在作业
       * </pre>
       *
       * <code>int32 imple_work_state = 7;</code>
       * @return The impleWorkState.
       */
      @java.lang.Override
      public int getImpleWorkState() {
        return impleWorkState_;
      }
      /**
       * <pre>
       * 农机具作业状态 1未作业 2正在作业
       * </pre>
       *
       * <code>int32 imple_work_state = 7;</code>
       * @param value The impleWorkState to set.
       * @return This builder for chaining.
       */
      public Builder setImpleWorkState(int value) {
        
        impleWorkState_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 农机具作业状态 1未作业 2正在作业
       * </pre>
       *
       * <code>int32 imple_work_state = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearImpleWorkState() {
        
        impleWorkState_ = 0;
        onChanged();
        return this;
      }

      private int pilotState_ ;
      /**
       * <pre>
       * 1:auto  2:human
       * </pre>
       *
       * <code>int32 pilot_state = 8;</code>
       * @return The pilotState.
       */
      @java.lang.Override
      public int getPilotState() {
        return pilotState_;
      }
      /**
       * <pre>
       * 1:auto  2:human
       * </pre>
       *
       * <code>int32 pilot_state = 8;</code>
       * @param value The pilotState to set.
       * @return This builder for chaining.
       */
      public Builder setPilotState(int value) {
        
        pilotState_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 1:auto  2:human
       * </pre>
       *
       * <code>int32 pilot_state = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearPilotState() {
        
        pilotState_ = 0;
        onChanged();
        return this;
      }

      private double curtaskTotalMileage_ ;
      /**
       * <pre>
       * 当前任务下，地盘行驶的总里程
       * </pre>
       *
       * <code>double curtask_total_mileage = 9;</code>
       * @return The curtaskTotalMileage.
       */
      @java.lang.Override
      public double getCurtaskTotalMileage() {
        return curtaskTotalMileage_;
      }
      /**
       * <pre>
       * 当前任务下，地盘行驶的总里程
       * </pre>
       *
       * <code>double curtask_total_mileage = 9;</code>
       * @param value The curtaskTotalMileage to set.
       * @return This builder for chaining.
       */
      public Builder setCurtaskTotalMileage(double value) {
        
        curtaskTotalMileage_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 当前任务下，地盘行驶的总里程
       * </pre>
       *
       * <code>double curtask_total_mileage = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearCurtaskTotalMileage() {
        
        curtaskTotalMileage_ = 0D;
        onChanged();
        return this;
      }

      private double curtaskTotalWorkarea_ ;
      /**
       * <pre>
       * 当前任务下，总的已作业面积
       * </pre>
       *
       * <code>double curtask_total_workarea = 10;</code>
       * @return The curtaskTotalWorkarea.
       */
      @java.lang.Override
      public double getCurtaskTotalWorkarea() {
        return curtaskTotalWorkarea_;
      }
      /**
       * <pre>
       * 当前任务下，总的已作业面积
       * </pre>
       *
       * <code>double curtask_total_workarea = 10;</code>
       * @param value The curtaskTotalWorkarea to set.
       * @return This builder for chaining.
       */
      public Builder setCurtaskTotalWorkarea(double value) {
        
        curtaskTotalWorkarea_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 当前任务下，总的已作业面积
       * </pre>
       *
       * <code>double curtask_total_workarea = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearCurtaskTotalWorkarea() {
        
        curtaskTotalWorkarea_ = 0D;
        onChanged();
        return this;
      }

      private double workCompletionPercent_ ;
      /**
       * <pre>
       * 当前任务下，已完成任务百分比
       * </pre>
       *
       * <code>double work_completion_percent = 11;</code>
       * @return The workCompletionPercent.
       */
      @java.lang.Override
      public double getWorkCompletionPercent() {
        return workCompletionPercent_;
      }
      /**
       * <pre>
       * 当前任务下，已完成任务百分比
       * </pre>
       *
       * <code>double work_completion_percent = 11;</code>
       * @param value The workCompletionPercent to set.
       * @return This builder for chaining.
       */
      public Builder setWorkCompletionPercent(double value) {
        
        workCompletionPercent_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 当前任务下，已完成任务百分比
       * </pre>
       *
       * <code>double work_completion_percent = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearWorkCompletionPercent() {
        
        workCompletionPercent_ = 0D;
        onChanged();
        return this;
      }

      private double curposeMappingX_ ;
      /**
       * <pre>
       * 当前X坐标在路径点上的映射
       * </pre>
       *
       * <code>double curpose_mapping_x = 12;</code>
       * @return The curposeMappingX.
       */
      @java.lang.Override
      public double getCurposeMappingX() {
        return curposeMappingX_;
      }
      /**
       * <pre>
       * 当前X坐标在路径点上的映射
       * </pre>
       *
       * <code>double curpose_mapping_x = 12;</code>
       * @param value The curposeMappingX to set.
       * @return This builder for chaining.
       */
      public Builder setCurposeMappingX(double value) {
        
        curposeMappingX_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 当前X坐标在路径点上的映射
       * </pre>
       *
       * <code>double curpose_mapping_x = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearCurposeMappingX() {
        
        curposeMappingX_ = 0D;
        onChanged();
        return this;
      }

      private double curposeMappingY_ ;
      /**
       * <pre>
       * 当前Y坐标在路径点上的映射
       * </pre>
       *
       * <code>double curpose_mapping_y = 13;</code>
       * @return The curposeMappingY.
       */
      @java.lang.Override
      public double getCurposeMappingY() {
        return curposeMappingY_;
      }
      /**
       * <pre>
       * 当前Y坐标在路径点上的映射
       * </pre>
       *
       * <code>double curpose_mapping_y = 13;</code>
       * @param value The curposeMappingY to set.
       * @return This builder for chaining.
       */
      public Builder setCurposeMappingY(double value) {
        
        curposeMappingY_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 当前Y坐标在路径点上的映射
       * </pre>
       *
       * <code>double curpose_mapping_y = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearCurposeMappingY() {
        
        curposeMappingY_ = 0D;
        onChanged();
        return this;
      }

      private int curPathNum_ ;
      /**
       * <pre>
       * 当前作业路径段标号 
       * </pre>
       *
       * <code>int32 cur_path_num = 14;</code>
       * @return The curPathNum.
       */
      @java.lang.Override
      public int getCurPathNum() {
        return curPathNum_;
      }
      /**
       * <pre>
       * 当前作业路径段标号 
       * </pre>
       *
       * <code>int32 cur_path_num = 14;</code>
       * @param value The curPathNum to set.
       * @return This builder for chaining.
       */
      public Builder setCurPathNum(int value) {
        
        curPathNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 当前作业路径段标号 
       * </pre>
       *
       * <code>int32 cur_path_num = 14;</code>
       * @return This builder for chaining.
       */
      public Builder clearCurPathNum() {
        
        curPathNum_ = 0;
        onChanged();
        return this;
      }

      private int taskState_ ;
      /**
       * <pre>
       *作业执行状态  1未执行   2正在执行  3 执行完成 4cancel task
       * </pre>
       *
       * <code>int32 task_state = 15;</code>
       * @return The taskState.
       */
      @java.lang.Override
      public int getTaskState() {
        return taskState_;
      }
      /**
       * <pre>
       *作业执行状态  1未执行   2正在执行  3 执行完成 4cancel task
       * </pre>
       *
       * <code>int32 task_state = 15;</code>
       * @param value The taskState to set.
       * @return This builder for chaining.
       */
      public Builder setTaskState(int value) {
        
        taskState_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *作业执行状态  1未执行   2正在执行  3 执行完成 4cancel task
       * </pre>
       *
       * <code>int32 task_state = 15;</code>
       * @return This builder for chaining.
       */
      public Builder clearTaskState() {
        
        taskState_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.PlanningInfo)
    }

    // @@protoc_insertion_point(class_scope:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.PlanningInfo)
    private static final com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo();
    }

    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<PlanningInfo>
        PARSER = new com.google.protobuf.AbstractParser<PlanningInfo>() {
      @java.lang.Override
      public PlanningInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PlanningInfo(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<PlanningInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<PlanningInfo> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.PlanningInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LocalizationInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.LocalizationInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *实时速度
     * </pre>
     *
     * <code>double rtk_vel = 1;</code>
     * @return The rtkVel.
     */
    double getRtkVel();

    /**
     * <pre>
     *解状态
     * </pre>
     *
     * <code>int32 rtk_status = 2;</code>
     * @return The rtkStatus.
     */
    int getRtkStatus();

    /**
     * <pre>
     *GNSS当期使用卫星数
     * </pre>
     *
     * <code>int32 gnss_sate_num = 3;</code>
     * @return The gnssSateNum.
     */
    int getGnssSateNum();

    /**
     * <pre>
     *东坐标
     * </pre>
     *
     * <code>double x = 4;</code>
     * @return The x.
     */
    double getX();

    /**
     * <pre>
     *北坐标
     * </pre>
     *
     * <code>double y = 5;</code>
     * @return The y.
     */
    double getY();

    /**
     * <pre>
     *天坐标
     * </pre>
     *
     * <code>double z = 6;</code>
     * @return The z.
     */
    double getZ();

    /**
     * <pre>
     *航向角
     * </pre>
     *
     * <code>double yaw = 7;</code>
     * @return The yaw.
     */
    double getYaw();

    /**
     * <pre>
     *俯仰角
     * </pre>
     *
     * <code>double pitch = 8;</code>
     * @return The pitch.
     */
    double getPitch();

    /**
     * <pre>
     *横滚角
     * </pre>
     *
     * <code>double roll = 9;</code>
     * @return The roll.
     */
    double getRoll();

    /**
     * <pre>
     *经度
     * </pre>
     *
     * <code>double longitude = 10;</code>
     * @return The longitude.
     */
    double getLongitude();

    /**
     * <pre>
     *纬度
     * </pre>
     *
     * <code>double latitude = 11;</code>
     * @return The latitude.
     */
    double getLatitude();

    /**
     * <pre>
     *高程
     * </pre>
     *
     * <code>double height = 12;</code>
     * @return The height.
     */
    double getHeight();

    /**
     * <pre>
     * </pre>
     *
     * <code>double rtk_vel_direction = 13;</code>
     * @return The rtkVelDirection.
     */
    double getRtkVelDirection();

    /**
     * <pre>
     *差分龄期
     * </pre>
     *
     * <code>int32 diff_age_time = 14;</code>
     * @return The diffAgeTime.
     */
    int getDiffAgeTime();

    /**
     * <pre>
     *从天线定位解状态
     * </pre>
     *
     * <code>int32 slave_ant_gnss_quality = 15;</code>
     * @return The slaveAntGnssQuality.
     */
    int getSlaveAntGnssQuality();

    /**
     * <pre>
     *#年
     * </pre>
     *
     * <code>int32 year = 16;</code>
     * @return The year.
     */
    int getYear();

    /**
     * <pre>
     *#月
     * </pre>
     *
     * <code>int32 month = 17;</code>
     * @return The month.
     */
    int getMonth();

    /**
     * <pre>
     *#日
     * </pre>
     *
     * <code>int32 date = 18;</code>
     * @return The date.
     */
    int getDate();

    /**
     * <pre>
     *#时
     * </pre>
     *
     * <code>int32 hour = 19;</code>
     * @return The hour.
     */
    int getHour();

    /**
     * <pre>
     *#分
     * </pre>
     *
     * <code>int32 minute = 20;</code>
     * @return The minute.
     */
    int getMinute();

    /**
     * <pre>
     *#秒
     * </pre>
     *
     * <code>double second = 21;</code>
     * @return The second.
     */
    double getSecond();
  }
  /**
   * Protobuf type {@code com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.LocalizationInfo}
   */
  public static final class LocalizationInfo extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.LocalizationInfo)
      LocalizationInfoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use LocalizationInfo.newBuilder() to construct.
    private LocalizationInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private LocalizationInfo() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new LocalizationInfo();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private LocalizationInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 9: {

              rtkVel_ = input.readDouble();
              break;
            }
            case 16: {

              rtkStatus_ = input.readInt32();
              break;
            }
            case 24: {

              gnssSateNum_ = input.readInt32();
              break;
            }
            case 33: {

              x_ = input.readDouble();
              break;
            }
            case 41: {

              y_ = input.readDouble();
              break;
            }
            case 49: {

              z_ = input.readDouble();
              break;
            }
            case 57: {

              yaw_ = input.readDouble();
              break;
            }
            case 65: {

              pitch_ = input.readDouble();
              break;
            }
            case 73: {

              roll_ = input.readDouble();
              break;
            }
            case 81: {

              longitude_ = input.readDouble();
              break;
            }
            case 89: {

              latitude_ = input.readDouble();
              break;
            }
            case 97: {

              height_ = input.readDouble();
              break;
            }
            case 105: {

              rtkVelDirection_ = input.readDouble();
              break;
            }
            case 112: {

              diffAgeTime_ = input.readInt32();
              break;
            }
            case 120: {

              slaveAntGnssQuality_ = input.readInt32();
              break;
            }
            case 128: {

              year_ = input.readInt32();
              break;
            }
            case 136: {

              month_ = input.readInt32();
              break;
            }
            case 144: {

              date_ = input.readInt32();
              break;
            }
            case 152: {

              hour_ = input.readInt32();
              break;
            }
            case 160: {

              minute_ = input.readInt32();
              break;
            }
            case 169: {

              second_ = input.readDouble();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_LocalizationInfo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_LocalizationInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo.class, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo.Builder.class);
    }

    public static final int RTK_VEL_FIELD_NUMBER = 1;
    private double rtkVel_;
    /**
     * <pre>
     *实时速度
     * </pre>
     *
     * <code>double rtk_vel = 1;</code>
     * @return The rtkVel.
     */
    @java.lang.Override
    public double getRtkVel() {
      return rtkVel_;
    }

    public static final int RTK_STATUS_FIELD_NUMBER = 2;
    private int rtkStatus_;
    /**
     * <pre>
     *解状态
     * </pre>
     *
     * <code>int32 rtk_status = 2;</code>
     * @return The rtkStatus.
     */
    @java.lang.Override
    public int getRtkStatus() {
      return rtkStatus_;
    }

    public static final int GNSS_SATE_NUM_FIELD_NUMBER = 3;
    private int gnssSateNum_;
    /**
     * <pre>
     *GNSS当期使用卫星数
     * </pre>
     *
     * <code>int32 gnss_sate_num = 3;</code>
     * @return The gnssSateNum.
     */
    @java.lang.Override
    public int getGnssSateNum() {
      return gnssSateNum_;
    }

    public static final int X_FIELD_NUMBER = 4;
    private double x_;
    /**
     * <pre>
     *东坐标
     * </pre>
     *
     * <code>double x = 4;</code>
     * @return The x.
     */
    @java.lang.Override
    public double getX() {
      return x_;
    }

    public static final int Y_FIELD_NUMBER = 5;
    private double y_;
    /**
     * <pre>
     *北坐标
     * </pre>
     *
     * <code>double y = 5;</code>
     * @return The y.
     */
    @java.lang.Override
    public double getY() {
      return y_;
    }

    public static final int Z_FIELD_NUMBER = 6;
    private double z_;
    /**
     * <pre>
     *天坐标
     * </pre>
     *
     * <code>double z = 6;</code>
     * @return The z.
     */
    @java.lang.Override
    public double getZ() {
      return z_;
    }

    public static final int YAW_FIELD_NUMBER = 7;
    private double yaw_;
    /**
     * <pre>
     *航向角
     * </pre>
     *
     * <code>double yaw = 7;</code>
     * @return The yaw.
     */
    @java.lang.Override
    public double getYaw() {
      return yaw_;
    }

    public static final int PITCH_FIELD_NUMBER = 8;
    private double pitch_;
    /**
     * <pre>
     *俯仰角
     * </pre>
     *
     * <code>double pitch = 8;</code>
     * @return The pitch.
     */
    @java.lang.Override
    public double getPitch() {
      return pitch_;
    }

    public static final int ROLL_FIELD_NUMBER = 9;
    private double roll_;
    /**
     * <pre>
     *横滚角
     * </pre>
     *
     * <code>double roll = 9;</code>
     * @return The roll.
     */
    @java.lang.Override
    public double getRoll() {
      return roll_;
    }

    public static final int LONGITUDE_FIELD_NUMBER = 10;
    private double longitude_;
    /**
     * <pre>
     *经度
     * </pre>
     *
     * <code>double longitude = 10;</code>
     * @return The longitude.
     */
    @java.lang.Override
    public double getLongitude() {
      return longitude_;
    }

    public static final int LATITUDE_FIELD_NUMBER = 11;
    private double latitude_;
    /**
     * <pre>
     *纬度
     * </pre>
     *
     * <code>double latitude = 11;</code>
     * @return The latitude.
     */
    @java.lang.Override
    public double getLatitude() {
      return latitude_;
    }

    public static final int HEIGHT_FIELD_NUMBER = 12;
    private double height_;
    /**
     * <pre>
     *高程
     * </pre>
     *
     * <code>double height = 12;</code>
     * @return The height.
     */
    @java.lang.Override
    public double getHeight() {
      return height_;
    }

    public static final int RTK_VEL_DIRECTION_FIELD_NUMBER = 13;
    private double rtkVelDirection_;
    /**
     * <pre>
     * </pre>
     *
     * <code>double rtk_vel_direction = 13;</code>
     * @return The rtkVelDirection.
     */
    @java.lang.Override
    public double getRtkVelDirection() {
      return rtkVelDirection_;
    }

    public static final int DIFF_AGE_TIME_FIELD_NUMBER = 14;
    private int diffAgeTime_;
    /**
     * <pre>
     *差分龄期
     * </pre>
     *
     * <code>int32 diff_age_time = 14;</code>
     * @return The diffAgeTime.
     */
    @java.lang.Override
    public int getDiffAgeTime() {
      return diffAgeTime_;
    }

    public static final int SLAVE_ANT_GNSS_QUALITY_FIELD_NUMBER = 15;
    private int slaveAntGnssQuality_;
    /**
     * <pre>
     *从天线定位解状态
     * </pre>
     *
     * <code>int32 slave_ant_gnss_quality = 15;</code>
     * @return The slaveAntGnssQuality.
     */
    @java.lang.Override
    public int getSlaveAntGnssQuality() {
      return slaveAntGnssQuality_;
    }

    public static final int YEAR_FIELD_NUMBER = 16;
    private int year_;
    /**
     * <pre>
     *#年
     * </pre>
     *
     * <code>int32 year = 16;</code>
     * @return The year.
     */
    @java.lang.Override
    public int getYear() {
      return year_;
    }

    public static final int MONTH_FIELD_NUMBER = 17;
    private int month_;
    /**
     * <pre>
     *#月
     * </pre>
     *
     * <code>int32 month = 17;</code>
     * @return The month.
     */
    @java.lang.Override
    public int getMonth() {
      return month_;
    }

    public static final int DATE_FIELD_NUMBER = 18;
    private int date_;
    /**
     * <pre>
     *#日
     * </pre>
     *
     * <code>int32 date = 18;</code>
     * @return The date.
     */
    @java.lang.Override
    public int getDate() {
      return date_;
    }

    public static final int HOUR_FIELD_NUMBER = 19;
    private int hour_;
    /**
     * <pre>
     *#时
     * </pre>
     *
     * <code>int32 hour = 19;</code>
     * @return The hour.
     */
    @java.lang.Override
    public int getHour() {
      return hour_;
    }

    public static final int MINUTE_FIELD_NUMBER = 20;
    private int minute_;
    /**
     * <pre>
     *#分
     * </pre>
     *
     * <code>int32 minute = 20;</code>
     * @return The minute.
     */
    @java.lang.Override
    public int getMinute() {
      return minute_;
    }

    public static final int SECOND_FIELD_NUMBER = 21;
    private double second_;
    /**
     * <pre>
     *#秒
     * </pre>
     *
     * <code>double second = 21;</code>
     * @return The second.
     */
    @java.lang.Override
    public double getSecond() {
      return second_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (rtkVel_ != 0D) {
        output.writeDouble(1, rtkVel_);
      }
      if (rtkStatus_ != 0) {
        output.writeInt32(2, rtkStatus_);
      }
      if (gnssSateNum_ != 0) {
        output.writeInt32(3, gnssSateNum_);
      }
      if (x_ != 0D) {
        output.writeDouble(4, x_);
      }
      if (y_ != 0D) {
        output.writeDouble(5, y_);
      }
      if (z_ != 0D) {
        output.writeDouble(6, z_);
      }
      if (yaw_ != 0D) {
        output.writeDouble(7, yaw_);
      }
      if (pitch_ != 0D) {
        output.writeDouble(8, pitch_);
      }
      if (roll_ != 0D) {
        output.writeDouble(9, roll_);
      }
      if (longitude_ != 0D) {
        output.writeDouble(10, longitude_);
      }
      if (latitude_ != 0D) {
        output.writeDouble(11, latitude_);
      }
      if (height_ != 0D) {
        output.writeDouble(12, height_);
      }
      if (rtkVelDirection_ != 0D) {
        output.writeDouble(13, rtkVelDirection_);
      }
      if (diffAgeTime_ != 0) {
        output.writeInt32(14, diffAgeTime_);
      }
      if (slaveAntGnssQuality_ != 0) {
        output.writeInt32(15, slaveAntGnssQuality_);
      }
      if (year_ != 0) {
        output.writeInt32(16, year_);
      }
      if (month_ != 0) {
        output.writeInt32(17, month_);
      }
      if (date_ != 0) {
        output.writeInt32(18, date_);
      }
      if (hour_ != 0) {
        output.writeInt32(19, hour_);
      }
      if (minute_ != 0) {
        output.writeInt32(20, minute_);
      }
      if (second_ != 0D) {
        output.writeDouble(21, second_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (rtkVel_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, rtkVel_);
      }
      if (rtkStatus_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, rtkStatus_);
      }
      if (gnssSateNum_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, gnssSateNum_);
      }
      if (x_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, x_);
      }
      if (y_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, y_);
      }
      if (z_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, z_);
      }
      if (yaw_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, yaw_);
      }
      if (pitch_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(8, pitch_);
      }
      if (roll_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(9, roll_);
      }
      if (longitude_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(10, longitude_);
      }
      if (latitude_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(11, latitude_);
      }
      if (height_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(12, height_);
      }
      if (rtkVelDirection_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(13, rtkVelDirection_);
      }
      if (diffAgeTime_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, diffAgeTime_);
      }
      if (slaveAntGnssQuality_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, slaveAntGnssQuality_);
      }
      if (year_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, year_);
      }
      if (month_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(17, month_);
      }
      if (date_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(18, date_);
      }
      if (hour_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(19, hour_);
      }
      if (minute_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(20, minute_);
      }
      if (second_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(21, second_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo)) {
        return super.equals(obj);
      }
      com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo other = (com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo) obj;

      if (java.lang.Double.doubleToLongBits(getRtkVel())
          != java.lang.Double.doubleToLongBits(
              other.getRtkVel())) return false;
      if (getRtkStatus()
          != other.getRtkStatus()) return false;
      if (getGnssSateNum()
          != other.getGnssSateNum()) return false;
      if (java.lang.Double.doubleToLongBits(getX())
          != java.lang.Double.doubleToLongBits(
              other.getX())) return false;
      if (java.lang.Double.doubleToLongBits(getY())
          != java.lang.Double.doubleToLongBits(
              other.getY())) return false;
      if (java.lang.Double.doubleToLongBits(getZ())
          != java.lang.Double.doubleToLongBits(
              other.getZ())) return false;
      if (java.lang.Double.doubleToLongBits(getYaw())
          != java.lang.Double.doubleToLongBits(
              other.getYaw())) return false;
      if (java.lang.Double.doubleToLongBits(getPitch())
          != java.lang.Double.doubleToLongBits(
              other.getPitch())) return false;
      if (java.lang.Double.doubleToLongBits(getRoll())
          != java.lang.Double.doubleToLongBits(
              other.getRoll())) return false;
      if (java.lang.Double.doubleToLongBits(getLongitude())
          != java.lang.Double.doubleToLongBits(
              other.getLongitude())) return false;
      if (java.lang.Double.doubleToLongBits(getLatitude())
          != java.lang.Double.doubleToLongBits(
              other.getLatitude())) return false;
      if (java.lang.Double.doubleToLongBits(getHeight())
          != java.lang.Double.doubleToLongBits(
              other.getHeight())) return false;
      if (java.lang.Double.doubleToLongBits(getRtkVelDirection())
          != java.lang.Double.doubleToLongBits(
              other.getRtkVelDirection())) return false;
      if (getDiffAgeTime()
          != other.getDiffAgeTime()) return false;
      if (getSlaveAntGnssQuality()
          != other.getSlaveAntGnssQuality()) return false;
      if (getYear()
          != other.getYear()) return false;
      if (getMonth()
          != other.getMonth()) return false;
      if (getDate()
          != other.getDate()) return false;
      if (getHour()
          != other.getHour()) return false;
      if (getMinute()
          != other.getMinute()) return false;
      if (java.lang.Double.doubleToLongBits(getSecond())
          != java.lang.Double.doubleToLongBits(
              other.getSecond())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + RTK_VEL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getRtkVel()));
      hash = (37 * hash) + RTK_STATUS_FIELD_NUMBER;
      hash = (53 * hash) + getRtkStatus();
      hash = (37 * hash) + GNSS_SATE_NUM_FIELD_NUMBER;
      hash = (53 * hash) + getGnssSateNum();
      hash = (37 * hash) + X_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getX()));
      hash = (37 * hash) + Y_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getY()));
      hash = (37 * hash) + Z_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getZ()));
      hash = (37 * hash) + YAW_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getYaw()));
      hash = (37 * hash) + PITCH_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getPitch()));
      hash = (37 * hash) + ROLL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getRoll()));
      hash = (37 * hash) + LONGITUDE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getLongitude()));
      hash = (37 * hash) + LATITUDE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getLatitude()));
      hash = (37 * hash) + HEIGHT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getHeight()));
      hash = (37 * hash) + RTK_VEL_DIRECTION_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getRtkVelDirection()));
      hash = (37 * hash) + DIFF_AGE_TIME_FIELD_NUMBER;
      hash = (53 * hash) + getDiffAgeTime();
      hash = (37 * hash) + SLAVE_ANT_GNSS_QUALITY_FIELD_NUMBER;
      hash = (53 * hash) + getSlaveAntGnssQuality();
      hash = (37 * hash) + YEAR_FIELD_NUMBER;
      hash = (53 * hash) + getYear();
      hash = (37 * hash) + MONTH_FIELD_NUMBER;
      hash = (53 * hash) + getMonth();
      hash = (37 * hash) + DATE_FIELD_NUMBER;
      hash = (53 * hash) + getDate();
      hash = (37 * hash) + HOUR_FIELD_NUMBER;
      hash = (53 * hash) + getHour();
      hash = (37 * hash) + MINUTE_FIELD_NUMBER;
      hash = (53 * hash) + getMinute();
      hash = (37 * hash) + SECOND_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getSecond()));
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.LocalizationInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.LocalizationInfo)
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_LocalizationInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_LocalizationInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo.class, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo.Builder.class);
      }

      // Construct using com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        rtkVel_ = 0D;

        rtkStatus_ = 0;

        gnssSateNum_ = 0;

        x_ = 0D;

        y_ = 0D;

        z_ = 0D;

        yaw_ = 0D;

        pitch_ = 0D;

        roll_ = 0D;

        longitude_ = 0D;

        latitude_ = 0D;

        height_ = 0D;

        rtkVelDirection_ = 0D;

        diffAgeTime_ = 0;

        slaveAntGnssQuality_ = 0;

        year_ = 0;

        month_ = 0;

        date_ = 0;

        hour_ = 0;

        minute_ = 0;

        second_ = 0D;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_LocalizationInfo_descriptor;
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo getDefaultInstanceForType() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo.getDefaultInstance();
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo build() {
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo buildPartial() {
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo result = new com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo(this);
        result.rtkVel_ = rtkVel_;
        result.rtkStatus_ = rtkStatus_;
        result.gnssSateNum_ = gnssSateNum_;
        result.x_ = x_;
        result.y_ = y_;
        result.z_ = z_;
        result.yaw_ = yaw_;
        result.pitch_ = pitch_;
        result.roll_ = roll_;
        result.longitude_ = longitude_;
        result.latitude_ = latitude_;
        result.height_ = height_;
        result.rtkVelDirection_ = rtkVelDirection_;
        result.diffAgeTime_ = diffAgeTime_;
        result.slaveAntGnssQuality_ = slaveAntGnssQuality_;
        result.year_ = year_;
        result.month_ = month_;
        result.date_ = date_;
        result.hour_ = hour_;
        result.minute_ = minute_;
        result.second_ = second_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo) {
          return mergeFrom((com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo other) {
        if (other == com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo.getDefaultInstance()) return this;
        if (other.getRtkVel() != 0D) {
          setRtkVel(other.getRtkVel());
        }
        if (other.getRtkStatus() != 0) {
          setRtkStatus(other.getRtkStatus());
        }
        if (other.getGnssSateNum() != 0) {
          setGnssSateNum(other.getGnssSateNum());
        }
        if (other.getX() != 0D) {
          setX(other.getX());
        }
        if (other.getY() != 0D) {
          setY(other.getY());
        }
        if (other.getZ() != 0D) {
          setZ(other.getZ());
        }
        if (other.getYaw() != 0D) {
          setYaw(other.getYaw());
        }
        if (other.getPitch() != 0D) {
          setPitch(other.getPitch());
        }
        if (other.getRoll() != 0D) {
          setRoll(other.getRoll());
        }
        if (other.getLongitude() != 0D) {
          setLongitude(other.getLongitude());
        }
        if (other.getLatitude() != 0D) {
          setLatitude(other.getLatitude());
        }
        if (other.getHeight() != 0D) {
          setHeight(other.getHeight());
        }
        if (other.getRtkVelDirection() != 0D) {
          setRtkVelDirection(other.getRtkVelDirection());
        }
        if (other.getDiffAgeTime() != 0) {
          setDiffAgeTime(other.getDiffAgeTime());
        }
        if (other.getSlaveAntGnssQuality() != 0) {
          setSlaveAntGnssQuality(other.getSlaveAntGnssQuality());
        }
        if (other.getYear() != 0) {
          setYear(other.getYear());
        }
        if (other.getMonth() != 0) {
          setMonth(other.getMonth());
        }
        if (other.getDate() != 0) {
          setDate(other.getDate());
        }
        if (other.getHour() != 0) {
          setHour(other.getHour());
        }
        if (other.getMinute() != 0) {
          setMinute(other.getMinute());
        }
        if (other.getSecond() != 0D) {
          setSecond(other.getSecond());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private double rtkVel_ ;
      /**
       * <pre>
       *实时速度
       * </pre>
       *
       * <code>double rtk_vel = 1;</code>
       * @return The rtkVel.
       */
      @java.lang.Override
      public double getRtkVel() {
        return rtkVel_;
      }
      /**
       * <pre>
       *实时速度
       * </pre>
       *
       * <code>double rtk_vel = 1;</code>
       * @param value The rtkVel to set.
       * @return This builder for chaining.
       */
      public Builder setRtkVel(double value) {
        
        rtkVel_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *实时速度
       * </pre>
       *
       * <code>double rtk_vel = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearRtkVel() {
        
        rtkVel_ = 0D;
        onChanged();
        return this;
      }

      private int rtkStatus_ ;
      /**
       * <pre>
       *解状态
       * </pre>
       *
       * <code>int32 rtk_status = 2;</code>
       * @return The rtkStatus.
       */
      @java.lang.Override
      public int getRtkStatus() {
        return rtkStatus_;
      }
      /**
       * <pre>
       *解状态
       * </pre>
       *
       * <code>int32 rtk_status = 2;</code>
       * @param value The rtkStatus to set.
       * @return This builder for chaining.
       */
      public Builder setRtkStatus(int value) {
        
        rtkStatus_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *解状态
       * </pre>
       *
       * <code>int32 rtk_status = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearRtkStatus() {
        
        rtkStatus_ = 0;
        onChanged();
        return this;
      }

      private int gnssSateNum_ ;
      /**
       * <pre>
       *GNSS当期使用卫星数
       * </pre>
       *
       * <code>int32 gnss_sate_num = 3;</code>
       * @return The gnssSateNum.
       */
      @java.lang.Override
      public int getGnssSateNum() {
        return gnssSateNum_;
      }
      /**
       * <pre>
       *GNSS当期使用卫星数
       * </pre>
       *
       * <code>int32 gnss_sate_num = 3;</code>
       * @param value The gnssSateNum to set.
       * @return This builder for chaining.
       */
      public Builder setGnssSateNum(int value) {
        
        gnssSateNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *GNSS当期使用卫星数
       * </pre>
       *
       * <code>int32 gnss_sate_num = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearGnssSateNum() {
        
        gnssSateNum_ = 0;
        onChanged();
        return this;
      }

      private double x_ ;
      /**
       * <pre>
       *东坐标
       * </pre>
       *
       * <code>double x = 4;</code>
       * @return The x.
       */
      @java.lang.Override
      public double getX() {
        return x_;
      }
      /**
       * <pre>
       *东坐标
       * </pre>
       *
       * <code>double x = 4;</code>
       * @param value The x to set.
       * @return This builder for chaining.
       */
      public Builder setX(double value) {
        
        x_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *东坐标
       * </pre>
       *
       * <code>double x = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearX() {
        
        x_ = 0D;
        onChanged();
        return this;
      }

      private double y_ ;
      /**
       * <pre>
       *北坐标
       * </pre>
       *
       * <code>double y = 5;</code>
       * @return The y.
       */
      @java.lang.Override
      public double getY() {
        return y_;
      }
      /**
       * <pre>
       *北坐标
       * </pre>
       *
       * <code>double y = 5;</code>
       * @param value The y to set.
       * @return This builder for chaining.
       */
      public Builder setY(double value) {
        
        y_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *北坐标
       * </pre>
       *
       * <code>double y = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearY() {
        
        y_ = 0D;
        onChanged();
        return this;
      }

      private double z_ ;
      /**
       * <pre>
       *天坐标
       * </pre>
       *
       * <code>double z = 6;</code>
       * @return The z.
       */
      @java.lang.Override
      public double getZ() {
        return z_;
      }
      /**
       * <pre>
       *天坐标
       * </pre>
       *
       * <code>double z = 6;</code>
       * @param value The z to set.
       * @return This builder for chaining.
       */
      public Builder setZ(double value) {
        
        z_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *天坐标
       * </pre>
       *
       * <code>double z = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearZ() {
        
        z_ = 0D;
        onChanged();
        return this;
      }

      private double yaw_ ;
      /**
       * <pre>
       *航向角
       * </pre>
       *
       * <code>double yaw = 7;</code>
       * @return The yaw.
       */
      @java.lang.Override
      public double getYaw() {
        return yaw_;
      }
      /**
       * <pre>
       *航向角
       * </pre>
       *
       * <code>double yaw = 7;</code>
       * @param value The yaw to set.
       * @return This builder for chaining.
       */
      public Builder setYaw(double value) {
        
        yaw_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *航向角
       * </pre>
       *
       * <code>double yaw = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearYaw() {
        
        yaw_ = 0D;
        onChanged();
        return this;
      }

      private double pitch_ ;
      /**
       * <pre>
       *俯仰角
       * </pre>
       *
       * <code>double pitch = 8;</code>
       * @return The pitch.
       */
      @java.lang.Override
      public double getPitch() {
        return pitch_;
      }
      /**
       * <pre>
       *俯仰角
       * </pre>
       *
       * <code>double pitch = 8;</code>
       * @param value The pitch to set.
       * @return This builder for chaining.
       */
      public Builder setPitch(double value) {
        
        pitch_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *俯仰角
       * </pre>
       *
       * <code>double pitch = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearPitch() {
        
        pitch_ = 0D;
        onChanged();
        return this;
      }

      private double roll_ ;
      /**
       * <pre>
       *横滚角
       * </pre>
       *
       * <code>double roll = 9;</code>
       * @return The roll.
       */
      @java.lang.Override
      public double getRoll() {
        return roll_;
      }
      /**
       * <pre>
       *横滚角
       * </pre>
       *
       * <code>double roll = 9;</code>
       * @param value The roll to set.
       * @return This builder for chaining.
       */
      public Builder setRoll(double value) {
        
        roll_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *横滚角
       * </pre>
       *
       * <code>double roll = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearRoll() {
        
        roll_ = 0D;
        onChanged();
        return this;
      }

      private double longitude_ ;
      /**
       * <pre>
       *经度
       * </pre>
       *
       * <code>double longitude = 10;</code>
       * @return The longitude.
       */
      @java.lang.Override
      public double getLongitude() {
        return longitude_;
      }
      /**
       * <pre>
       *经度
       * </pre>
       *
       * <code>double longitude = 10;</code>
       * @param value The longitude to set.
       * @return This builder for chaining.
       */
      public Builder setLongitude(double value) {
        
        longitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *经度
       * </pre>
       *
       * <code>double longitude = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearLongitude() {
        
        longitude_ = 0D;
        onChanged();
        return this;
      }

      private double latitude_ ;
      /**
       * <pre>
       *纬度
       * </pre>
       *
       * <code>double latitude = 11;</code>
       * @return The latitude.
       */
      @java.lang.Override
      public double getLatitude() {
        return latitude_;
      }
      /**
       * <pre>
       *纬度
       * </pre>
       *
       * <code>double latitude = 11;</code>
       * @param value The latitude to set.
       * @return This builder for chaining.
       */
      public Builder setLatitude(double value) {
        
        latitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *纬度
       * </pre>
       *
       * <code>double latitude = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearLatitude() {
        
        latitude_ = 0D;
        onChanged();
        return this;
      }

      private double height_ ;
      /**
       * <pre>
       *高程
       * </pre>
       *
       * <code>double height = 12;</code>
       * @return The height.
       */
      @java.lang.Override
      public double getHeight() {
        return height_;
      }
      /**
       * <pre>
       *高程
       * </pre>
       *
       * <code>double height = 12;</code>
       * @param value The height to set.
       * @return This builder for chaining.
       */
      public Builder setHeight(double value) {
        
        height_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *高程
       * </pre>
       *
       * <code>double height = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearHeight() {
        
        height_ = 0D;
        onChanged();
        return this;
      }

      private double rtkVelDirection_ ;
      /**
       * <pre>
       * </pre>
       *
       * <code>double rtk_vel_direction = 13;</code>
       * @return The rtkVelDirection.
       */
      @java.lang.Override
      public double getRtkVelDirection() {
        return rtkVelDirection_;
      }
      /**
       * <pre>
       * </pre>
       *
       * <code>double rtk_vel_direction = 13;</code>
       * @param value The rtkVelDirection to set.
       * @return This builder for chaining.
       */
      public Builder setRtkVelDirection(double value) {
        
        rtkVelDirection_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * </pre>
       *
       * <code>double rtk_vel_direction = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearRtkVelDirection() {
        
        rtkVelDirection_ = 0D;
        onChanged();
        return this;
      }

      private int diffAgeTime_ ;
      /**
       * <pre>
       *差分龄期
       * </pre>
       *
       * <code>int32 diff_age_time = 14;</code>
       * @return The diffAgeTime.
       */
      @java.lang.Override
      public int getDiffAgeTime() {
        return diffAgeTime_;
      }
      /**
       * <pre>
       *差分龄期
       * </pre>
       *
       * <code>int32 diff_age_time = 14;</code>
       * @param value The diffAgeTime to set.
       * @return This builder for chaining.
       */
      public Builder setDiffAgeTime(int value) {
        
        diffAgeTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *差分龄期
       * </pre>
       *
       * <code>int32 diff_age_time = 14;</code>
       * @return This builder for chaining.
       */
      public Builder clearDiffAgeTime() {
        
        diffAgeTime_ = 0;
        onChanged();
        return this;
      }

      private int slaveAntGnssQuality_ ;
      /**
       * <pre>
       *从天线定位解状态
       * </pre>
       *
       * <code>int32 slave_ant_gnss_quality = 15;</code>
       * @return The slaveAntGnssQuality.
       */
      @java.lang.Override
      public int getSlaveAntGnssQuality() {
        return slaveAntGnssQuality_;
      }
      /**
       * <pre>
       *从天线定位解状态
       * </pre>
       *
       * <code>int32 slave_ant_gnss_quality = 15;</code>
       * @param value The slaveAntGnssQuality to set.
       * @return This builder for chaining.
       */
      public Builder setSlaveAntGnssQuality(int value) {
        
        slaveAntGnssQuality_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *从天线定位解状态
       * </pre>
       *
       * <code>int32 slave_ant_gnss_quality = 15;</code>
       * @return This builder for chaining.
       */
      public Builder clearSlaveAntGnssQuality() {
        
        slaveAntGnssQuality_ = 0;
        onChanged();
        return this;
      }

      private int year_ ;
      /**
       * <pre>
       *#年
       * </pre>
       *
       * <code>int32 year = 16;</code>
       * @return The year.
       */
      @java.lang.Override
      public int getYear() {
        return year_;
      }
      /**
       * <pre>
       *#年
       * </pre>
       *
       * <code>int32 year = 16;</code>
       * @param value The year to set.
       * @return This builder for chaining.
       */
      public Builder setYear(int value) {
        
        year_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *#年
       * </pre>
       *
       * <code>int32 year = 16;</code>
       * @return This builder for chaining.
       */
      public Builder clearYear() {
        
        year_ = 0;
        onChanged();
        return this;
      }

      private int month_ ;
      /**
       * <pre>
       *#月
       * </pre>
       *
       * <code>int32 month = 17;</code>
       * @return The month.
       */
      @java.lang.Override
      public int getMonth() {
        return month_;
      }
      /**
       * <pre>
       *#月
       * </pre>
       *
       * <code>int32 month = 17;</code>
       * @param value The month to set.
       * @return This builder for chaining.
       */
      public Builder setMonth(int value) {
        
        month_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *#月
       * </pre>
       *
       * <code>int32 month = 17;</code>
       * @return This builder for chaining.
       */
      public Builder clearMonth() {
        
        month_ = 0;
        onChanged();
        return this;
      }

      private int date_ ;
      /**
       * <pre>
       *#日
       * </pre>
       *
       * <code>int32 date = 18;</code>
       * @return The date.
       */
      @java.lang.Override
      public int getDate() {
        return date_;
      }
      /**
       * <pre>
       *#日
       * </pre>
       *
       * <code>int32 date = 18;</code>
       * @param value The date to set.
       * @return This builder for chaining.
       */
      public Builder setDate(int value) {
        
        date_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *#日
       * </pre>
       *
       * <code>int32 date = 18;</code>
       * @return This builder for chaining.
       */
      public Builder clearDate() {
        
        date_ = 0;
        onChanged();
        return this;
      }

      private int hour_ ;
      /**
       * <pre>
       *#时
       * </pre>
       *
       * <code>int32 hour = 19;</code>
       * @return The hour.
       */
      @java.lang.Override
      public int getHour() {
        return hour_;
      }
      /**
       * <pre>
       *#时
       * </pre>
       *
       * <code>int32 hour = 19;</code>
       * @param value The hour to set.
       * @return This builder for chaining.
       */
      public Builder setHour(int value) {
        
        hour_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *#时
       * </pre>
       *
       * <code>int32 hour = 19;</code>
       * @return This builder for chaining.
       */
      public Builder clearHour() {
        
        hour_ = 0;
        onChanged();
        return this;
      }

      private int minute_ ;
      /**
       * <pre>
       *#分
       * </pre>
       *
       * <code>int32 minute = 20;</code>
       * @return The minute.
       */
      @java.lang.Override
      public int getMinute() {
        return minute_;
      }
      /**
       * <pre>
       *#分
       * </pre>
       *
       * <code>int32 minute = 20;</code>
       * @param value The minute to set.
       * @return This builder for chaining.
       */
      public Builder setMinute(int value) {
        
        minute_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *#分
       * </pre>
       *
       * <code>int32 minute = 20;</code>
       * @return This builder for chaining.
       */
      public Builder clearMinute() {
        
        minute_ = 0;
        onChanged();
        return this;
      }

      private double second_ ;
      /**
       * <pre>
       *#秒
       * </pre>
       *
       * <code>double second = 21;</code>
       * @return The second.
       */
      @java.lang.Override
      public double getSecond() {
        return second_;
      }
      /**
       * <pre>
       *#秒
       * </pre>
       *
       * <code>double second = 21;</code>
       * @param value The second to set.
       * @return This builder for chaining.
       */
      public Builder setSecond(double value) {
        
        second_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *#秒
       * </pre>
       *
       * <code>double second = 21;</code>
       * @return This builder for chaining.
       */
      public Builder clearSecond() {
        
        second_ = 0D;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.LocalizationInfo)
    }

    // @@protoc_insertion_point(class_scope:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.LocalizationInfo)
    private static final com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo();
    }

    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<LocalizationInfo>
        PARSER = new com.google.protobuf.AbstractParser<LocalizationInfo>() {
      @java.lang.Override
      public LocalizationInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LocalizationInfo(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<LocalizationInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<LocalizationInfo> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.LocalizationInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ControlInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ControlInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *位置到达标志，1：到达，0：未到达
     * </pre>
     *
     * <code>int32 arrive_state = 1;</code>
     * @return The arriveState.
     */
    int getArriveState();

    /**
     * <pre>
     *控制偏差
     * </pre>
     *
     * <code>double control_dev = 2;</code>
     * @return The controlDev.
     */
    double getControlDev();

    /**
     * <pre>
     *上线状态  0未上线 1上线完成
     * </pre>
     *
     * <code>int32 online_state = 3;</code>
     * @return The onlineState.
     */
    int getOnlineState();
  }
  /**
   * Protobuf type {@code com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ControlInfo}
   */
  public static final class ControlInfo extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ControlInfo)
      ControlInfoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ControlInfo.newBuilder() to construct.
    private ControlInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ControlInfo() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ControlInfo();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ControlInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              arriveState_ = input.readInt32();
              break;
            }
            case 17: {

              controlDev_ = input.readDouble();
              break;
            }
            case 24: {

              onlineState_ = input.readInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_ControlInfo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_ControlInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo.class, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo.Builder.class);
    }

    public static final int ARRIVE_STATE_FIELD_NUMBER = 1;
    private int arriveState_;
    /**
     * <pre>
     *位置到达标志，1：到达，0：未到达
     * </pre>
     *
     * <code>int32 arrive_state = 1;</code>
     * @return The arriveState.
     */
    @java.lang.Override
    public int getArriveState() {
      return arriveState_;
    }

    public static final int CONTROL_DEV_FIELD_NUMBER = 2;
    private double controlDev_;
    /**
     * <pre>
     *控制偏差
     * </pre>
     *
     * <code>double control_dev = 2;</code>
     * @return The controlDev.
     */
    @java.lang.Override
    public double getControlDev() {
      return controlDev_;
    }

    public static final int ONLINE_STATE_FIELD_NUMBER = 3;
    private int onlineState_;
    /**
     * <pre>
     *上线状态  0未上线 1上线完成
     * </pre>
     *
     * <code>int32 online_state = 3;</code>
     * @return The onlineState.
     */
    @java.lang.Override
    public int getOnlineState() {
      return onlineState_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (arriveState_ != 0) {
        output.writeInt32(1, arriveState_);
      }
      if (controlDev_ != 0D) {
        output.writeDouble(2, controlDev_);
      }
      if (onlineState_ != 0) {
        output.writeInt32(3, onlineState_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (arriveState_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, arriveState_);
      }
      if (controlDev_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, controlDev_);
      }
      if (onlineState_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, onlineState_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo)) {
        return super.equals(obj);
      }
      com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo other = (com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo) obj;

      if (getArriveState()
          != other.getArriveState()) return false;
      if (java.lang.Double.doubleToLongBits(getControlDev())
          != java.lang.Double.doubleToLongBits(
              other.getControlDev())) return false;
      if (getOnlineState()
          != other.getOnlineState()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ARRIVE_STATE_FIELD_NUMBER;
      hash = (53 * hash) + getArriveState();
      hash = (37 * hash) + CONTROL_DEV_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getControlDev()));
      hash = (37 * hash) + ONLINE_STATE_FIELD_NUMBER;
      hash = (53 * hash) + getOnlineState();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ControlInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ControlInfo)
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_ControlInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_ControlInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo.class, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo.Builder.class);
      }

      // Construct using com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        arriveState_ = 0;

        controlDev_ = 0D;

        onlineState_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_ControlInfo_descriptor;
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo getDefaultInstanceForType() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo.getDefaultInstance();
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo build() {
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo buildPartial() {
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo result = new com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo(this);
        result.arriveState_ = arriveState_;
        result.controlDev_ = controlDev_;
        result.onlineState_ = onlineState_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo) {
          return mergeFrom((com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo other) {
        if (other == com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo.getDefaultInstance()) return this;
        if (other.getArriveState() != 0) {
          setArriveState(other.getArriveState());
        }
        if (other.getControlDev() != 0D) {
          setControlDev(other.getControlDev());
        }
        if (other.getOnlineState() != 0) {
          setOnlineState(other.getOnlineState());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int arriveState_ ;
      /**
       * <pre>
       *位置到达标志，1：到达，0：未到达
       * </pre>
       *
       * <code>int32 arrive_state = 1;</code>
       * @return The arriveState.
       */
      @java.lang.Override
      public int getArriveState() {
        return arriveState_;
      }
      /**
       * <pre>
       *位置到达标志，1：到达，0：未到达
       * </pre>
       *
       * <code>int32 arrive_state = 1;</code>
       * @param value The arriveState to set.
       * @return This builder for chaining.
       */
      public Builder setArriveState(int value) {
        
        arriveState_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *位置到达标志，1：到达，0：未到达
       * </pre>
       *
       * <code>int32 arrive_state = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearArriveState() {
        
        arriveState_ = 0;
        onChanged();
        return this;
      }

      private double controlDev_ ;
      /**
       * <pre>
       *控制偏差
       * </pre>
       *
       * <code>double control_dev = 2;</code>
       * @return The controlDev.
       */
      @java.lang.Override
      public double getControlDev() {
        return controlDev_;
      }
      /**
       * <pre>
       *控制偏差
       * </pre>
       *
       * <code>double control_dev = 2;</code>
       * @param value The controlDev to set.
       * @return This builder for chaining.
       */
      public Builder setControlDev(double value) {
        
        controlDev_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *控制偏差
       * </pre>
       *
       * <code>double control_dev = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearControlDev() {
        
        controlDev_ = 0D;
        onChanged();
        return this;
      }

      private int onlineState_ ;
      /**
       * <pre>
       *上线状态  0未上线 1上线完成
       * </pre>
       *
       * <code>int32 online_state = 3;</code>
       * @return The onlineState.
       */
      @java.lang.Override
      public int getOnlineState() {
        return onlineState_;
      }
      /**
       * <pre>
       *上线状态  0未上线 1上线完成
       * </pre>
       *
       * <code>int32 online_state = 3;</code>
       * @param value The onlineState to set.
       * @return This builder for chaining.
       */
      public Builder setOnlineState(int value) {
        
        onlineState_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *上线状态  0未上线 1上线完成
       * </pre>
       *
       * <code>int32 online_state = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearOnlineState() {
        
        onlineState_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ControlInfo)
    }

    // @@protoc_insertion_point(class_scope:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ControlInfo)
    private static final com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo();
    }

    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ControlInfo>
        PARSER = new com.google.protobuf.AbstractParser<ControlInfo>() {
      @java.lang.Override
      public ControlInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ControlInfo(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ControlInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ControlInfo> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ControlInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MultiControlInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.MultiControlInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * 控制偏差y 单位cm
     * </pre>
     *
     * <code>double control_devy = 1;</code>
     * @return The controlDevy.
     */
    double getControlDevy();

    /**
     * <pre>
     * 控制偏差 x 单位cm
     * </pre>
     *
     * <code>double control_devx = 2;</code>
     * @return The controlDevx.
     */
    double getControlDevx();

    /**
     * <pre>
     * master vel
     * </pre>
     *
     * <code>double master_vel = 3;</code>
     * @return The masterVel.
     */
    double getMasterVel();

    /**
     * <pre>
     * slave vel
     * </pre>
     *
     * <code>double slave_vel = 4;</code>
     * @return The slaveVel.
     */
    double getSlaveVel();
  }
  /**
   * Protobuf type {@code com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.MultiControlInfo}
   */
  public static final class MultiControlInfo extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.MultiControlInfo)
      MultiControlInfoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use MultiControlInfo.newBuilder() to construct.
    private MultiControlInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MultiControlInfo() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new MultiControlInfo();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private MultiControlInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 9: {

              controlDevy_ = input.readDouble();
              break;
            }
            case 17: {

              controlDevx_ = input.readDouble();
              break;
            }
            case 25: {

              masterVel_ = input.readDouble();
              break;
            }
            case 33: {

              slaveVel_ = input.readDouble();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_MultiControlInfo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_MultiControlInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo.class, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo.Builder.class);
    }

    public static final int CONTROL_DEVY_FIELD_NUMBER = 1;
    private double controlDevy_;
    /**
     * <pre>
     * 控制偏差y 单位cm
     * </pre>
     *
     * <code>double control_devy = 1;</code>
     * @return The controlDevy.
     */
    @java.lang.Override
    public double getControlDevy() {
      return controlDevy_;
    }

    public static final int CONTROL_DEVX_FIELD_NUMBER = 2;
    private double controlDevx_;
    /**
     * <pre>
     * 控制偏差 x 单位cm
     * </pre>
     *
     * <code>double control_devx = 2;</code>
     * @return The controlDevx.
     */
    @java.lang.Override
    public double getControlDevx() {
      return controlDevx_;
    }

    public static final int MASTER_VEL_FIELD_NUMBER = 3;
    private double masterVel_;
    /**
     * <pre>
     * master vel
     * </pre>
     *
     * <code>double master_vel = 3;</code>
     * @return The masterVel.
     */
    @java.lang.Override
    public double getMasterVel() {
      return masterVel_;
    }

    public static final int SLAVE_VEL_FIELD_NUMBER = 4;
    private double slaveVel_;
    /**
     * <pre>
     * slave vel
     * </pre>
     *
     * <code>double slave_vel = 4;</code>
     * @return The slaveVel.
     */
    @java.lang.Override
    public double getSlaveVel() {
      return slaveVel_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (controlDevy_ != 0D) {
        output.writeDouble(1, controlDevy_);
      }
      if (controlDevx_ != 0D) {
        output.writeDouble(2, controlDevx_);
      }
      if (masterVel_ != 0D) {
        output.writeDouble(3, masterVel_);
      }
      if (slaveVel_ != 0D) {
        output.writeDouble(4, slaveVel_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (controlDevy_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, controlDevy_);
      }
      if (controlDevx_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, controlDevx_);
      }
      if (masterVel_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, masterVel_);
      }
      if (slaveVel_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, slaveVel_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo)) {
        return super.equals(obj);
      }
      com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo other = (com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo) obj;

      if (java.lang.Double.doubleToLongBits(getControlDevy())
          != java.lang.Double.doubleToLongBits(
              other.getControlDevy())) return false;
      if (java.lang.Double.doubleToLongBits(getControlDevx())
          != java.lang.Double.doubleToLongBits(
              other.getControlDevx())) return false;
      if (java.lang.Double.doubleToLongBits(getMasterVel())
          != java.lang.Double.doubleToLongBits(
              other.getMasterVel())) return false;
      if (java.lang.Double.doubleToLongBits(getSlaveVel())
          != java.lang.Double.doubleToLongBits(
              other.getSlaveVel())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CONTROL_DEVY_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getControlDevy()));
      hash = (37 * hash) + CONTROL_DEVX_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getControlDevx()));
      hash = (37 * hash) + MASTER_VEL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getMasterVel()));
      hash = (37 * hash) + SLAVE_VEL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getSlaveVel()));
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.MultiControlInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.MultiControlInfo)
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_MultiControlInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_MultiControlInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo.class, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo.Builder.class);
      }

      // Construct using com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        controlDevy_ = 0D;

        controlDevx_ = 0D;

        masterVel_ = 0D;

        slaveVel_ = 0D;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_MultiControlInfo_descriptor;
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo getDefaultInstanceForType() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo.getDefaultInstance();
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo build() {
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo buildPartial() {
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo result = new com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo(this);
        result.controlDevy_ = controlDevy_;
        result.controlDevx_ = controlDevx_;
        result.masterVel_ = masterVel_;
        result.slaveVel_ = slaveVel_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo) {
          return mergeFrom((com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo other) {
        if (other == com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo.getDefaultInstance()) return this;
        if (other.getControlDevy() != 0D) {
          setControlDevy(other.getControlDevy());
        }
        if (other.getControlDevx() != 0D) {
          setControlDevx(other.getControlDevx());
        }
        if (other.getMasterVel() != 0D) {
          setMasterVel(other.getMasterVel());
        }
        if (other.getSlaveVel() != 0D) {
          setSlaveVel(other.getSlaveVel());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private double controlDevy_ ;
      /**
       * <pre>
       * 控制偏差y 单位cm
       * </pre>
       *
       * <code>double control_devy = 1;</code>
       * @return The controlDevy.
       */
      @java.lang.Override
      public double getControlDevy() {
        return controlDevy_;
      }
      /**
       * <pre>
       * 控制偏差y 单位cm
       * </pre>
       *
       * <code>double control_devy = 1;</code>
       * @param value The controlDevy to set.
       * @return This builder for chaining.
       */
      public Builder setControlDevy(double value) {
        
        controlDevy_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 控制偏差y 单位cm
       * </pre>
       *
       * <code>double control_devy = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearControlDevy() {
        
        controlDevy_ = 0D;
        onChanged();
        return this;
      }

      private double controlDevx_ ;
      /**
       * <pre>
       * 控制偏差 x 单位cm
       * </pre>
       *
       * <code>double control_devx = 2;</code>
       * @return The controlDevx.
       */
      @java.lang.Override
      public double getControlDevx() {
        return controlDevx_;
      }
      /**
       * <pre>
       * 控制偏差 x 单位cm
       * </pre>
       *
       * <code>double control_devx = 2;</code>
       * @param value The controlDevx to set.
       * @return This builder for chaining.
       */
      public Builder setControlDevx(double value) {
        
        controlDevx_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 控制偏差 x 单位cm
       * </pre>
       *
       * <code>double control_devx = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearControlDevx() {
        
        controlDevx_ = 0D;
        onChanged();
        return this;
      }

      private double masterVel_ ;
      /**
       * <pre>
       * master vel
       * </pre>
       *
       * <code>double master_vel = 3;</code>
       * @return The masterVel.
       */
      @java.lang.Override
      public double getMasterVel() {
        return masterVel_;
      }
      /**
       * <pre>
       * master vel
       * </pre>
       *
       * <code>double master_vel = 3;</code>
       * @param value The masterVel to set.
       * @return This builder for chaining.
       */
      public Builder setMasterVel(double value) {
        
        masterVel_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * master vel
       * </pre>
       *
       * <code>double master_vel = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearMasterVel() {
        
        masterVel_ = 0D;
        onChanged();
        return this;
      }

      private double slaveVel_ ;
      /**
       * <pre>
       * slave vel
       * </pre>
       *
       * <code>double slave_vel = 4;</code>
       * @return The slaveVel.
       */
      @java.lang.Override
      public double getSlaveVel() {
        return slaveVel_;
      }
      /**
       * <pre>
       * slave vel
       * </pre>
       *
       * <code>double slave_vel = 4;</code>
       * @param value The slaveVel to set.
       * @return This builder for chaining.
       */
      public Builder setSlaveVel(double value) {
        
        slaveVel_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * slave vel
       * </pre>
       *
       * <code>double slave_vel = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearSlaveVel() {
        
        slaveVel_ = 0D;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.MultiControlInfo)
    }

    // @@protoc_insertion_point(class_scope:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.MultiControlInfo)
    private static final com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo();
    }

    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MultiControlInfo>
        PARSER = new com.google.protobuf.AbstractParser<MultiControlInfo>() {
      @java.lang.Override
      public MultiControlInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MultiControlInfo(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MultiControlInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MultiControlInfo> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.MultiControlInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ChassisInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *例“HY8088”
     * </pre>
     *
     * <code>string vehicleType = 1;</code>
     * @return The vehicleType.
     */
    java.lang.String getVehicleType();
    /**
     * <pre>
     *例“HY8088”
     * </pre>
     *
     * <code>string vehicleType = 1;</code>
     * @return The bytes for vehicleType.
     */
    com.google.protobuf.ByteString
        getVehicleTypeBytes();

    /**
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo.infoKv info = 2;</code>
     */
    java.util.List<com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv> 
        getInfoList();
    /**
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo.infoKv info = 2;</code>
     */
    com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv getInfo(int index);
    /**
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo.infoKv info = 2;</code>
     */
    int getInfoCount();
    /**
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo.infoKv info = 2;</code>
     */
    java.util.List<? extends com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKvOrBuilder> 
        getInfoOrBuilderList();
    /**
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo.infoKv info = 2;</code>
     */
    com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKvOrBuilder getInfoOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo}
   */
  public static final class ChassisInfo extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo)
      ChassisInfoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ChassisInfo.newBuilder() to construct.
    private ChassisInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ChassisInfo() {
      vehicleType_ = "";
      info_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ChassisInfo();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ChassisInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              vehicleType_ = s;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                info_ = new java.util.ArrayList<com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv>();
                mutable_bitField0_ |= 0x00000001;
              }
              info_.add(
                  input.readMessage(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          info_ = java.util.Collections.unmodifiableList(info_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_ChassisInfo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_ChassisInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.class, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.Builder.class);
    }

    public interface infoKvOrBuilder extends
        // @@protoc_insertion_point(interface_extends:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo.infoKv)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       *消息参数ID，参考车云协议皓耘HY8088型收获机信息表
       * </pre>
       *
       * <code>uint32 id = 1;</code>
       * @return The id.
       */
      int getId();

      /**
       * <pre>
       *消息值
       * </pre>
       *
       * <code>double value = 2;</code>
       * @return The value.
       */
      double getValue();
    }
    /**
     * Protobuf type {@code com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo.infoKv}
     */
    public static final class infoKv extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo.infoKv)
        infoKvOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use infoKv.newBuilder() to construct.
      private infoKv(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private infoKv() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new infoKv();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private infoKv(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {

                id_ = input.readUInt32();
                break;
              }
              case 17: {

                value_ = input.readDouble();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_ChassisInfo_infoKv_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_ChassisInfo_infoKv_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv.class, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv.Builder.class);
      }

      public static final int ID_FIELD_NUMBER = 1;
      private int id_;
      /**
       * <pre>
       *消息参数ID，参考车云协议皓耘HY8088型收获机信息表
       * </pre>
       *
       * <code>uint32 id = 1;</code>
       * @return The id.
       */
      @java.lang.Override
      public int getId() {
        return id_;
      }

      public static final int VALUE_FIELD_NUMBER = 2;
      private double value_;
      /**
       * <pre>
       *消息值
       * </pre>
       *
       * <code>double value = 2;</code>
       * @return The value.
       */
      @java.lang.Override
      public double getValue() {
        return value_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (id_ != 0) {
          output.writeUInt32(1, id_);
        }
        if (value_ != 0D) {
          output.writeDouble(2, value_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (id_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, id_);
        }
        if (value_ != 0D) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(2, value_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv)) {
          return super.equals(obj);
        }
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv other = (com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv) obj;

        if (getId()
            != other.getId()) return false;
        if (java.lang.Double.doubleToLongBits(getValue())
            != java.lang.Double.doubleToLongBits(
                other.getValue())) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + ID_FIELD_NUMBER;
        hash = (53 * hash) + getId();
        hash = (37 * hash) + VALUE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getValue()));
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo.infoKv}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo.infoKv)
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKvOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_ChassisInfo_infoKv_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_ChassisInfo_infoKv_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv.class, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv.Builder.class);
        }

        // Construct using com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          id_ = 0;

          value_ = 0D;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_ChassisInfo_infoKv_descriptor;
        }

        @java.lang.Override
        public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv getDefaultInstanceForType() {
          return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv.getDefaultInstance();
        }

        @java.lang.Override
        public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv build() {
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv buildPartial() {
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv result = new com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv(this);
          result.id_ = id_;
          result.value_ = value_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv) {
            return mergeFrom((com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv other) {
          if (other == com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv.getDefaultInstance()) return this;
          if (other.getId() != 0) {
            setId(other.getId());
          }
          if (other.getValue() != 0D) {
            setValue(other.getValue());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private int id_ ;
        /**
         * <pre>
         *消息参数ID，参考车云协议皓耘HY8088型收获机信息表
         * </pre>
         *
         * <code>uint32 id = 1;</code>
         * @return The id.
         */
        @java.lang.Override
        public int getId() {
          return id_;
        }
        /**
         * <pre>
         *消息参数ID，参考车云协议皓耘HY8088型收获机信息表
         * </pre>
         *
         * <code>uint32 id = 1;</code>
         * @param value The id to set.
         * @return This builder for chaining.
         */
        public Builder setId(int value) {
          
          id_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *消息参数ID，参考车云协议皓耘HY8088型收获机信息表
         * </pre>
         *
         * <code>uint32 id = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearId() {
          
          id_ = 0;
          onChanged();
          return this;
        }

        private double value_ ;
        /**
         * <pre>
         *消息值
         * </pre>
         *
         * <code>double value = 2;</code>
         * @return The value.
         */
        @java.lang.Override
        public double getValue() {
          return value_;
        }
        /**
         * <pre>
         *消息值
         * </pre>
         *
         * <code>double value = 2;</code>
         * @param value The value to set.
         * @return This builder for chaining.
         */
        public Builder setValue(double value) {
          
          value_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *消息值
         * </pre>
         *
         * <code>double value = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearValue() {
          
          value_ = 0D;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo.infoKv)
      }

      // @@protoc_insertion_point(class_scope:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo.infoKv)
      private static final com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv();
      }

      public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<infoKv>
          PARSER = new com.google.protobuf.AbstractParser<infoKv>() {
        @java.lang.Override
        public infoKv parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new infoKv(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<infoKv> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<infoKv> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int VEHICLETYPE_FIELD_NUMBER = 1;
    private volatile java.lang.Object vehicleType_;
    /**
     * <pre>
     *例“HY8088”
     * </pre>
     *
     * <code>string vehicleType = 1;</code>
     * @return The vehicleType.
     */
    @java.lang.Override
    public java.lang.String getVehicleType() {
      java.lang.Object ref = vehicleType_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        vehicleType_ = s;
        return s;
      }
    }
    /**
     * <pre>
     *例“HY8088”
     * </pre>
     *
     * <code>string vehicleType = 1;</code>
     * @return The bytes for vehicleType.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getVehicleTypeBytes() {
      java.lang.Object ref = vehicleType_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        vehicleType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int INFO_FIELD_NUMBER = 2;
    private java.util.List<com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv> info_;
    /**
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo.infoKv info = 2;</code>
     */
    @java.lang.Override
    public java.util.List<com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv> getInfoList() {
      return info_;
    }
    /**
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo.infoKv info = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKvOrBuilder> 
        getInfoOrBuilderList() {
      return info_;
    }
    /**
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo.infoKv info = 2;</code>
     */
    @java.lang.Override
    public int getInfoCount() {
      return info_.size();
    }
    /**
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo.infoKv info = 2;</code>
     */
    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv getInfo(int index) {
      return info_.get(index);
    }
    /**
     * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo.infoKv info = 2;</code>
     */
    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKvOrBuilder getInfoOrBuilder(
        int index) {
      return info_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getVehicleTypeBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, vehicleType_);
      }
      for (int i = 0; i < info_.size(); i++) {
        output.writeMessage(2, info_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getVehicleTypeBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, vehicleType_);
      }
      for (int i = 0; i < info_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, info_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo)) {
        return super.equals(obj);
      }
      com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo other = (com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo) obj;

      if (!getVehicleType()
          .equals(other.getVehicleType())) return false;
      if (!getInfoList()
          .equals(other.getInfoList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + VEHICLETYPE_FIELD_NUMBER;
      hash = (53 * hash) + getVehicleType().hashCode();
      if (getInfoCount() > 0) {
        hash = (37 * hash) + INFO_FIELD_NUMBER;
        hash = (53 * hash) + getInfoList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo)
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_ChassisInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_ChassisInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.class, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.Builder.class);
      }

      // Construct using com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getInfoFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        vehicleType_ = "";

        if (infoBuilder_ == null) {
          info_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          infoBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_ChassisInfo_descriptor;
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo getDefaultInstanceForType() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.getDefaultInstance();
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo build() {
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo buildPartial() {
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo result = new com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo(this);
        int from_bitField0_ = bitField0_;
        result.vehicleType_ = vehicleType_;
        if (infoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            info_ = java.util.Collections.unmodifiableList(info_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.info_ = info_;
        } else {
          result.info_ = infoBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo) {
          return mergeFrom((com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo other) {
        if (other == com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.getDefaultInstance()) return this;
        if (!other.getVehicleType().isEmpty()) {
          vehicleType_ = other.vehicleType_;
          onChanged();
        }
        if (infoBuilder_ == null) {
          if (!other.info_.isEmpty()) {
            if (info_.isEmpty()) {
              info_ = other.info_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureInfoIsMutable();
              info_.addAll(other.info_);
            }
            onChanged();
          }
        } else {
          if (!other.info_.isEmpty()) {
            if (infoBuilder_.isEmpty()) {
              infoBuilder_.dispose();
              infoBuilder_ = null;
              info_ = other.info_;
              bitField0_ = (bitField0_ & ~0x00000001);
              infoBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getInfoFieldBuilder() : null;
            } else {
              infoBuilder_.addAllMessages(other.info_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object vehicleType_ = "";
      /**
       * <pre>
       *例“HY8088”
       * </pre>
       *
       * <code>string vehicleType = 1;</code>
       * @return The vehicleType.
       */
      public java.lang.String getVehicleType() {
        java.lang.Object ref = vehicleType_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          vehicleType_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *例“HY8088”
       * </pre>
       *
       * <code>string vehicleType = 1;</code>
       * @return The bytes for vehicleType.
       */
      public com.google.protobuf.ByteString
          getVehicleTypeBytes() {
        java.lang.Object ref = vehicleType_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          vehicleType_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *例“HY8088”
       * </pre>
       *
       * <code>string vehicleType = 1;</code>
       * @param value The vehicleType to set.
       * @return This builder for chaining.
       */
      public Builder setVehicleType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        vehicleType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *例“HY8088”
       * </pre>
       *
       * <code>string vehicleType = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearVehicleType() {
        
        vehicleType_ = getDefaultInstance().getVehicleType();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *例“HY8088”
       * </pre>
       *
       * <code>string vehicleType = 1;</code>
       * @param value The bytes for vehicleType to set.
       * @return This builder for chaining.
       */
      public Builder setVehicleTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        vehicleType_ = value;
        onChanged();
        return this;
      }

      private java.util.List<com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv> info_ =
        java.util.Collections.emptyList();
      private void ensureInfoIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          info_ = new java.util.ArrayList<com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv>(info_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKvOrBuilder> infoBuilder_;

      /**
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo.infoKv info = 2;</code>
       */
      public java.util.List<com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv> getInfoList() {
        if (infoBuilder_ == null) {
          return java.util.Collections.unmodifiableList(info_);
        } else {
          return infoBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo.infoKv info = 2;</code>
       */
      public int getInfoCount() {
        if (infoBuilder_ == null) {
          return info_.size();
        } else {
          return infoBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo.infoKv info = 2;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv getInfo(int index) {
        if (infoBuilder_ == null) {
          return info_.get(index);
        } else {
          return infoBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo.infoKv info = 2;</code>
       */
      public Builder setInfo(
          int index, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv value) {
        if (infoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInfoIsMutable();
          info_.set(index, value);
          onChanged();
        } else {
          infoBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo.infoKv info = 2;</code>
       */
      public Builder setInfo(
          int index, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv.Builder builderForValue) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.set(index, builderForValue.build());
          onChanged();
        } else {
          infoBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo.infoKv info = 2;</code>
       */
      public Builder addInfo(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv value) {
        if (infoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInfoIsMutable();
          info_.add(value);
          onChanged();
        } else {
          infoBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo.infoKv info = 2;</code>
       */
      public Builder addInfo(
          int index, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv value) {
        if (infoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInfoIsMutable();
          info_.add(index, value);
          onChanged();
        } else {
          infoBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo.infoKv info = 2;</code>
       */
      public Builder addInfo(
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv.Builder builderForValue) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.add(builderForValue.build());
          onChanged();
        } else {
          infoBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo.infoKv info = 2;</code>
       */
      public Builder addInfo(
          int index, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv.Builder builderForValue) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.add(index, builderForValue.build());
          onChanged();
        } else {
          infoBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo.infoKv info = 2;</code>
       */
      public Builder addAllInfo(
          java.lang.Iterable<? extends com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv> values) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, info_);
          onChanged();
        } else {
          infoBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo.infoKv info = 2;</code>
       */
      public Builder clearInfo() {
        if (infoBuilder_ == null) {
          info_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          infoBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo.infoKv info = 2;</code>
       */
      public Builder removeInfo(int index) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.remove(index);
          onChanged();
        } else {
          infoBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo.infoKv info = 2;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv.Builder getInfoBuilder(
          int index) {
        return getInfoFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo.infoKv info = 2;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKvOrBuilder getInfoOrBuilder(
          int index) {
        if (infoBuilder_ == null) {
          return info_.get(index);  } else {
          return infoBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo.infoKv info = 2;</code>
       */
      public java.util.List<? extends com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKvOrBuilder> 
           getInfoOrBuilderList() {
        if (infoBuilder_ != null) {
          return infoBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(info_);
        }
      }
      /**
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo.infoKv info = 2;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv.Builder addInfoBuilder() {
        return getInfoFieldBuilder().addBuilder(
            com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv.getDefaultInstance());
      }
      /**
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo.infoKv info = 2;</code>
       */
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv.Builder addInfoBuilder(
          int index) {
        return getInfoFieldBuilder().addBuilder(
            index, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv.getDefaultInstance());
      }
      /**
       * <code>repeated .com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo.infoKv info = 2;</code>
       */
      public java.util.List<com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv.Builder> 
           getInfoBuilderList() {
        return getInfoFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKvOrBuilder> 
          getInfoFieldBuilder() {
        if (infoBuilder_ == null) {
          infoBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKv.Builder, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo.infoKvOrBuilder>(
                  info_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          info_ = null;
        }
        return infoBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo)
    }

    // @@protoc_insertion_point(class_scope:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.ChassisInfo)
    private static final com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo();
    }

    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ChassisInfo>
        PARSER = new com.google.protobuf.AbstractParser<ChassisInfo>() {
      @java.lang.Override
      public ChassisInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ChassisInfo(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ChassisInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ChassisInfo> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.ChassisInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CalibrationResultOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationResult)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *校准类型
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationType calibration_type = 1;</code>
     * @return The enum numeric value on the wire for calibrationType.
     */
    int getCalibrationTypeValue();
    /**
     * <pre>
     *校准类型
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationType calibration_type = 1;</code>
     * @return The calibrationType.
     */
    com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationType getCalibrationType();

    /**
     * <pre>
     *校准结果
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationResult.CalibrationResultState calibration_result_state = 2;</code>
     * @return The enum numeric value on the wire for calibrationResultState.
     */
    int getCalibrationResultStateValue();
    /**
     * <pre>
     *校准结果
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationResult.CalibrationResultState calibration_result_state = 2;</code>
     * @return The calibrationResultState.
     */
    com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult.CalibrationResultState getCalibrationResultState();
  }
  /**
   * Protobuf type {@code com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationResult}
   */
  public static final class CalibrationResult extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationResult)
      CalibrationResultOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CalibrationResult.newBuilder() to construct.
    private CalibrationResult(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CalibrationResult() {
      calibrationType_ = 0;
      calibrationResultState_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CalibrationResult();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CalibrationResult(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();

              calibrationType_ = rawValue;
              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              calibrationResultState_ = rawValue;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_CalibrationResult_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_CalibrationResult_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult.class, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult.Builder.class);
    }

    /**
     * Protobuf enum {@code com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationResult.CalibrationResultState}
     */
    public enum CalibrationResultState
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>RESULT_NULL = 0;</code>
       */
      RESULT_NULL(0),
      /**
       * <pre>
       *校准完成
       * </pre>
       *
       * <code>RESULT_OK = 1;</code>
       */
      RESULT_OK(1),
      /**
       * <pre>
       *校准失败
       * </pre>
       *
       * <code>RESULT_NG = 2;</code>
       */
      RESULT_NG(2),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>RESULT_NULL = 0;</code>
       */
      public static final int RESULT_NULL_VALUE = 0;
      /**
       * <pre>
       *校准完成
       * </pre>
       *
       * <code>RESULT_OK = 1;</code>
       */
      public static final int RESULT_OK_VALUE = 1;
      /**
       * <pre>
       *校准失败
       * </pre>
       *
       * <code>RESULT_NG = 2;</code>
       */
      public static final int RESULT_NG_VALUE = 2;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static CalibrationResultState valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static CalibrationResultState forNumber(int value) {
        switch (value) {
          case 0: return RESULT_NULL;
          case 1: return RESULT_OK;
          case 2: return RESULT_NG;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<CalibrationResultState>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          CalibrationResultState> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<CalibrationResultState>() {
              public CalibrationResultState findValueByNumber(int number) {
                return CalibrationResultState.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult.getDescriptor().getEnumTypes().get(0);
      }

      private static final CalibrationResultState[] VALUES = values();

      public static CalibrationResultState valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private CalibrationResultState(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationResult.CalibrationResultState)
    }

    public static final int CALIBRATION_TYPE_FIELD_NUMBER = 1;
    private int calibrationType_;
    /**
     * <pre>
     *校准类型
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationType calibration_type = 1;</code>
     * @return The enum numeric value on the wire for calibrationType.
     */
    @java.lang.Override public int getCalibrationTypeValue() {
      return calibrationType_;
    }
    /**
     * <pre>
     *校准类型
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationType calibration_type = 1;</code>
     * @return The calibrationType.
     */
    @java.lang.Override public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationType getCalibrationType() {
      @SuppressWarnings("deprecation")
      com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationType result = com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationType.valueOf(calibrationType_);
      return result == null ? com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationType.UNRECOGNIZED : result;
    }

    public static final int CALIBRATION_RESULT_STATE_FIELD_NUMBER = 2;
    private int calibrationResultState_;
    /**
     * <pre>
     *校准结果
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationResult.CalibrationResultState calibration_result_state = 2;</code>
     * @return The enum numeric value on the wire for calibrationResultState.
     */
    @java.lang.Override public int getCalibrationResultStateValue() {
      return calibrationResultState_;
    }
    /**
     * <pre>
     *校准结果
     * </pre>
     *
     * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationResult.CalibrationResultState calibration_result_state = 2;</code>
     * @return The calibrationResultState.
     */
    @java.lang.Override public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult.CalibrationResultState getCalibrationResultState() {
      @SuppressWarnings("deprecation")
      com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult.CalibrationResultState result = com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult.CalibrationResultState.valueOf(calibrationResultState_);
      return result == null ? com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult.CalibrationResultState.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (calibrationType_ != com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationType.TYPE_NULL.getNumber()) {
        output.writeEnum(1, calibrationType_);
      }
      if (calibrationResultState_ != com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult.CalibrationResultState.RESULT_NULL.getNumber()) {
        output.writeEnum(2, calibrationResultState_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (calibrationType_ != com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationType.TYPE_NULL.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, calibrationType_);
      }
      if (calibrationResultState_ != com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult.CalibrationResultState.RESULT_NULL.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, calibrationResultState_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult)) {
        return super.equals(obj);
      }
      com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult other = (com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult) obj;

      if (calibrationType_ != other.calibrationType_) return false;
      if (calibrationResultState_ != other.calibrationResultState_) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CALIBRATION_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + calibrationType_;
      hash = (37 * hash) + CALIBRATION_RESULT_STATE_FIELD_NUMBER;
      hash = (53 * hash) + calibrationResultState_;
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationResult}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationResult)
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResultOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_CalibrationResult_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_CalibrationResult_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult.class, com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult.Builder.class);
      }

      // Construct using com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        calibrationType_ = 0;

        calibrationResultState_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.internal_static_com_hx_platformnetty_iotdevice_body_CalibrationResult_descriptor;
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult getDefaultInstanceForType() {
        return com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult.getDefaultInstance();
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult build() {
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult buildPartial() {
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult result = new com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult(this);
        result.calibrationType_ = calibrationType_;
        result.calibrationResultState_ = calibrationResultState_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult) {
          return mergeFrom((com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult other) {
        if (other == com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult.getDefaultInstance()) return this;
        if (other.calibrationType_ != 0) {
          setCalibrationTypeValue(other.getCalibrationTypeValue());
        }
        if (other.calibrationResultState_ != 0) {
          setCalibrationResultStateValue(other.getCalibrationResultStateValue());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int calibrationType_ = 0;
      /**
       * <pre>
       *校准类型
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationType calibration_type = 1;</code>
       * @return The enum numeric value on the wire for calibrationType.
       */
      @java.lang.Override public int getCalibrationTypeValue() {
        return calibrationType_;
      }
      /**
       * <pre>
       *校准类型
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationType calibration_type = 1;</code>
       * @param value The enum numeric value on the wire for calibrationType to set.
       * @return This builder for chaining.
       */
      public Builder setCalibrationTypeValue(int value) {
        
        calibrationType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *校准类型
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationType calibration_type = 1;</code>
       * @return The calibrationType.
       */
      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationType getCalibrationType() {
        @SuppressWarnings("deprecation")
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationType result = com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationType.valueOf(calibrationType_);
        return result == null ? com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       *校准类型
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationType calibration_type = 1;</code>
       * @param value The calibrationType to set.
       * @return This builder for chaining.
       */
      public Builder setCalibrationType(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        calibrationType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *校准类型
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationType calibration_type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearCalibrationType() {
        
        calibrationType_ = 0;
        onChanged();
        return this;
      }

      private int calibrationResultState_ = 0;
      /**
       * <pre>
       *校准结果
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationResult.CalibrationResultState calibration_result_state = 2;</code>
       * @return The enum numeric value on the wire for calibrationResultState.
       */
      @java.lang.Override public int getCalibrationResultStateValue() {
        return calibrationResultState_;
      }
      /**
       * <pre>
       *校准结果
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationResult.CalibrationResultState calibration_result_state = 2;</code>
       * @param value The enum numeric value on the wire for calibrationResultState to set.
       * @return This builder for chaining.
       */
      public Builder setCalibrationResultStateValue(int value) {
        
        calibrationResultState_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *校准结果
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationResult.CalibrationResultState calibration_result_state = 2;</code>
       * @return The calibrationResultState.
       */
      @java.lang.Override
      public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult.CalibrationResultState getCalibrationResultState() {
        @SuppressWarnings("deprecation")
        com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult.CalibrationResultState result = com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult.CalibrationResultState.valueOf(calibrationResultState_);
        return result == null ? com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult.CalibrationResultState.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       *校准结果
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationResult.CalibrationResultState calibration_result_state = 2;</code>
       * @param value The calibrationResultState to set.
       * @return This builder for chaining.
       */
      public Builder setCalibrationResultState(com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult.CalibrationResultState value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        calibrationResultState_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *校准结果
       * </pre>
       *
       * <code>.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationResult.CalibrationResultState calibration_result_state = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearCalibrationResultState() {
        
        calibrationResultState_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationResult)
    }

    // @@protoc_insertion_point(class_scope:com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.CalibrationResult)
    private static final com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult();
    }

    public static com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CalibrationResult>
        PARSER = new com.google.protobuf.AbstractParser<CalibrationResult>() {
      @java.lang.Override
      public CalibrationResult parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CalibrationResult(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CalibrationResult> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CalibrationResult> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.DataUploaderProtoc.CalibrationResult getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_hx_platformnetty_iotdevice_body_DataUploader_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_hx_platformnetty_iotdevice_body_DataUploader_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_hx_platformnetty_iotdevice_body_DataUploader_statusKv_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_hx_platformnetty_iotdevice_body_DataUploader_statusKv_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_hx_platformnetty_iotdevice_body_DataUploader_InfoKv_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_hx_platformnetty_iotdevice_body_DataUploader_InfoKv_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_hx_platformnetty_iotdevice_body_Header_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_hx_platformnetty_iotdevice_body_Header_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_hx_platformnetty_iotdevice_body_ChassisALarmInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_hx_platformnetty_iotdevice_body_ChassisALarmInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_hx_platformnetty_iotdevice_body_Path_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_hx_platformnetty_iotdevice_body_Path_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_hx_platformnetty_iotdevice_body_Pose_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_hx_platformnetty_iotdevice_body_Pose_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_hx_platformnetty_iotdevice_body_PlanningInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_hx_platformnetty_iotdevice_body_PlanningInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_hx_platformnetty_iotdevice_body_LocalizationInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_hx_platformnetty_iotdevice_body_LocalizationInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_hx_platformnetty_iotdevice_body_ControlInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_hx_platformnetty_iotdevice_body_ControlInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_hx_platformnetty_iotdevice_body_MultiControlInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_hx_platformnetty_iotdevice_body_MultiControlInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_hx_platformnetty_iotdevice_body_ChassisInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_hx_platformnetty_iotdevice_body_ChassisInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_hx_platformnetty_iotdevice_body_ChassisInfo_infoKv_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_hx_platformnetty_iotdevice_body_ChassisInfo_infoKv_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_hx_platformnetty_iotdevice_body_CalibrationResult_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_hx_platformnetty_iotdevice_body_CalibrationResult_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\022DataUploader.proto\022#com.hx.platformnet" +
      "ty.iotdevice.body\"\221\007\n\014DataUploader\022;\n\006he" +
      "ader\030\001 \001(\0132+.com.elinxer.springcloud.platform.mqtt.broker.iotdev" +
      "ice.body.Header\022?\n\014display_path\030\002 \001(\0132)." +
      "com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Path" +
      "\022P\n\021localization_info\030\003 \001(\01325.com.hx.pla" +
      "tformnetty.iotdevice.body.LocalizationIn" +
      "fo\022F\n\014control_info\030\004 \001(\01320.com.hx.platfo" +
      "rmnetty.iotdevice.body.ControlInfo\022F\n\014ch" +
      "assis_info\030\005 \001(\01320.com.elinxer.springcloud.platform.mqtt.broker." +
      "iotdevice.body.ChassisInfo\022H\n\rplanning_i" +
      "nfo\030\006 \001(\01321.com.elinxer.springcloud.platform.mqtt.broker.iotdevi" +
      "ce.body.PlanningInfo\022J\n\006status\030\007 \003(\0132:.c" +
      "om.hx.platformnetty.iotdevice.body.DataU" +
      "ploader.statusKv\022N\n\017multi_ctrl_info\030\010 \001(" +
      "\01325.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body." +
      "MultiControlInfo\022Q\n\022chassis_alarm_info\030\t" +
      " \001(\01325.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.bo" +
      "dy.ChassisALarmInfo\022R\n\022calibration_resul" +
      "t\030\n \001(\01326.com.elinxer.springcloud.platform.mqtt.broker.iotdevice" +
      ".body.CalibrationResult\022F\n\004info\030\014 \003(\01328." +
      "com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body.Data" +
      "Uploader.InfoKv\032&\n\010statusKv\022\013\n\003key\030\001 \001(\004" +
      "\022\r\n\005value\030\002 \001(\001\032$\n\006InfoKv\022\013\n\003key\030\001 \001(\004\022\r" +
      "\n\005value\030\002 \001(\t\"\213\001\n\006Header\022\017\n\007version\030\001 \001(" +
      "\r\022\026\n\016unix_timestamp\030\002 \001(\004\022\013\n\003seq\030\003 \001(\005\022\022" +
      "\n\nsession_id\030\004 \001(\005\022\017\n\007task_id\030\005 \001(\t\022\022\n\nm" +
      "essage_id\030\006 \001(\t\022\022\n\noperate_id\030\007 \001(\t\"{\n\020C" +
      "hassisALarmInfo\022!\n\031chassis_level1_alarm_" +
      "list\030\001 \003(\005\022!\n\031chassis_level2_alarm_list\030" +
      "\002 \003(\005\022!\n\031chassis_level3_alarm_list\030\003 \003(\005" +
      "\"\210\001\n\004Path\022\027\n\017total_paths_num\030\001 \001(\005\022\025\n\rcu" +
      "r_paths_num\030\002 \001(\005\022\027\n\017total_point_num\030\003 \001" +
      "(\005\0227\n\004path\030\004 \003(\0132).com.elinxer.springcloud.platform.mqtt.broker." +
      "iotdevice.body.Pose\"T\n\004Pose\022\n\n\002px\030\001 \001(\001\022" +
      "\n\n\002py\030\002 \001(\001\022\n\n\002pz\030\003 \001(\001\022\013\n\003yaw\030\004 \001(\001\022\r\n\005" +
      "pitch\030\005 \001(\001\022\014\n\004roll\030\006 \001(\001\"\217\003\n\014PlanningIn" +
      "fo\022\023\n\013check_state\030\001 \001(\005\022\026\n\016hmi_mode_stat" +
      "e\030\002 \001(\005\022\027\n\017work_mode_state\030\003 \001(\005\022\035\n\025auto" +
      "pilot_check_state\030\004 \001(\005\022\027\n\017autopilot_sta" +
      "te\030\005 \001(\005\022\022\n\nmove_state\030\006 \001(\005\022\030\n\020imple_wo" +
      "rk_state\030\007 \001(\005\022\023\n\013pilot_state\030\010 \001(\005\022\035\n\025c" +
      "urtask_total_mileage\030\t \001(\001\022\036\n\026curtask_to" +
      "tal_workarea\030\n \001(\001\022\037\n\027work_completion_pe" +
      "rcent\030\013 \001(\001\022\031\n\021curpose_mapping_x\030\014 \001(\001\022\031" +
      "\n\021curpose_mapping_y\030\r \001(\001\022\024\n\014cur_path_nu" +
      "m\030\016 \001(\005\022\022\n\ntask_state\030\017 \001(\005\"\371\002\n\020Localiza" +
      "tionInfo\022\017\n\007rtk_vel\030\001 \001(\001\022\022\n\nrtk_status\030" +
      "\002 \001(\005\022\025\n\rgnss_sate_num\030\003 \001(\005\022\t\n\001x\030\004 \001(\001\022" +
      "\t\n\001y\030\005 \001(\001\022\t\n\001z\030\006 \001(\001\022\013\n\003yaw\030\007 \001(\001\022\r\n\005pi" +
      "tch\030\010 \001(\001\022\014\n\004roll\030\t \001(\001\022\021\n\tlongitude\030\n \001" +
      "(\001\022\020\n\010latitude\030\013 \001(\001\022\016\n\006height\030\014 \001(\001\022\031\n\021" +
      "rtk_vel_direction\030\r \001(\001\022\025\n\rdiff_age_time" +
      "\030\016 \001(\005\022\036\n\026slave_ant_gnss_quality\030\017 \001(\005\022\014" +
      "\n\004year\030\020 \001(\005\022\r\n\005month\030\021 \001(\005\022\014\n\004date\030\022 \001(" +
      "\005\022\014\n\004hour\030\023 \001(\005\022\016\n\006minute\030\024 \001(\005\022\016\n\006secon" +
      "d\030\025 \001(\001\"N\n\013ControlInfo\022\024\n\014arrive_state\030\001" +
      " \001(\005\022\023\n\013control_dev\030\002 \001(\001\022\024\n\014online_stat" +
      "e\030\003 \001(\005\"e\n\020MultiControlInfo\022\024\n\014control_d" +
      "evy\030\001 \001(\001\022\024\n\014control_devx\030\002 \001(\001\022\022\n\nmaste" +
      "r_vel\030\003 \001(\001\022\021\n\tslave_vel\030\004 \001(\001\"\216\001\n\013Chass" +
      "isInfo\022\023\n\013vehicleType\030\001 \001(\t\022E\n\004info\030\002 \003(" +
      "\01327.com.elinxer.springcloud.platform.mqtt.broker.iotdevice.body." +
      "ChassisInfo.infoKv\032#\n\006infoKv\022\n\n\002id\030\001 \001(\r" +
      "\022\r\n\005value\030\002 \001(\001\"\235\002\n\021CalibrationResult\022N\n" +
      "\020calibration_type\030\001 \001(\01624.com.hx.platfor" +
      "mnetty.iotdevice.body.CalibrationType\022o\n" +
      "\030calibration_result_state\030\002 \001(\0162M.com.hx" +
      ".platformnetty.iotdevice.body.Calibratio" +
      "nResult.CalibrationResultState\"G\n\026Calibr" +
      "ationResultState\022\017\n\013RESULT_NULL\020\000\022\r\n\tRES" +
      "ULT_OK\020\001\022\r\n\tRESULT_NG\020\002*\207\001\n\017CalibrationT" +
      "ype\022\r\n\tTYPE_NULL\020\000\022\021\n\rTYPE_GNSS_ANT\020\001\022\024\n" +
      "\020TYPE_WHEEL_ANGLE\020\002\022\024\n\020TYPE_STEER_MOTOR\020" +
      "\003\022\030\n\024TYPE_HYDRAULIC_STEER\020\004\022\014\n\010TYPE_IMU\020" +
      "\005B\026B\022DataUploaderProtocH\001b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_com_hx_platformnetty_iotdevice_body_DataUploader_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_hx_platformnetty_iotdevice_body_DataUploader_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_hx_platformnetty_iotdevice_body_DataUploader_descriptor,
        new java.lang.String[] { "Header", "DisplayPath", "LocalizationInfo", "ControlInfo", "ChassisInfo", "PlanningInfo", "Status", "MultiCtrlInfo", "ChassisAlarmInfo", "CalibrationResult", "Info", });
    internal_static_com_hx_platformnetty_iotdevice_body_DataUploader_statusKv_descriptor =
      internal_static_com_hx_platformnetty_iotdevice_body_DataUploader_descriptor.getNestedTypes().get(0);
    internal_static_com_hx_platformnetty_iotdevice_body_DataUploader_statusKv_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_hx_platformnetty_iotdevice_body_DataUploader_statusKv_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_com_hx_platformnetty_iotdevice_body_DataUploader_InfoKv_descriptor =
      internal_static_com_hx_platformnetty_iotdevice_body_DataUploader_descriptor.getNestedTypes().get(1);
    internal_static_com_hx_platformnetty_iotdevice_body_DataUploader_InfoKv_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_hx_platformnetty_iotdevice_body_DataUploader_InfoKv_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_com_hx_platformnetty_iotdevice_body_Header_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_com_hx_platformnetty_iotdevice_body_Header_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_hx_platformnetty_iotdevice_body_Header_descriptor,
        new java.lang.String[] { "Version", "UnixTimestamp", "Seq", "SessionId", "TaskId", "MessageId", "OperateId", });
    internal_static_com_hx_platformnetty_iotdevice_body_ChassisALarmInfo_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_com_hx_platformnetty_iotdevice_body_ChassisALarmInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_hx_platformnetty_iotdevice_body_ChassisALarmInfo_descriptor,
        new java.lang.String[] { "ChassisLevel1AlarmList", "ChassisLevel2AlarmList", "ChassisLevel3AlarmList", });
    internal_static_com_hx_platformnetty_iotdevice_body_Path_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_com_hx_platformnetty_iotdevice_body_Path_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_hx_platformnetty_iotdevice_body_Path_descriptor,
        new java.lang.String[] { "TotalPathsNum", "CurPathsNum", "TotalPointNum", "Path", });
    internal_static_com_hx_platformnetty_iotdevice_body_Pose_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_com_hx_platformnetty_iotdevice_body_Pose_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_hx_platformnetty_iotdevice_body_Pose_descriptor,
        new java.lang.String[] { "Px", "Py", "Pz", "Yaw", "Pitch", "Roll", });
    internal_static_com_hx_platformnetty_iotdevice_body_PlanningInfo_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_com_hx_platformnetty_iotdevice_body_PlanningInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_hx_platformnetty_iotdevice_body_PlanningInfo_descriptor,
        new java.lang.String[] { "CheckState", "HmiModeState", "WorkModeState", "AutopilotCheckState", "AutopilotState", "MoveState", "ImpleWorkState", "PilotState", "CurtaskTotalMileage", "CurtaskTotalWorkarea", "WorkCompletionPercent", "CurposeMappingX", "CurposeMappingY", "CurPathNum", "TaskState", });
    internal_static_com_hx_platformnetty_iotdevice_body_LocalizationInfo_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_com_hx_platformnetty_iotdevice_body_LocalizationInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_hx_platformnetty_iotdevice_body_LocalizationInfo_descriptor,
        new java.lang.String[] { "RtkVel", "RtkStatus", "GnssSateNum", "X", "Y", "Z", "Yaw", "Pitch", "Roll", "Longitude", "Latitude", "Height", "RtkVelDirection", "DiffAgeTime", "SlaveAntGnssQuality", "Year", "Month", "Date", "Hour", "Minute", "Second", });
    internal_static_com_hx_platformnetty_iotdevice_body_ControlInfo_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_com_hx_platformnetty_iotdevice_body_ControlInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_hx_platformnetty_iotdevice_body_ControlInfo_descriptor,
        new java.lang.String[] { "ArriveState", "ControlDev", "OnlineState", });
    internal_static_com_hx_platformnetty_iotdevice_body_MultiControlInfo_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_com_hx_platformnetty_iotdevice_body_MultiControlInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_hx_platformnetty_iotdevice_body_MultiControlInfo_descriptor,
        new java.lang.String[] { "ControlDevy", "ControlDevx", "MasterVel", "SlaveVel", });
    internal_static_com_hx_platformnetty_iotdevice_body_ChassisInfo_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_com_hx_platformnetty_iotdevice_body_ChassisInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_hx_platformnetty_iotdevice_body_ChassisInfo_descriptor,
        new java.lang.String[] { "VehicleType", "Info", });
    internal_static_com_hx_platformnetty_iotdevice_body_ChassisInfo_infoKv_descriptor =
      internal_static_com_hx_platformnetty_iotdevice_body_ChassisInfo_descriptor.getNestedTypes().get(0);
    internal_static_com_hx_platformnetty_iotdevice_body_ChassisInfo_infoKv_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_hx_platformnetty_iotdevice_body_ChassisInfo_infoKv_descriptor,
        new java.lang.String[] { "Id", "Value", });
    internal_static_com_hx_platformnetty_iotdevice_body_CalibrationResult_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_com_hx_platformnetty_iotdevice_body_CalibrationResult_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_hx_platformnetty_iotdevice_body_CalibrationResult_descriptor,
        new java.lang.String[] { "CalibrationType", "CalibrationResultState", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
